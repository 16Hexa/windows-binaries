// #################################################################################
// Generated by Symbol Type Viewer 32Bit/64Bit - Version 1.0.0.6 beta
// http://www.syseclabs.com
// Coding by Lionel d'Hauenens
// #################################################################################
// Image         : 64bit
// ImageName     : E:\temp\symbol\file\ntdll.dll
// LoadedPdbName : E:\temp\symbol\pdb\ntdll.pdb\2055091C8F2C5808D8DFE02C75D129591\ntdll.pdb

#ifdef __cplusplus
extern "C" {
#endif

//////////////////
//   C Define   //
//////////////////

#define VOID void
#define STDCALL __stdcall
#define FASTCALL __fastcall
#define CDECL __cdecl
#define THISCALL __thiscall
#define NEAR 
#define FAR 
//---------------------------------------------------------------------

//////////////////
// C Basic Type //
//////////////////

typedef signed char INT8;
typedef signed char CHAR;
typedef signed short INT16;
typedef signed int INT32;
typedef signed int BOOL;
typedef signed __int64 INT64;
typedef signed __int64 LONG64;
typedef signed long LONG32;
typedef unsigned char UINT8;
typedef unsigned char BYTE;
typedef unsigned short UINT16;
typedef unsigned short WCHAR;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned __int64 ULONG64;
typedef unsigned long ULONG32;
typedef float FLOAT32;
typedef double FLOAT64;
typedef struct {unsigned short W[5];} FLOAT80;
typedef struct { __int64 LowPart;__int64 HighPart;} FLOAT128;
typedef double DATE;
typedef signed long HRESULT;
typedef union { struct {unsigned long Lo; long Hi;}; __int64 int64;} CURRENCY;
typedef wchar_t OLECHAR;
//---------------------------------------------------------------------

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Enum types

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE  // 3 elements, 0x4 bytes
{
    StandardDesign  = 0 /*0x0*/,
    NEC98x86        = 1 /*0x1*/,
    EndAlternatives = 2 /*0x2*/
}ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef enum _BUS_QUERY_ID_TYPE  // 6 elements, 0x4 bytes
{
    BusQueryDeviceID           = 0 /*0x0*/,
    BusQueryHardwareIDs        = 1 /*0x1*/,
    BusQueryCompatibleIDs      = 2 /*0x2*/,
    BusQueryInstanceID         = 3 /*0x3*/,
    BusQueryDeviceSerialNumber = 4 /*0x4*/,
    BusQueryContainerID        = 5 /*0x5*/
}BUS_QUERY_ID_TYPE, *PBUS_QUERY_ID_TYPE;

typedef enum _DEVICE_POWER_STATE  // 6 elements, 0x4 bytes
{
    PowerDeviceUnspecified = 0 /*0x0*/,
    PowerDeviceD0          = 1 /*0x1*/,
    PowerDeviceD1          = 2 /*0x2*/,
    PowerDeviceD2          = 3 /*0x3*/,
    PowerDeviceD3          = 4 /*0x4*/,
    PowerDeviceMaximum     = 5 /*0x5*/
}DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _DEVICE_RELATION_TYPE  // 7 elements, 0x4 bytes
{
    BusRelations         = 0 /*0x0*/,
    EjectionRelations    = 1 /*0x1*/,
    PowerRelations       = 2 /*0x2*/,
    RemovalRelations     = 3 /*0x3*/,
    TargetDeviceRelation = 4 /*0x4*/,
    SingleBusRelations   = 5 /*0x5*/,
    TransportRelations   = 6 /*0x6*/
}DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _DEVICE_TEXT_TYPE  // 2 elements, 0x4 bytes
{
    DeviceTextDescription         = 0 /*0x0*/,
    DeviceTextLocationInformation = 1 /*0x1*/
}DEVICE_TEXT_TYPE, *PDEVICE_TEXT_TYPE;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE  // 6 elements, 0x4 bytes
{
    DeviceUsageTypeUndefined   = 0 /*0x0*/,
    DeviceUsageTypePaging      = 1 /*0x1*/,
    DeviceUsageTypeHibernation = 2 /*0x2*/,
    DeviceUsageTypeDumpFile    = 3 /*0x3*/,
    DeviceUsageTypeBoot        = 4 /*0x4*/,
    DeviceUsageTypePostDisplay = 5 /*0x5*/
}DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _DEVICE_WAKE_DEPTH  // 7 elements, 0x4 bytes
{
    DeviceWakeDepthNotWakeable = 0 /*0x0*/,
    DeviceWakeDepthD0          = 1 /*0x1*/,
    DeviceWakeDepthD1          = 2 /*0x2*/,
    DeviceWakeDepthD2          = 3 /*0x3*/,
    DeviceWakeDepthD3hot       = 4 /*0x4*/,
    DeviceWakeDepthD3cold      = 5 /*0x5*/,
    DeviceWakeDepthMaximum     = 6 /*0x6*/
}DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS  // 2 elements, 0x4 bytes
{
    DirectoryNotifyInformation         = 1 /*0x1*/,
    DirectoryNotifyExtendedInformation = 2 /*0x2*/
}DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum _DISPLAYCONFIG_SCANLINE_ORDERING  // 6 elements, 0x4 bytes
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                = 0 /*0x0*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                = 1 /*0x1*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                 = 2 /*0x2*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2 /*0x2*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3 /*0x3*/,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32               = -1 /*0xFF*/
}DISPLAYCONFIG_SCANLINE_ORDERING, *PDISPLAYCONFIG_SCANLINE_ORDERING;

typedef enum _EVENT_TYPE  // 2 elements, 0x4 bytes
{
    NotificationEvent    = 0 /*0x0*/,
    SynchronizationEvent = 1 /*0x1*/
}EVENT_TYPE, *PEVENT_TYPE;

typedef enum _EX_GEN_RANDOM_DOMAIN  // 4 elements, 0x4 bytes
{
    ExGenRandomDomainKernel      = 0 /*0x0*/,
    ExGenRandomDomainFirst       = 0 /*0x0*/,
    ExGenRandomDomainUserVisible = 1 /*0x1*/,
    ExGenRandomDomainMax         = 2 /*0x2*/
}EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _EXCEPTION_DISPOSITION  // 4 elements, 0x4 bytes
{
    ExceptionContinueExecution = 0 /*0x0*/,
    ExceptionContinueSearch    = 1 /*0x1*/,
    ExceptionNestedException   = 2 /*0x2*/,
    ExceptionCollidedUnwind    = 3 /*0x3*/
}EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _EXQUEUEINDEX  // 3 elements, 0x4 bytes
{
    ExPoolUntrusted = 0 /*0x0*/,
    IoPoolUntrusted = 1 /*0x1*/,
    ExPoolMax       = 8 /*0x8*/
}EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef enum _FILE_INFORMATION_CLASS  // 76 elements, 0x4 bytes
{
    FileDirectoryInformation                     = 1 /*0x1*/,
    FileFullDirectoryInformation                 = 2 /*0x2*/,
    FileBothDirectoryInformation                 = 3 /*0x3*/,
    FileBasicInformation                         = 4 /*0x4*/,
    FileStandardInformation                      = 5 /*0x5*/,
    FileInternalInformation                      = 6 /*0x6*/,
    FileEaInformation                            = 7 /*0x7*/,
    FileAccessInformation                        = 8 /*0x8*/,
    FileNameInformation                          = 9 /*0x9*/,
    FileRenameInformation                        = 10 /*0xA*/,
    FileLinkInformation                          = 11 /*0xB*/,
    FileNamesInformation                         = 12 /*0xC*/,
    FileDispositionInformation                   = 13 /*0xD*/,
    FilePositionInformation                      = 14 /*0xE*/,
    FileFullEaInformation                        = 15 /*0xF*/,
    FileModeInformation                          = 16 /*0x10*/,
    FileAlignmentInformation                     = 17 /*0x11*/,
    FileAllInformation                           = 18 /*0x12*/,
    FileAllocationInformation                    = 19 /*0x13*/,
    FileEndOfFileInformation                     = 20 /*0x14*/,
    FileAlternateNameInformation                 = 21 /*0x15*/,
    FileStreamInformation                        = 22 /*0x16*/,
    FilePipeInformation                          = 23 /*0x17*/,
    FilePipeLocalInformation                     = 24 /*0x18*/,
    FilePipeRemoteInformation                    = 25 /*0x19*/,
    FileMailslotQueryInformation                 = 26 /*0x1A*/,
    FileMailslotSetInformation                   = 27 /*0x1B*/,
    FileCompressionInformation                   = 28 /*0x1C*/,
    FileObjectIdInformation                      = 29 /*0x1D*/,
    FileCompletionInformation                    = 30 /*0x1E*/,
    FileMoveClusterInformation                   = 31 /*0x1F*/,
    FileQuotaInformation                         = 32 /*0x20*/,
    FileReparsePointInformation                  = 33 /*0x21*/,
    FileNetworkOpenInformation                   = 34 /*0x22*/,
    FileAttributeTagInformation                  = 35 /*0x23*/,
    FileTrackingInformation                      = 36 /*0x24*/,
    FileIdBothDirectoryInformation               = 37 /*0x25*/,
    FileIdFullDirectoryInformation               = 38 /*0x26*/,
    FileValidDataLengthInformation               = 39 /*0x27*/,
    FileShortNameInformation                     = 40 /*0x28*/,
    FileIoCompletionNotificationInformation      = 41 /*0x29*/,
    FileIoStatusBlockRangeInformation            = 42 /*0x2A*/,
    FileIoPriorityHintInformation                = 43 /*0x2B*/,
    FileSfioReserveInformation                   = 44 /*0x2C*/,
    FileSfioVolumeInformation                    = 45 /*0x2D*/,
    FileHardLinkInformation                      = 46 /*0x2E*/,
    FileProcessIdsUsingFileInformation           = 47 /*0x2F*/,
    FileNormalizedNameInformation                = 48 /*0x30*/,
    FileNetworkPhysicalNameInformation           = 49 /*0x31*/,
    FileIdGlobalTxDirectoryInformation           = 50 /*0x32*/,
    FileIsRemoteDeviceInformation                = 51 /*0x33*/,
    FileUnusedInformation                        = 52 /*0x34*/,
    FileNumaNodeInformation                      = 53 /*0x35*/,
    FileStandardLinkInformation                  = 54 /*0x36*/,
    FileRemoteProtocolInformation                = 55 /*0x37*/,
    FileRenameInformationBypassAccessCheck       = 56 /*0x38*/,
    FileLinkInformationBypassAccessCheck         = 57 /*0x39*/,
    FileVolumeNameInformation                    = 58 /*0x3A*/,
    FileIdInformation                            = 59 /*0x3B*/,
    FileIdExtdDirectoryInformation               = 60 /*0x3C*/,
    FileReplaceCompletionInformation             = 61 /*0x3D*/,
    FileHardLinkFullIdInformation                = 62 /*0x3E*/,
    FileIdExtdBothDirectoryInformation           = 63 /*0x3F*/,
    FileDispositionInformationEx                 = 64 /*0x40*/,
    FileRenameInformationEx                      = 65 /*0x41*/,
    FileRenameInformationExBypassAccessCheck     = 66 /*0x42*/,
    FileDesiredStorageClassInformation           = 67 /*0x43*/,
    FileStatInformation                          = 68 /*0x44*/,
    FileMemoryPartitionInformation               = 69 /*0x45*/,
    FileStatLxInformation                        = 70 /*0x46*/,
    FileCaseSensitiveInformation                 = 71 /*0x47*/,
    FileLinkInformationEx                        = 72 /*0x48*/,
    FileLinkInformationExBypassAccessCheck       = 73 /*0x49*/,
    FileStorageReserveIdInformation              = 74 /*0x4A*/,
    FileCaseSensitiveInformationForceAccessCheck = 75 /*0x4B*/,
    FileMaximumInformation                       = 76 /*0x4C*/
}FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _FS_FILTER_SECTION_SYNC_TYPE  // 2 elements, 0x4 bytes
{
    SyncTypeOther         = 0 /*0x0*/,
    SyncTypeCreateSection = 1 /*0x1*/
}FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE  // 2 elements, 0x4 bytes
{
    NotifyTypeCreate  = 0 /*0x0*/,
    NotifyTypeRetired = 1 /*0x1*/
}FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;

typedef enum _FSINFOCLASS  // 15 elements, 0x4 bytes
{
    FileFsVolumeInformation       = 1 /*0x1*/,
    FileFsLabelInformation        = 2 /*0x2*/,
    FileFsSizeInformation         = 3 /*0x3*/,
    FileFsDeviceInformation       = 4 /*0x4*/,
    FileFsAttributeInformation    = 5 /*0x5*/,
    FileFsControlInformation      = 6 /*0x6*/,
    FileFsFullSizeInformation     = 7 /*0x7*/,
    FileFsObjectIdInformation     = 8 /*0x8*/,
    FileFsDriverPathInformation   = 9 /*0x9*/,
    FileFsVolumeFlagsInformation  = 10 /*0xA*/,
    FileFsSectorSizeInformation   = 11 /*0xB*/,
    FileFsDataCopyInformation     = 12 /*0xC*/,
    FileFsMetadataSizeInformation = 13 /*0xD*/,
    FileFsFullSizeInformationEx   = 14 /*0xE*/,
    FileFsMaximumInformation      = 15 /*0xF*/
}FSINFOCLASS, *PFSINFOCLASS;

typedef enum _FUNCTION_TABLE_TYPE  // 4 elements, 0x4 bytes
{
    RF_SORTED         = 0 /*0x0*/,
    RF_UNSORTED       = 1 /*0x1*/,
    RF_CALLBACK       = 2 /*0x2*/,
    RF_KERNEL_DYNAMIC = 3 /*0x3*/
}FUNCTION_TABLE_TYPE, *PFUNCTION_TABLE_TYPE;

typedef enum _HARDWARE_COUNTER_TYPE  // 2 elements, 0x4 bytes
{
    PMCCounter             = 0 /*0x0*/,
    MaxHardwareCounterType = 1 /*0x1*/
}HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef enum _HEAP_FAILURE_TYPE  // 22 elements, 0x4 bytes
{
    heap_failure_internal                      = 0 /*0x0*/,
    heap_failure_unknown                       = 1 /*0x1*/,
    heap_failure_generic                       = 2 /*0x2*/,
    heap_failure_entry_corruption              = 3 /*0x3*/,
    heap_failure_multiple_entries_corruption   = 4 /*0x4*/,
    heap_failure_virtual_block_corruption      = 5 /*0x5*/,
    heap_failure_buffer_overrun                = 6 /*0x6*/,
    heap_failure_buffer_underrun               = 7 /*0x7*/,
    heap_failure_block_not_busy                = 8 /*0x8*/,
    heap_failure_invalid_argument              = 9 /*0x9*/,
    heap_failure_invalid_allocation_type       = 10 /*0xA*/,
    heap_failure_usage_after_free              = 11 /*0xB*/,
    heap_failure_cross_heap_operation          = 12 /*0xC*/,
    heap_failure_freelists_corruption          = 13 /*0xD*/,
    heap_failure_listentry_corruption          = 14 /*0xE*/,
    heap_failure_lfh_bitmap_mismatch           = 15 /*0xF*/,
    heap_failure_segment_lfh_bitmap_corruption = 16 /*0x10*/,
    heap_failure_segment_lfh_double_free       = 17 /*0x11*/,
    heap_failure_vs_subsegment_corruption      = 18 /*0x12*/,
    heap_failure_null_heap                     = 19 /*0x13*/,
    heap_failure_allocation_limit              = 20 /*0x14*/,
    heap_failure_commit_limit                  = 21 /*0x15*/
}HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef enum _HEAP_LFH_LOCKMODE  // 3 elements, 0x4 bytes
{
    HeapLockNotHeld   = 0 /*0x0*/,
    HeapLockShared    = 1 /*0x1*/,
    HeapLockExclusive = 2 /*0x2*/
}HEAP_LFH_LOCKMODE, *PHEAP_LFH_LOCKMODE;

typedef enum _HEAP_SEG_RANGE_TYPE  // 5 elements, 0x4 bytes
{
    HeapSegRangeUser     = 0 /*0x0*/,
    HeapSegRangeInternal = 1 /*0x1*/,
    HeapSegRangeLFH      = 2 /*0x2*/,
    HeapSegRangeVS       = 3 /*0x3*/,
    HeapSegRangeTypeMax  = 3 /*0x3*/
}HEAP_SEG_RANGE_TYPE, *PHEAP_SEG_RANGE_TYPE;

typedef enum _HEAP_SEGMGR_LARGE_PAGE_POLICY  // 7 elements, 0x4 bytes
{
    HeapSegMgrNoLargePages       = 0 /*0x0*/,
    HeapSegMgrEnableLargePages   = 1 /*0x1*/,
    HeapSegMgrNormalPolicy       = 1 /*0x1*/,
    HeapSegMgrForceSmall         = 2 /*0x2*/,
    HeapSegMgrForceLarge         = 3 /*0x3*/,
    HeapSegMgrForceRandom        = 4 /*0x4*/,
    HeapSegMgrLargePagePolicyMax = 5 /*0x5*/
}HEAP_SEGMGR_LARGE_PAGE_POLICY, *PHEAP_SEGMGR_LARGE_PAGE_POLICY;

typedef enum _INTERFACE_TYPE  // 20 elements, 0x4 bytes
{
    InterfaceTypeUndefined = -1 /*0xFF*/,
    Internal               = 0 /*0x0*/,
    Isa                    = 1 /*0x1*/,
    Eisa                   = 2 /*0x2*/,
    MicroChannel           = 3 /*0x3*/,
    TurboChannel           = 4 /*0x4*/,
    PCIBus                 = 5 /*0x5*/,
    VMEBus                 = 6 /*0x6*/,
    NuBus                  = 7 /*0x7*/,
    PCMCIABus              = 8 /*0x8*/,
    CBus                   = 9 /*0x9*/,
    MPIBus                 = 10 /*0xA*/,
    MPSABus                = 11 /*0xB*/,
    ProcessorInternal      = 12 /*0xC*/,
    InternalPowerBus       = 13 /*0xD*/,
    PNPISABus              = 14 /*0xE*/,
    PNPBus                 = 15 /*0xF*/,
    Vmcs                   = 16 /*0x10*/,
    ACPIBus                = 17 /*0x11*/,
    MaximumInterfaceType   = 18 /*0x12*/
}INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _INTERLOCKED_RESULT  // 3 elements, 0x4 bytes
{
    ResultNegative = 1 /*0x1*/,
    ResultZero     = 0 /*0x0*/,
    ResultPositive = 2 /*0x2*/
}INTERLOCKED_RESULT, *PINTERLOCKED_RESULT;

typedef enum _INVPCID_TYPE  // 4 elements, 0x4 bytes
{
    InvpcidIndividualAddress    = 0 /*0x0*/,
    InvpcidSingleContext        = 1 /*0x1*/,
    InvpcidAllContextAndGlobals = 2 /*0x2*/,
    InvpcidAllContext           = 3 /*0x3*/
}INVPCID_TYPE, *PINVPCID_TYPE;

typedef enum _IO_ALLOCATION_ACTION  // 3 elements, 0x4 bytes
{
    KeepObject                    = 1 /*0x1*/,
    DeallocateObject              = 2 /*0x2*/,
    DeallocateObjectKeepRegisters = 3 /*0x3*/
}IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef enum _IO_PRIORITY_HINT  // 6 elements, 0x4 bytes
{
    IoPriorityVeryLow  = 0 /*0x0*/,
    IoPriorityLow      = 1 /*0x1*/,
    IoPriorityNormal   = 2 /*0x2*/,
    IoPriorityHigh     = 3 /*0x3*/,
    IoPriorityCritical = 4 /*0x4*/,
    MaxIoPriorityTypes = 5 /*0x5*/
}IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef enum _IO_RATE_CONTROL_TYPE  // 26 elements, 0x4 bytes
{
    IoRateControlTypeCapMin                         = 0 /*0x0*/,
    IoRateControlTypeIopsCap                        = 0 /*0x0*/,
    IoRateControlTypeBandwidthCap                   = 1 /*0x1*/,
    IoRateControlTypeTimePercentCap                 = 2 /*0x2*/,
    IoRateControlTypeCapMax                         = 2 /*0x2*/,
    IoRateControlTypeReservationMin                 = 3 /*0x3*/,
    IoRateControlTypeIopsReservation                = 3 /*0x3*/,
    IoRateControlTypeBandwidthReservation           = 4 /*0x4*/,
    IoRateControlTypeTimePercentReservation         = 5 /*0x5*/,
    IoRateControlTypeReservationMax                 = 5 /*0x5*/,
    IoRateControlTypeCriticalReservationMin         = 6 /*0x6*/,
    IoRateControlTypeIopsCriticalReservation        = 6 /*0x6*/,
    IoRateControlTypeBandwidthCriticalReservation   = 7 /*0x7*/,
    IoRateControlTypeTimePercentCriticalReservation = 8 /*0x8*/,
    IoRateControlTypeCriticalReservationMax         = 8 /*0x8*/,
    IoRateControlTypeSoftCapMin                     = 9 /*0x9*/,
    IoRateControlTypeIopsSoftCap                    = 9 /*0x9*/,
    IoRateControlTypeBandwidthSoftCap               = 10 /*0xA*/,
    IoRateControlTypeTimePercentSoftCap             = 11 /*0xB*/,
    IoRateControlTypeSoftCapMax                     = 11 /*0xB*/,
    IoRateControlTypeLimitExcessNotifyMin           = 12 /*0xC*/,
    IoRateControlTypeIopsLimitExcessNotify          = 12 /*0xC*/,
    IoRateControlTypeBandwidthLimitExcessNotify     = 13 /*0xD*/,
    IoRateControlTypeTimePercentLimitExcessNotify   = 14 /*0xE*/,
    IoRateControlTypeLimitExcessNotifyMax           = 14 /*0xE*/,
    IoRateControlTypeMax                            = 15 /*0xF*/
}IO_RATE_CONTROL_TYPE, *PIO_RATE_CONTROL_TYPE;

typedef enum _IRQ_PRIORITY  // 4 elements, 0x4 bytes
{
    IrqPriorityUndefined = 0 /*0x0*/,
    IrqPriorityLow       = 1 /*0x1*/,
    IrqPriorityNormal    = 2 /*0x2*/,
    IrqPriorityHigh      = 3 /*0x3*/
}IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _JOB_OBJECT_IO_RATE_CONTROL_FLAGS  // 5 elements, 0x4 bytes
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE                        = 1 /*0x1*/,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME             = 2 /*0x2*/,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL         = 4 /*0x4*/,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8 /*0x8*/,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS                   = 15 /*0xF*/
}JOB_OBJECT_IO_RATE_CONTROL_FLAGS, *PJOB_OBJECT_IO_RATE_CONTROL_FLAGS;

typedef enum _JOB_OBJECT_NET_RATE_CONTROL_FLAGS  // 4 elements, 0x4 bytes
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE        = 1 /*0x1*/,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2 /*0x2*/,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG      = 4 /*0x4*/,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS   = 7 /*0x7*/
}JOB_OBJECT_NET_RATE_CONTROL_FLAGS, *PJOB_OBJECT_NET_RATE_CONTROL_FLAGS;

typedef enum _JOBOBJECTINFOCLASS  // 73 elements, 0x4 bytes
{
    JobObjectBasicAccountingInformation         = 1 /*0x1*/,
    JobObjectBasicLimitInformation              = 2 /*0x2*/,
    JobObjectBasicProcessIdList                 = 3 /*0x3*/,
    JobObjectBasicUIRestrictions                = 4 /*0x4*/,
    JobObjectSecurityLimitInformation           = 5 /*0x5*/,
    JobObjectEndOfJobTimeInformation            = 6 /*0x6*/,
    JobObjectAssociateCompletionPortInformation = 7 /*0x7*/,
    JobObjectBasicAndIoAccountingInformation    = 8 /*0x8*/,
    JobObjectExtendedLimitInformation           = 9 /*0x9*/,
    JobObjectJobSetInformation                  = 10 /*0xA*/,
    JobObjectGroupInformation                   = 11 /*0xB*/,
    JobObjectNotificationLimitInformation       = 12 /*0xC*/,
    JobObjectLimitViolationInformation          = 13 /*0xD*/,
    JobObjectGroupInformationEx                 = 14 /*0xE*/,
    JobObjectCpuRateControlInformation          = 15 /*0xF*/,
    JobObjectCompletionFilter                   = 16 /*0x10*/,
    JobObjectCompletionCounter                  = 17 /*0x11*/,
    JobObjectFreezeInformation                  = 18 /*0x12*/,
    JobObjectExtendedAccountingInformation      = 19 /*0x13*/,
    JobObjectWakeInformation                    = 20 /*0x14*/,
    JobObjectBackgroundInformation              = 21 /*0x15*/,
    JobObjectSchedulingRankBiasInformation      = 22 /*0x16*/,
    JobObjectTimerVirtualizationInformation     = 23 /*0x17*/,
    JobObjectCycleTimeNotification              = 24 /*0x18*/,
    JobObjectClearEvent                         = 25 /*0x19*/,
    JobObjectInterferenceInformation            = 26 /*0x1A*/,
    JobObjectClearPeakJobMemoryUsed             = 27 /*0x1B*/,
    JobObjectMemoryUsageInformation             = 28 /*0x1C*/,
    JobObjectSharedCommit                       = 29 /*0x1D*/,
    JobObjectContainerId                        = 30 /*0x1E*/,
    JobObjectIoRateControlInformation           = 31 /*0x1F*/,
    JobObjectSiloRootDirectory                  = 37 /*0x25*/,
    JobObjectServerSiloBasicInformation         = 38 /*0x26*/,
    JobObjectServerSiloUserSharedData           = 39 /*0x27*/,
    JobObjectServerSiloInitialize               = 40 /*0x28*/,
    JobObjectServerSiloRunningState             = 41 /*0x29*/,
    JobObjectIoAttribution                      = 42 /*0x2A*/,
    JobObjectMemoryPartitionInformation         = 43 /*0x2B*/,
    JobObjectContainerTelemetryId               = 44 /*0x2C*/,
    JobObjectSiloSystemRoot                     = 45 /*0x2D*/,
    JobObjectEnergyTrackingState                = 46 /*0x2E*/,
    JobObjectThreadImpersonationInformation     = 47 /*0x2F*/,
    JobObjectReserved1Information               = 18 /*0x12*/,
    JobObjectReserved2Information               = 19 /*0x13*/,
    JobObjectReserved3Information               = 20 /*0x14*/,
    JobObjectReserved4Information               = 21 /*0x15*/,
    JobObjectReserved5Information               = 22 /*0x16*/,
    JobObjectReserved6Information               = 23 /*0x17*/,
    JobObjectReserved7Information               = 24 /*0x18*/,
    JobObjectReserved8Information               = 25 /*0x19*/,
    JobObjectReserved9Information               = 26 /*0x1A*/,
    JobObjectReserved10Information              = 27 /*0x1B*/,
    JobObjectReserved11Information              = 28 /*0x1C*/,
    JobObjectReserved12Information              = 29 /*0x1D*/,
    JobObjectReserved13Information              = 30 /*0x1E*/,
    JobObjectReserved14Information              = 31 /*0x1F*/,
    JobObjectNetRateControlInformation          = 32 /*0x20*/,
    JobObjectNotificationLimitInformation2      = 33 /*0x21*/,
    JobObjectLimitViolationInformation2         = 34 /*0x22*/,
    JobObjectCreateSilo                         = 35 /*0x23*/,
    JobObjectSiloBasicInformation               = 36 /*0x24*/,
    JobObjectReserved15Information              = 37 /*0x25*/,
    JobObjectReserved16Information              = 38 /*0x26*/,
    JobObjectReserved17Information              = 39 /*0x27*/,
    JobObjectReserved18Information              = 40 /*0x28*/,
    JobObjectReserved19Information              = 41 /*0x29*/,
    JobObjectReserved20Information              = 42 /*0x2A*/,
    JobObjectReserved21Information              = 43 /*0x2B*/,
    JobObjectReserved22Information              = 44 /*0x2C*/,
    JobObjectReserved23Information              = 45 /*0x2D*/,
    JobObjectReserved24Information              = 46 /*0x2E*/,
    JobObjectReserved25Information              = 47 /*0x2F*/,
    MaxJobObjectInfoClass                       = 48 /*0x30*/
}JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _KE_WAKE_SOURCE_TYPE  // 9 elements, 0x4 bytes
{
    KeWakeSourceTypeSpuriousWake      = 0 /*0x0*/,
    KeWakeSourceTypeSpuriousClock     = 1 /*0x1*/,
    KeWakeSourceTypeSpuriousInterrupt = 2 /*0x2*/,
    KeWakeSourceTypeQueryFailure      = 3 /*0x3*/,
    KeWakeSourceTypeAccountingFailure = 4 /*0x4*/,
    KeWakeSourceTypeStaticSourceMax   = 4 /*0x4*/,
    KeWakeSourceTypeInterrupt         = 5 /*0x5*/,
    KeWakeSourceTypeIRTimer           = 6 /*0x6*/,
    KeWakeSourceTypeMax               = 7 /*0x7*/
}KE_WAKE_SOURCE_TYPE, *PKE_WAKE_SOURCE_TYPE;

typedef enum _KHETERO_CPU_POLICY  // 11 elements, 0x4 bytes
{
    KHeteroCpuPolicyAll         = 0 /*0x0*/,
    KHeteroCpuPolicyLarge       = 1 /*0x1*/,
    KHeteroCpuPolicyLargeOrIdle = 2 /*0x2*/,
    KHeteroCpuPolicySmall       = 3 /*0x3*/,
    KHeteroCpuPolicySmallOrIdle = 4 /*0x4*/,
    KHeteroCpuPolicyDynamic     = 5 /*0x5*/,
    KHeteroCpuPolicyStaticMax   = 5 /*0x5*/,
    KHeteroCpuPolicyBiasedSmall = 6 /*0x6*/,
    KHeteroCpuPolicyBiasedLarge = 7 /*0x7*/,
    KHeteroCpuPolicyDefault     = 8 /*0x8*/,
    KHeteroCpuPolicyMax         = 9 /*0x9*/
}KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef enum _KHETERO_CPU_QOS  // 7 elements, 0x4 bytes
{
    KHeteroCpuQosDefault    = 0 /*0x0*/,
    KHeteroCpuQosHigh       = 0 /*0x0*/,
    KHeteroCpuQosMedium     = 1 /*0x1*/,
    KHeteroCpuQosLow        = 2 /*0x2*/,
    KHeteroCpuQosMultimedia = 3 /*0x3*/,
    KHeteroCpuQosDynamic    = 4 /*0x4*/,
    KHeteroCpuQosMax        = 4 /*0x4*/
}KHETERO_CPU_QOS, *PKHETERO_CPU_QOS;

typedef enum _KHETERO_RUNNING_TYPE  // 3 elements, 0x4 bytes
{
    KHeteroShortRunning   = 0 /*0x0*/,
    KHeteroLongRunning    = 1 /*0x1*/,
    KHeteroRunningTypeMax = 2 /*0x2*/
}KHETERO_RUNNING_TYPE, *PKHETERO_RUNNING_TYPE;

typedef enum _KINTERRUPT_POLARITY  // 8 elements, 0x4 bytes
{
    InterruptPolarityUnknown       = 0 /*0x0*/,
    InterruptActiveHigh            = 1 /*0x1*/,
    InterruptRisingEdge            = 1 /*0x1*/,
    InterruptActiveLow             = 2 /*0x2*/,
    InterruptFallingEdge           = 2 /*0x2*/,
    InterruptActiveBoth            = 3 /*0x3*/,
    InterruptActiveBothTriggerLow  = 3 /*0x3*/,
    InterruptActiveBothTriggerHigh = 4 /*0x4*/
}KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef enum _KOBJECTS  // 28 elements, 0x4 bytes
{
    EventNotificationObject     = 0 /*0x0*/,
    EventSynchronizationObject  = 1 /*0x1*/,
    MutantObject                = 2 /*0x2*/,
    ProcessObject               = 3 /*0x3*/,
    QueueObject                 = 4 /*0x4*/,
    SemaphoreObject             = 5 /*0x5*/,
    ThreadObject                = 6 /*0x6*/,
    GateObject                  = 7 /*0x7*/,
    TimerNotificationObject     = 8 /*0x8*/,
    TimerSynchronizationObject  = 9 /*0x9*/,
    Spare2Object                = 10 /*0xA*/,
    Spare3Object                = 11 /*0xB*/,
    Spare4Object                = 12 /*0xC*/,
    Spare5Object                = 13 /*0xD*/,
    Spare6Object                = 14 /*0xE*/,
    Spare7Object                = 15 /*0xF*/,
    Spare8Object                = 16 /*0x10*/,
    ProfileCallbackObject       = 17 /*0x11*/,
    ApcObject                   = 18 /*0x12*/,
    DpcObject                   = 19 /*0x13*/,
    DeviceQueueObject           = 20 /*0x14*/,
    PriQueueObject              = 21 /*0x15*/,
    InterruptObject             = 22 /*0x16*/,
    ProfileObject               = 23 /*0x17*/,
    Timer2NotificationObject    = 24 /*0x18*/,
    Timer2SynchronizationObject = 25 /*0x19*/,
    ThreadedDpcObject           = 26 /*0x1A*/,
    MaximumKernelObject         = 27 /*0x1B*/
}KOBJECTS, *PKOBJECTS;

typedef enum _KPROCESS_PPM_POLICY  // 9 elements, 0x4 bytes
{
    ProcessPpmDefault         = 0 /*0x0*/,
    ProcessPpmThrottle        = 1 /*0x1*/,
    ProcessPpmSemiThrottle    = 2 /*0x2*/,
    ProcessPpmNoThrottle      = 3 /*0x3*/,
    ProcessPpmWindowMinimized = 4 /*0x4*/,
    ProcessPpmWindowOccluded  = 5 /*0x5*/,
    ProcessPpmWindowVisible   = 6 /*0x6*/,
    ProcessPpmWindowInFocus   = 7 /*0x7*/,
    MaxProcessPpmPolicy       = 8 /*0x8*/
}KPROCESS_PPM_POLICY, *PKPROCESS_PPM_POLICY;

typedef enum _KPROCESS_STATE  // 8 elements, 0x4 bytes
{
    ProcessInMemory      = 0 /*0x0*/,
    ProcessOutOfMemory   = 1 /*0x1*/,
    ProcessInTransition  = 2 /*0x2*/,
    ProcessOutTransition = 3 /*0x3*/,
    ProcessInSwap        = 4 /*0x4*/,
    ProcessOutSwap       = 5 /*0x5*/,
    ProcessRetryOutSwap  = 6 /*0x6*/,
    ProcessAllSwapStates = 7 /*0x7*/
}KPROCESS_STATE, *PKPROCESS_STATE;

typedef enum _KTHREAD_PPM_POLICY  // 5 elements, 0x4 bytes
{
    ThreadPpmDefault      = 0 /*0x0*/,
    ThreadPpmThrottle     = 1 /*0x1*/,
    ThreadPpmSemiThrottle = 2 /*0x2*/,
    ThreadPpmNoThrottle   = 3 /*0x3*/,
    MaxThreadPpmPolicy    = 4 /*0x4*/
}KTHREAD_PPM_POLICY, *PKTHREAD_PPM_POLICY;

typedef enum _KTHREAD_TAG  // 3 elements, 0x4 bytes
{
    KThreadTagNone           = 0 /*0x0*/,
    KThreadTagMediaBuffering = 1 /*0x1*/,
    KThreadTagMax            = 2 /*0x2*/
}KTHREAD_TAG, *PKTHREAD_TAG;

typedef enum _KWAIT_BLOCK_STATE  // 8 elements, 0x4 bytes
{
    WaitBlockBypassStart           = 0 /*0x0*/,
    WaitBlockBypassComplete        = 1 /*0x1*/,
    WaitBlockSuspendBypassStart    = 2 /*0x2*/,
    WaitBlockSuspendBypassComplete = 3 /*0x3*/,
    WaitBlockActive                = 4 /*0x4*/,
    WaitBlockInactive              = 5 /*0x5*/,
    WaitBlockSuspended             = 6 /*0x6*/,
    WaitBlockAllStates             = 7 /*0x7*/
}KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _KWAIT_STATE  // 10 elements, 0x4 bytes
{
    WaitInProgress        = 0 /*0x0*/,
    WaitCommitted         = 1 /*0x1*/,
    WaitAborted           = 2 /*0x2*/,
    WaitSuspendInProgress = 3 /*0x3*/,
    WaitSuspended         = 4 /*0x4*/,
    WaitResumeInProgress  = 5 /*0x5*/,
    WaitResumeAborted     = 6 /*0x6*/,
    WaitFirstSuspendState = 3 /*0x3*/,
    WaitLastSuspendState  = 6 /*0x6*/,
    MaximumWaitState      = 7 /*0x7*/
}KWAIT_STATE, *PKWAIT_STATE;

typedef enum _LDR_DDAG_STATE  // 15 elements, 0x4 bytes
{
    LdrModulesMerged                 = -5 /*0xFB*/,
    LdrModulesInitError              = -4 /*0xFC*/,
    LdrModulesSnapError              = -3 /*0xFD*/,
    LdrModulesUnloaded               = -2 /*0xFE*/,
    LdrModulesUnloading              = -1 /*0xFF*/,
    LdrModulesPlaceHolder            = 0 /*0x0*/,
    LdrModulesMapping                = 1 /*0x1*/,
    LdrModulesMapped                 = 2 /*0x2*/,
    LdrModulesWaitingForDependencies = 3 /*0x3*/,
    LdrModulesSnapping               = 4 /*0x4*/,
    LdrModulesSnapped                = 5 /*0x5*/,
    LdrModulesCondensed              = 6 /*0x6*/,
    LdrModulesReadyToInit            = 7 /*0x7*/,
    LdrModulesInitializing           = 8 /*0x8*/,
    LdrModulesReadyToRun             = 9 /*0x9*/
}LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef enum _LDR_DLL_LOAD_REASON  // 10 elements, 0x4 bytes
{
    LoadReasonStaticDependency           = 0 /*0x0*/,
    LoadReasonStaticForwarderDependency  = 1 /*0x1*/,
    LoadReasonDynamicForwarderDependency = 2 /*0x2*/,
    LoadReasonDelayloadDependency        = 3 /*0x3*/,
    LoadReasonDynamicLoad                = 4 /*0x4*/,
    LoadReasonAsImageLoad                = 5 /*0x5*/,
    LoadReasonAsDataLoad                 = 6 /*0x6*/,
    LoadReasonEnclavePrimary             = 7 /*0x7*/,
    LoadReasonEnclaveDependency          = 8 /*0x8*/,
    LoadReasonUnknown                    = -1 /*0xFF*/
}LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef enum _LSA_FOREST_TRUST_RECORD_TYPE  // 4 elements, 0x4 bytes
{
    ForestTrustTopLevelName   = 0 /*0x0*/,
    ForestTrustTopLevelNameEx = 1 /*0x1*/,
    ForestTrustDomainInfo     = 2 /*0x2*/,
    ForestTrustRecordTypeLast = 2 /*0x2*/
}LSA_FOREST_TRUST_RECORD_TYPE, *PLSA_FOREST_TRUST_RECORD_TYPE;

typedef enum _MACHINE_CHECK_NESTING_LEVEL  // 3 elements, 0x4 bytes
{
    McheckNormal        = 0 /*0x0*/,
    McheckNmi           = 1 /*0x1*/,
    McheckNestingLevels = 2 /*0x2*/
}MACHINE_CHECK_NESTING_LEVEL, *PMACHINE_CHECK_NESTING_LEVEL;

typedef enum _MCA_EXCEPTION_TYPE  // 2 elements, 0x4 bytes
{
    HAL_MCE_RECORD = 0 /*0x0*/,
    HAL_MCA_RECORD = 1 /*0x1*/
}MCA_EXCEPTION_TYPE, *PMCA_EXCEPTION_TYPE;

typedef enum _MEMORY_CACHING_TYPE  // 8 elements, 0x4 bytes
{
    MmNonCached              = 0 /*0x0*/,
    MmCached                 = 1 /*0x1*/,
    MmWriteCombined          = 2 /*0x2*/,
    MmHardwareCoherentCached = 3 /*0x3*/,
    MmNonCachedUnordered     = 4 /*0x4*/,
    MmUSWCCached             = 5 /*0x5*/,
    MmMaximumCacheType       = 6 /*0x6*/,
    MmNotMapped              = -1 /*0xFF*/
}MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG  // 1 elements, 0x4 bytes
{
    MmFrameBufferCached = 2 /*0x2*/
}MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _MM_PAGE_ACCESS_TYPE  // 4 elements, 0x4 bytes
{
    MmPteAccessType         = 0 /*0x0*/,
    MmCcReadAheadType       = 1 /*0x1*/,
    MmPfnRepurposeType      = 2 /*0x2*/,
    MmMaximumPageAccessType = 3 /*0x3*/
}MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _MODE  // 3 elements, 0x4 bytes
{
    KernelMode  = 0 /*0x0*/,
    UserMode    = 1 /*0x1*/,
    MaximumMode = 2 /*0x2*/
}MODE, *PMODE;

typedef enum _NT_PRODUCT_TYPE  // 3 elements, 0x4 bytes
{
    NtProductWinNt    = 1 /*0x1*/,
    NtProductLanManNt = 2 /*0x2*/,
    NtProductServer   = 3 /*0x3*/
}NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _OB_OPEN_REASON  // 5 elements, 0x4 bytes
{
    ObCreateHandle    = 0 /*0x0*/,
    ObOpenHandle      = 1 /*0x1*/,
    ObDuplicateHandle = 2 /*0x2*/,
    ObInheritHandle   = 3 /*0x3*/,
    ObMaxOpenReason   = 4 /*0x4*/
}OB_OPEN_REASON, *POB_OPEN_REASON;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE  // 2 elements, 0x4 bytes
{
    PerfInfoMemUsagePfnMetadata = 0 /*0x0*/,
    PerfInfoMemUsageMax         = 1 /*0x1*/
}PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _PERFINFO_MM_STAT  // 4 elements, 0x4 bytes
{
    PerfInfoMMStatNotUsed              = 0 /*0x0*/,
    PerfInfoMMStatAggregatePageCombine = 1 /*0x1*/,
    PerfInfoMMStatIterationPageCombine = 2 /*0x2*/,
    PerfInfoMMStatMax                  = 3 /*0x3*/
}PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _PF_FILE_ACCESS_TYPE  // 3 elements, 0x4 bytes
{
    PfFileAccessTypeRead  = 0 /*0x0*/,
    PfFileAccessTypeWrite = 1 /*0x1*/,
    PfFileAccessTypeMax   = 2 /*0x2*/
}PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef enum _POOL_TYPE  // 23 elements, 0x4 bytes
{
    NonPagedPool                         = 0 /*0x0*/,
    NonPagedPoolExecute                  = 0 /*0x0*/,
    PagedPool                            = 1 /*0x1*/,
    NonPagedPoolMustSucceed              = 2 /*0x2*/,
    DontUseThisType                      = 3 /*0x3*/,
    NonPagedPoolCacheAligned             = 4 /*0x4*/,
    PagedPoolCacheAligned                = 5 /*0x5*/,
    NonPagedPoolCacheAlignedMustS        = 6 /*0x6*/,
    MaxPoolType                          = 7 /*0x7*/,
    NonPagedPoolBase                     = 0 /*0x0*/,
    NonPagedPoolBaseMustSucceed          = 2 /*0x2*/,
    NonPagedPoolBaseCacheAligned         = 4 /*0x4*/,
    NonPagedPoolBaseCacheAlignedMustS    = 6 /*0x6*/,
    NonPagedPoolSession                  = 32 /*0x20*/,
    PagedPoolSession                     = 33 /*0x21*/,
    NonPagedPoolMustSucceedSession       = 34 /*0x22*/,
    DontUseThisTypeSession               = 35 /*0x23*/,
    NonPagedPoolCacheAlignedSession      = 36 /*0x24*/,
    PagedPoolCacheAlignedSession         = 37 /*0x25*/,
    NonPagedPoolCacheAlignedMustSSession = 38 /*0x26*/,
    NonPagedPoolNx                       = 512 /*0x200*/,
    NonPagedPoolNxCacheAligned           = 516 /*0x204*/,
    NonPagedPoolSessionNx                = 544 /*0x220*/
}POOL_TYPE, *PPOOL_TYPE;

typedef enum _POWER_ACTION  // 9 elements, 0x4 bytes
{
    PowerActionNone          = 0 /*0x0*/,
    PowerActionReserved      = 1 /*0x1*/,
    PowerActionSleep         = 2 /*0x2*/,
    PowerActionHibernate     = 3 /*0x3*/,
    PowerActionShutdown      = 4 /*0x4*/,
    PowerActionShutdownReset = 5 /*0x5*/,
    PowerActionShutdownOff   = 6 /*0x6*/,
    PowerActionWarmEject     = 7 /*0x7*/,
    PowerActionDisplayOff    = 8 /*0x8*/
}POWER_ACTION, *PPOWER_ACTION;

typedef enum _POWER_STATE_TYPE  // 2 elements, 0x4 bytes
{
    SystemPowerState = 0 /*0x0*/,
    DevicePowerState = 1 /*0x1*/
}POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER  // 10 elements, 0x4 bytes
{
    LookasideSmallIrpList      = 0 /*0x0*/,
    LookasideMediumIrpList     = 1 /*0x1*/,
    LookasideLargeIrpList      = 2 /*0x2*/,
    LookasideMdlList           = 3 /*0x3*/,
    LookasideCreateInfoList    = 4 /*0x4*/,
    LookasideNameBufferList    = 5 /*0x5*/,
    LookasideTwilightList      = 6 /*0x6*/,
    LookasideCompletionList    = 7 /*0x7*/,
    LookasideScratchBufferList = 8 /*0x8*/,
    LookasideMaximumList       = 9 /*0x9*/
}PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _PPM_IDLE_BUCKET_TIME_TYPE  // 3 elements, 0x4 bytes
{
    PpmIdleBucketTimeInQpc   = 0 /*0x0*/,
    PpmIdleBucketTimeIn100ns = 1 /*0x1*/,
    PpmIdleBucketTimeMaximum = 2 /*0x2*/
}PPM_IDLE_BUCKET_TIME_TYPE, *PPPM_IDLE_BUCKET_TIME_TYPE;

typedef enum _PROC_HYPERVISOR_STATE  // 4 elements, 0x4 bytes
{
    ProcHypervisorNone       = 0 /*0x0*/,
    ProcHypervisorPresent    = 1 /*0x1*/,
    ProcHypervisorPower      = 2 /*0x2*/,
    ProcHypervisorHvCounters = 3 /*0x3*/
}PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef enum _PROCESS_SECTION_TYPE  // 5 elements, 0x4 bytes
{
    ProcessSectionData           = 0 /*0x0*/,
    ProcessSectionImage          = 1 /*0x1*/,
    ProcessSectionImageNx        = 2 /*0x2*/,
    ProcessSectionPagefileBacked = 3 /*0x3*/,
    ProcessSectionMax            = 4 /*0x4*/
}PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _PROCESS_TERMINATE_REQUEST_REASON  // 5 elements, 0x4 bytes
{
    ProcessTerminateRequestReasonNone            = 0 /*0x0*/,
    ProcessTerminateCommitFail                   = 1 /*0x1*/,
    ProcessTerminateWriteToExecuteMemory         = 2 /*0x2*/,
    ProcessTerminateAttachedWriteToExecuteMemory = 3 /*0x3*/,
    ProcessTerminateRequestReasonMax             = 4 /*0x4*/
}PROCESS_TERMINATE_REQUEST_REASON, *PPROCESS_TERMINATE_REQUEST_REASON;

typedef enum _PROCESS_VA_TYPE  // 4 elements, 0x4 bytes
{
    ProcessVAImage   = 0 /*0x0*/,
    ProcessVASection = 1 /*0x1*/,
    ProcessVAPrivate = 2 /*0x2*/,
    ProcessVAMax     = 3 /*0x3*/
}PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _PROCESSOR_CACHE_TYPE  // 4 elements, 0x4 bytes
{
    CacheUnified     = 0 /*0x0*/,
    CacheInstruction = 1 /*0x1*/,
    CacheData        = 2 /*0x2*/,
    CacheTrace       = 3 /*0x3*/
}PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef enum _PS_ATTRIBUTE_NUM  // 28 elements, 0x4 bytes
{
    PsAttributeParentProcess                = 0 /*0x0*/,
    PsAttributeDebugObject                  = 1 /*0x1*/,
    PsAttributeToken                        = 2 /*0x2*/,
    PsAttributeClientId                     = 3 /*0x3*/,
    PsAttributeTebAddress                   = 4 /*0x4*/,
    PsAttributeImageName                    = 5 /*0x5*/,
    PsAttributeImageInfo                    = 6 /*0x6*/,
    PsAttributeMemoryReserve                = 7 /*0x7*/,
    PsAttributePriorityClass                = 8 /*0x8*/,
    PsAttributeErrorMode                    = 9 /*0x9*/,
    PsAttributeStdHandleInfo                = 10 /*0xA*/,
    PsAttributeHandleList                   = 11 /*0xB*/,
    PsAttributeGroupAffinity                = 12 /*0xC*/,
    PsAttributePreferredNode                = 13 /*0xD*/,
    PsAttributeIdealProcessor               = 14 /*0xE*/,
    PsAttributeUmsThread                    = 15 /*0xF*/,
    PsAttributeMitigationOptions            = 16 /*0x10*/,
    PsAttributeProtectionLevel              = 17 /*0x11*/,
    PsAttributeSecureProcess                = 18 /*0x12*/,
    PsAttributeJobList                      = 19 /*0x13*/,
    PsAttributeChildProcessPolicy           = 20 /*0x14*/,
    PsAttributeAllApplicationPackagesPolicy = 21 /*0x15*/,
    PsAttributeWin32kFilter                 = 22 /*0x16*/,
    PsAttributeSafeOpenPromptOriginClaim    = 23 /*0x17*/,
    PsAttributeBnoIsolation                 = 24 /*0x18*/,
    PsAttributeDesktopAppPolicy             = 25 /*0x19*/,
    PsAttributeChpe                         = 26 /*0x1A*/,
    PsAttributeMax                          = 27 /*0x1B*/
}PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

typedef enum _PS_CREATE_STATE  // 8 elements, 0x4 bytes
{
    PsCreateInitialState        = 0 /*0x0*/,
    PsCreateFailOnFileOpen      = 1 /*0x1*/,
    PsCreateFailOnSectionCreate = 2 /*0x2*/,
    PsCreateFailExeFormat       = 3 /*0x3*/,
    PsCreateFailMachineMismatch = 4 /*0x4*/,
    PsCreateFailExeName         = 5 /*0x5*/,
    PsCreateSuccess             = 6 /*0x6*/,
    PsCreateMaximumStates       = 7 /*0x7*/
}PS_CREATE_STATE, *PPS_CREATE_STATE;

typedef enum _PS_MITIGATION_OPTION  // 32 elements, 0x4 bytes
{
    PS_MITIGATION_OPTION_NX                                  = 0 /*0x0*/,
    PS_MITIGATION_OPTION_SEHOP                               = 1 /*0x1*/,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES               = 2 /*0x2*/,
    PS_MITIGATION_OPTION_HEAP_TERMINATE                      = 3 /*0x3*/,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR                      = 4 /*0x4*/,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR                   = 5 /*0x5*/,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS                = 6 /*0x6*/,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE          = 7 /*0x7*/,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE             = 8 /*0x8*/,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE               = 9 /*0x9*/,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD                  = 10 /*0xA*/,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES        = 11 /*0xB*/,
    PS_MITIGATION_OPTION_FONT_DISABLE                        = 12 /*0xC*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE                = 13 /*0xD*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL             = 14 /*0xE*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32          = 15 /*0xF*/,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD                   = 16 /*0x10*/,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY         = 17 /*0x11*/,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD           = 18 /*0x12*/,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT         = 19 /*0x13*/,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT                      = 20 /*0x14*/,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK                    = 21 /*0x15*/,
    PS_MITIGATION_OPTION_ROP_SIMEXEC                         = 22 /*0x16*/,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER               = 23 /*0x17*/,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS          = 24 /*0x18*/,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION     = 25 /*0x19*/,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER               = 26 /*0x1A*/,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION         = 27 /*0x1B*/,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28 /*0x1C*/,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE    = 29 /*0x1D*/,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30 /*0x1E*/,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS                   = 31 /*0x1F*/
}PS_MITIGATION_OPTION, *PPS_MITIGATION_OPTION;

typedef enum _PS_PROTECTED_SIGNER  // 10 elements, 0x4 bytes
{
    PsProtectedSignerNone         = 0 /*0x0*/,
    PsProtectedSignerAuthenticode = 1 /*0x1*/,
    PsProtectedSignerCodeGen      = 2 /*0x2*/,
    PsProtectedSignerAntimalware  = 3 /*0x3*/,
    PsProtectedSignerLsa          = 4 /*0x4*/,
    PsProtectedSignerWindows      = 5 /*0x5*/,
    PsProtectedSignerWinTcb       = 6 /*0x6*/,
    PsProtectedSignerWinSystem    = 7 /*0x7*/,
    PsProtectedSignerApp          = 8 /*0x8*/,
    PsProtectedSignerMax          = 9 /*0x9*/
}PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef enum _PS_PROTECTED_TYPE  // 4 elements, 0x4 bytes
{
    PsProtectedTypeNone           = 0 /*0x0*/,
    PsProtectedTypeProtectedLight = 1 /*0x1*/,
    PsProtectedTypeProtected      = 2 /*0x2*/,
    PsProtectedTypeMax            = 3 /*0x3*/
}PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE;

typedef enum _PS_RESOURCE_TYPE  // 5 elements, 0x4 bytes
{
    PsResourceNonPagedPool = 0 /*0x0*/,
    PsResourcePagedPool    = 1 /*0x1*/,
    PsResourcePageFile     = 2 /*0x2*/,
    PsResourceWorkingSet   = 3 /*0x3*/,
    PsResourceMax          = 4 /*0x4*/
}PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef enum _PS_STD_HANDLE_STATE  // 4 elements, 0x4 bytes
{
    PsNeverDuplicate     = 0 /*0x0*/,
    PsRequestDuplicate   = 1 /*0x1*/,
    PsAlwaysDuplicate    = 2 /*0x2*/,
    PsMaxStdHandleStates = 3 /*0x3*/
}PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef enum _PS_WAKE_REASON  // 8 elements, 0x4 bytes
{
    PsWakeReasonUser              = 0 /*0x0*/,
    PsWakeReasonExecutionRequired = 1 /*0x1*/,
    PsWakeReasonKernel            = 2 /*0x2*/,
    PsWakeReasonInstrumentation   = 3 /*0x3*/,
    PsWakeReasonPreserveProcess   = 4 /*0x4*/,
    PsWakeReasonActivityReference = 5 /*0x5*/,
    PsWakeReasonWorkOnBehalf      = 6 /*0x6*/,
    PsMaxWakeReasons              = 7 /*0x7*/
}PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef enum _REG_NOTIFY_CLASS  // 61 elements, 0x4 bytes
{
    RegNtDeleteKey                    = 0 /*0x0*/,
    RegNtPreDeleteKey                 = 0 /*0x0*/,
    RegNtSetValueKey                  = 1 /*0x1*/,
    RegNtPreSetValueKey               = 1 /*0x1*/,
    RegNtDeleteValueKey               = 2 /*0x2*/,
    RegNtPreDeleteValueKey            = 2 /*0x2*/,
    RegNtSetInformationKey            = 3 /*0x3*/,
    RegNtPreSetInformationKey         = 3 /*0x3*/,
    RegNtRenameKey                    = 4 /*0x4*/,
    RegNtPreRenameKey                 = 4 /*0x4*/,
    RegNtEnumerateKey                 = 5 /*0x5*/,
    RegNtPreEnumerateKey              = 5 /*0x5*/,
    RegNtEnumerateValueKey            = 6 /*0x6*/,
    RegNtPreEnumerateValueKey         = 6 /*0x6*/,
    RegNtQueryKey                     = 7 /*0x7*/,
    RegNtPreQueryKey                  = 7 /*0x7*/,
    RegNtQueryValueKey                = 8 /*0x8*/,
    RegNtPreQueryValueKey             = 8 /*0x8*/,
    RegNtQueryMultipleValueKey        = 9 /*0x9*/,
    RegNtPreQueryMultipleValueKey     = 9 /*0x9*/,
    RegNtPreCreateKey                 = 10 /*0xA*/,
    RegNtPostCreateKey                = 11 /*0xB*/,
    RegNtPreOpenKey                   = 12 /*0xC*/,
    RegNtPostOpenKey                  = 13 /*0xD*/,
    RegNtKeyHandleClose               = 14 /*0xE*/,
    RegNtPreKeyHandleClose            = 14 /*0xE*/,
    RegNtPostDeleteKey                = 15 /*0xF*/,
    RegNtPostSetValueKey              = 16 /*0x10*/,
    RegNtPostDeleteValueKey           = 17 /*0x11*/,
    RegNtPostSetInformationKey        = 18 /*0x12*/,
    RegNtPostRenameKey                = 19 /*0x13*/,
    RegNtPostEnumerateKey             = 20 /*0x14*/,
    RegNtPostEnumerateValueKey        = 21 /*0x15*/,
    RegNtPostQueryKey                 = 22 /*0x16*/,
    RegNtPostQueryValueKey            = 23 /*0x17*/,
    RegNtPostQueryMultipleValueKey    = 24 /*0x18*/,
    RegNtPostKeyHandleClose           = 25 /*0x19*/,
    RegNtPreCreateKeyEx               = 26 /*0x1A*/,
    RegNtPostCreateKeyEx              = 27 /*0x1B*/,
    RegNtPreOpenKeyEx                 = 28 /*0x1C*/,
    RegNtPostOpenKeyEx                = 29 /*0x1D*/,
    RegNtPreFlushKey                  = 30 /*0x1E*/,
    RegNtPostFlushKey                 = 31 /*0x1F*/,
    RegNtPreLoadKey                   = 32 /*0x20*/,
    RegNtPostLoadKey                  = 33 /*0x21*/,
    RegNtPreUnLoadKey                 = 34 /*0x22*/,
    RegNtPostUnLoadKey                = 35 /*0x23*/,
    RegNtPreQueryKeySecurity          = 36 /*0x24*/,
    RegNtPostQueryKeySecurity         = 37 /*0x25*/,
    RegNtPreSetKeySecurity            = 38 /*0x26*/,
    RegNtPostSetKeySecurity           = 39 /*0x27*/,
    RegNtCallbackObjectContextCleanup = 40 /*0x28*/,
    RegNtPreRestoreKey                = 41 /*0x29*/,
    RegNtPostRestoreKey               = 42 /*0x2A*/,
    RegNtPreSaveKey                   = 43 /*0x2B*/,
    RegNtPostSaveKey                  = 44 /*0x2C*/,
    RegNtPreReplaceKey                = 45 /*0x2D*/,
    RegNtPostReplaceKey               = 46 /*0x2E*/,
    RegNtPreQueryKeyName              = 47 /*0x2F*/,
    RegNtPostQueryKeyName             = 48 /*0x30*/,
    MaxRegNtNotifyClass               = 49 /*0x31*/
}REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _ReplacesCorHdrNumericDefines  // 25 elements, 0x4 bytes
{
    COMIMAGE_FLAGS_ILONLY                      = 1 /*0x1*/,
    COMIMAGE_FLAGS_32BITREQUIRED               = 2 /*0x2*/,
    COMIMAGE_FLAGS_IL_LIBRARY                  = 4 /*0x4*/,
    COMIMAGE_FLAGS_STRONGNAMESIGNED            = 8 /*0x8*/,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT           = 16 /*0x10*/,
    COMIMAGE_FLAGS_TRACKDEBUGDATA              = 65536 /*0x10000*/,
    COMIMAGE_FLAGS_32BITPREFERRED              = 131072 /*0x20000*/,
    COR_VERSION_MAJOR_V2                       = 2 /*0x2*/,
    COR_VERSION_MAJOR                          = 2 /*0x2*/,
    COR_VERSION_MINOR                          = 5 /*0x5*/,
    COR_DELETED_NAME_LENGTH                    = 8 /*0x8*/,
    COR_VTABLEGAP_NAME_LENGTH                  = 8 /*0x8*/,
    NATIVE_TYPE_MAX_CB                         = 1 /*0x1*/,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE       = 255 /*0xFF*/,
    IMAGE_COR_MIH_METHODRVA                    = 1 /*0x1*/,
    IMAGE_COR_MIH_EHRVA                        = 2 /*0x2*/,
    IMAGE_COR_MIH_BASICBLOCK                   = 8 /*0x8*/,
    COR_VTABLE_32BIT                           = 1 /*0x1*/,
    COR_VTABLE_64BIT                           = 2 /*0x2*/,
    COR_VTABLE_FROM_UNMANAGED                  = 4 /*0x4*/,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8 /*0x8*/,
    COR_VTABLE_CALL_MOST_DERIVED               = 16 /*0x10*/,
    IMAGE_COR_EATJ_THUNK_SIZE                  = 32 /*0x20*/,
    MAX_CLASS_NAME                             = 1024 /*0x400*/,
    MAX_PACKAGE_NAME                           = 1024 /*0x400*/
}ReplacesCorHdrNumericDefines, *PReplacesCorHdrNumericDefines;

typedef enum _RTL_GENERIC_COMPARE_RESULTS  // 3 elements, 0x4 bytes
{
    GenericLessThan    = 0 /*0x0*/,
    GenericGreaterThan = 1 /*0x1*/,
    GenericEqual       = 2 /*0x2*/
}RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef enum _RTL_MEMORY_TYPE  // 5 elements, 0x4 bytes
{
    MemoryTypePaged     = 0 /*0x0*/,
    MemoryTypeNonPaged  = 1 /*0x1*/,
    MemoryTypeLargePage = 2 /*0x2*/,
    MemoryTypeHugePage  = 3 /*0x3*/,
    MemoryTypeMax       = 4 /*0x4*/
}RTL_MEMORY_TYPE, *PRTL_MEMORY_TYPE;

typedef enum _RTLP_CSPARSE_BITMAP_STATE  // 3 elements, 0x4 bytes
{
    CommitBitmapInvalid = 0 /*0x0*/,
    UserBitmapInvalid   = 1 /*0x1*/,
    UserBitmapValid     = 2 /*0x2*/
}RTLP_CSPARSE_BITMAP_STATE, *PRTLP_CSPARSE_BITMAP_STATE;

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE  // 4 elements, 0x4 bytes
{
    HeapAddressUser    = 0 /*0x0*/,
    HeapAddressKernel  = 1 /*0x1*/,
    HeapAddressSession = 2 /*0x2*/,
    HeapAddressTypeMax = 3 /*0x3*/
}RTLP_HP_ADDRESS_SPACE_TYPE, *PRTLP_HP_ADDRESS_SPACE_TYPE;

typedef enum _RTLP_HP_ALLOCATOR  // 5 elements, 0x4 bytes
{
    RtlpHpSegmentSm     = 0 /*0x0*/,
    RtlpHpSegmentLg     = 1 /*0x1*/,
    RtlpHpSegmentTypes  = 2 /*0x2*/,
    RtlpHpHugeAllocator = 2 /*0x2*/,
    RtlpHpAllocatorMax  = 3 /*0x3*/
}RTLP_HP_ALLOCATOR, *PRTLP_HP_ALLOCATOR;

typedef enum _RTLP_HP_LOCK_TYPE  // 3 elements, 0x4 bytes
{
    HeapLockPaged    = 0 /*0x0*/,
    HeapLockNonPaged = 1 /*0x1*/,
    HeapLockTypeMax  = 2 /*0x2*/
}RTLP_HP_LOCK_TYPE, *PRTLP_HP_LOCK_TYPE;

typedef enum _RTLP_HP_MEMORY_TYPE  // 5 elements, 0x4 bytes
{
    HeapMemoryPaged     = 0 /*0x0*/,
    HeapMemoryNonPaged  = 1 /*0x1*/,
    HeapMemoryLargePage = 2 /*0x2*/,
    HeapMemoryHugePage  = 3 /*0x3*/,
    HeapMemoryTypeMax   = 4 /*0x4*/
}RTLP_HP_MEMORY_TYPE, *PRTLP_HP_MEMORY_TYPE;

typedef enum _SE_WS_APPX_SIGNATURE_ORIGIN  // 5 elements, 0x4 bytes
{
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0 /*0x0*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN       = 1 /*0x1*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE      = 2 /*0x2*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS       = 3 /*0x3*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE    = 4 /*0x4*/
}SE_WS_APPX_SIGNATURE_ORIGIN, *PSE_WS_APPX_SIGNATURE_ORIGIN;

typedef enum _SECURITY_IMPERSONATION_LEVEL  // 4 elements, 0x4 bytes
{
    SecurityAnonymous      = 0 /*0x0*/,
    SecurityIdentification = 1 /*0x1*/,
    SecurityImpersonation  = 2 /*0x2*/,
    SecurityDelegation     = 3 /*0x3*/
}SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_OPERATION_CODE  // 4 elements, 0x4 bytes
{
    SetSecurityDescriptor    = 0 /*0x0*/,
    QuerySecurityDescriptor  = 1 /*0x1*/,
    DeleteSecurityDescriptor = 2 /*0x2*/,
    AssignSecurityDescriptor = 3 /*0x3*/
}SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef enum _SERVERSILO_STATE  // 5 elements, 0x4 bytes
{
    SERVERSILO_INITING       = 0 /*0x0*/,
    SERVERSILO_STARTED       = 1 /*0x1*/,
    SERVERSILO_SHUTTING_DOWN = 2 /*0x2*/,
    SERVERSILO_TERMINATING   = 3 /*0x3*/,
    SERVERSILO_TERMINATED    = 4 /*0x4*/
}SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef enum _SYSTEM_DLL_TYPE  // 7 elements, 0x4 bytes
{
    PsNativeSystemDll      = 0 /*0x0*/,
    PsWowX86SystemDll      = 1 /*0x1*/,
    PsWowArm32SystemDll    = 2 /*0x2*/,
    PsWowAmd64SystemDll    = 3 /*0x3*/,
    PsWowChpeX86SystemDll  = 4 /*0x4*/,
    PsVsmEnclaveRuntimeDll = 5 /*0x5*/,
    PsSystemDllTotalTypes  = 6 /*0x6*/
}SYSTEM_DLL_TYPE, *PSYSTEM_DLL_TYPE;

typedef enum _SYSTEM_POWER_STATE  // 8 elements, 0x4 bytes
{
    PowerSystemUnspecified = 0 /*0x0*/,
    PowerSystemWorking     = 1 /*0x1*/,
    PowerSystemSleeping1   = 2 /*0x2*/,
    PowerSystemSleeping2   = 3 /*0x3*/,
    PowerSystemSleeping3   = 4 /*0x4*/,
    PowerSystemHibernate   = 5 /*0x5*/,
    PowerSystemShutdown    = 6 /*0x6*/,
    PowerSystemMaximum     = 7 /*0x7*/
}SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _SYSTEM_PROCESS_CLASSIFICATION  // 6 elements, 0x4 bytes
{
    SystemProcessClassificationNormal         = 0 /*0x0*/,
    SystemProcessClassificationSystem         = 1 /*0x1*/,
    SystemProcessClassificationSecureSystem   = 2 /*0x2*/,
    SystemProcessClassificationMemCompression = 3 /*0x3*/,
    SystemProcessClassificationRegistry       = 4 /*0x4*/,
    SystemProcessClassificationMaximum        = 5 /*0x5*/
}SYSTEM_PROCESS_CLASSIFICATION, *PSYSTEM_PROCESS_CLASSIFICATION;

typedef enum _THREAD_WORKLOAD_CLASS  // 3 elements, 0x4 bytes
{
    ThreadWorkloadClassDefault  = 0 /*0x0*/,
    ThreadWorkloadClassGraphics = 1 /*0x1*/,
    MaxThreadWorkloadClass      = 2 /*0x2*/
}THREAD_WORKLOAD_CLASS, *PTHREAD_WORKLOAD_CLASS;

typedef enum _TP_CALLBACK_PRIORITY  // 5 elements, 0x4 bytes
{
    TP_CALLBACK_PRIORITY_HIGH    = 0 /*0x0*/,
    TP_CALLBACK_PRIORITY_NORMAL  = 1 /*0x1*/,
    TP_CALLBACK_PRIORITY_LOW     = 2 /*0x2*/,
    TP_CALLBACK_PRIORITY_INVALID = 3 /*0x3*/,
    TP_CALLBACK_PRIORITY_COUNT   = 3 /*0x3*/
}TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _TRACE_INFORMATION_CLASS  // 18 elements, 0x4 bytes
{
    TraceIdClass                   = 0 /*0x0*/,
    TraceHandleClass               = 1 /*0x1*/,
    TraceEnableFlagsClass          = 2 /*0x2*/,
    TraceEnableLevelClass          = 3 /*0x3*/,
    GlobalLoggerHandleClass        = 4 /*0x4*/,
    EventLoggerHandleClass         = 5 /*0x5*/,
    AllLoggerHandlesClass          = 6 /*0x6*/,
    TraceHandleByNameClass         = 7 /*0x7*/,
    LoggerEventsLostClass          = 8 /*0x8*/,
    TraceSessionSettingsClass      = 9 /*0x9*/,
    LoggerEventsLoggedClass        = 10 /*0xA*/,
    DiskIoNotifyRoutinesClass      = 11 /*0xB*/,
    TraceInformationClassReserved1 = 12 /*0xC*/,
    AllPossibleNotifyRoutinesClass = 12 /*0xC*/,
    FltIoNotifyRoutinesClass       = 13 /*0xD*/,
    TraceInformationClassReserved2 = 14 /*0xE*/,
    WdfNotifyRoutinesClass         = 15 /*0xF*/,
    MaxTraceInformationClass       = 16 /*0x10*/
}TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef enum _USER_ACTIVITY_PRESENCE  // 5 elements, 0x4 bytes
{
    PowerUserPresent    = 0 /*0x0*/,
    PowerUserNotPresent = 1 /*0x1*/,
    PowerUserInactive   = 2 /*0x2*/,
    PowerUserMaximum    = 3 /*0x3*/,
    PowerUserInvalid    = 3 /*0x3*/
}USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef enum _VERIFIER_RULE_CLASS_ID  // 65 elements, 0x4 bytes
{
    VrfSpecialPoolRuleClass             = 0 /*0x0*/,
    VrfForceIrqlRuleClass               = 1 /*0x1*/,
    VrfAllocationFailuresRuleClass      = 2 /*0x2*/,
    VrfTrackingPoolAllocationsRuleClass = 3 /*0x3*/,
    VrfIORuleClass                      = 4 /*0x4*/,
    VrfDeadlockPreventionRuleClass      = 5 /*0x5*/,
    VrfEnhancedIORuleClass              = 6 /*0x6*/,
    VrfDMARuleClass                     = 7 /*0x7*/,
    VrfSecurityRuleClass                = 8 /*0x8*/,
    VrfForcePendingIORequestRuleClass   = 9 /*0x9*/,
    VrfIRPTrackingRuleClass             = 10 /*0xA*/,
    VrfMiscellaneousRuleClass           = 11 /*0xB*/,
    VrfMoreDebuggingRuleClass           = 12 /*0xC*/,
    VrfMDLInvariantStackRuleClass       = 13 /*0xD*/,
    VrfMDLInvariantDriverRuleClass      = 14 /*0xE*/,
    VrfPowerDelayFuzzingRuleClass       = 15 /*0xF*/,
    VrfPortMiniportRuleClass            = 16 /*0x10*/,
    VrfStandardDDIRuleClass             = 17 /*0x11*/,
    VrfAutoFailRuleClass                = 18 /*0x12*/,
    VrfAdditionalDDIRuleClass           = 19 /*0x13*/,
    VrfRuleClassBase                    = 20 /*0x14*/,
    VrfNdisWifiRuleClass                = 21 /*0x15*/,
    VrfDriverLoggingRuleClass           = 22 /*0x16*/,
    VrfSyncDelayFuzzingRuleClass        = 23 /*0x17*/,
    VrfVMSwitchingRuleClass             = 24 /*0x18*/,
    VrfCodeIntegrityRuleClass           = 25 /*0x19*/,
    VrfBelow4GBAllocationRuleClass      = 26 /*0x1A*/,
    VrfProcessorBranchTraceRuleClass    = 27 /*0x1B*/,
    VrfAdvancedMMRuleClass              = 28 /*0x1C*/,
    VrfExtendingXDVTimeLimit            = 29 /*0x1D*/,
    VrfSystemBIOSRuleClass              = 30 /*0x1E*/,
    VrfHardwareRuleClass                = 31 /*0x1F*/,
    VrfStateSepRuleClass                = 32 /*0x20*/,
    VrfWDFRuleClass                     = 33 /*0x21*/,
    VrfMoreIrqlRuleClass                = 34 /*0x22*/,
    ReservedForDVRF35                   = 35 /*0x23*/,
    ReservedForDVRF36                   = 36 /*0x24*/,
    ReservedForDVRF37                   = 37 /*0x25*/,
    ReservedForDVRF38                   = 38 /*0x26*/,
    ReservedForDVRF39                   = 39 /*0x27*/,
    ReservedForDVRF40                   = 40 /*0x28*/,
    ReservedForDVRF41                   = 41 /*0x29*/,
    ReservedForDVRF42                   = 42 /*0x2A*/,
    ReservedForDVRF43                   = 43 /*0x2B*/,
    ReservedForDVRF44                   = 44 /*0x2C*/,
    ReservedForDVRF45                   = 45 /*0x2D*/,
    ReservedForDVRF46                   = 46 /*0x2E*/,
    ReservedForDVRF47                   = 47 /*0x2F*/,
    ReservedForDVRF48                   = 48 /*0x30*/,
    ReservedForDVRF49                   = 49 /*0x31*/,
    ReservedForDVRF50                   = 50 /*0x32*/,
    ReservedForDVRF51                   = 51 /*0x33*/,
    ReservedForDVRF52                   = 52 /*0x34*/,
    ReservedForDVRF53                   = 53 /*0x35*/,
    ReservedForDVRF54                   = 54 /*0x36*/,
    ReservedForDVRF55                   = 55 /*0x37*/,
    ReservedForDVRF56                   = 56 /*0x38*/,
    ReservedForDVRF57                   = 57 /*0x39*/,
    ReservedForDVRF58                   = 58 /*0x3A*/,
    ReservedForDVRF59                   = 59 /*0x3B*/,
    ReservedForDVRF60                   = 60 /*0x3C*/,
    ReservedForDVRF61                   = 61 /*0x3D*/,
    ReservedForDVRF62                   = 62 /*0x3E*/,
    ReservedForDVRF63                   = 63 /*0x3F*/,
    VrfRuleClassSizeMax                 = 64 /*0x40*/
}VERIFIER_RULE_CLASS_ID, *PVERIFIER_RULE_CLASS_ID;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT  // 9 elements, 0x4 bytes
{
    WheaDataFormatIPFSalRecord = 0 /*0x0*/,
    WheaDataFormatXPFMCA       = 1 /*0x1*/,
    WheaDataFormatMemory       = 2 /*0x2*/,
    WheaDataFormatPCIExpress   = 3 /*0x3*/,
    WheaDataFormatNMIPort      = 4 /*0x4*/,
    WheaDataFormatPCIXBus      = 5 /*0x5*/,
    WheaDataFormatPCIXDevice   = 6 /*0x6*/,
    WheaDataFormatGeneric      = 7 /*0x7*/,
    WheaDataFormatMax          = 8 /*0x8*/
}WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _WHEA_ERROR_SEVERITY  // 4 elements, 0x4 bytes
{
    WheaErrSevRecoverable   = 0 /*0x0*/,
    WheaErrSevFatal         = 1 /*0x1*/,
    WheaErrSevCorrected     = 2 /*0x2*/,
    WheaErrSevInformational = 3 /*0x3*/
}WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef enum _WHEA_ERROR_SOURCE_TYPE  // 15 elements, 0x4 bytes
{
    WheaErrSrcTypeMCE          = 0 /*0x0*/,
    WheaErrSrcTypeCMC          = 1 /*0x1*/,
    WheaErrSrcTypeCPE          = 2 /*0x2*/,
    WheaErrSrcTypeNMI          = 3 /*0x3*/,
    WheaErrSrcTypePCIe         = 4 /*0x4*/,
    WheaErrSrcTypeGeneric      = 5 /*0x5*/,
    WheaErrSrcTypeINIT         = 6 /*0x6*/,
    WheaErrSrcTypeBOOT         = 7 /*0x7*/,
    WheaErrSrcTypeSCIGeneric   = 8 /*0x8*/,
    WheaErrSrcTypeIPFMCA       = 9 /*0x9*/,
    WheaErrSrcTypeIPFCMC       = 10 /*0xA*/,
    WheaErrSrcTypeIPFCPE       = 11 /*0xB*/,
    WheaErrSrcTypeGenericV2    = 12 /*0xC*/,
    WheaErrSrcTypeSCIGenericV2 = 13 /*0xD*/,
    WheaErrSrcTypeMax          = 14 /*0xE*/
}WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_TYPE  // 7 elements, 0x4 bytes
{
    WheaErrTypeProcessor  = 0 /*0x0*/,
    WheaErrTypeMemory     = 1 /*0x1*/,
    WheaErrTypePCIExpress = 2 /*0x2*/,
    WheaErrTypeNMI        = 3 /*0x3*/,
    WheaErrTypePCIXBus    = 4 /*0x4*/,
    WheaErrTypePCIXDevice = 5 /*0x5*/,
    WheaErrTypeGeneric    = 6 /*0x6*/
}WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID  // 3 elements, 0x4 bytes
{
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647 /*0x80000001*/,
    WheaEventLogEntryIdWheaInit          = -2147483646 /*0x80000002*/,
    WheaEventLogEntryIdMax               = -2147483645 /*0x80000003*/
}WHEA_EVENT_LOG_ENTRY_ID, *PWHEA_EVENT_LOG_ENTRY_ID;

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE  // 3 elements, 0x4 bytes
{
    WheaEventLogEntryTypeInformational = 0 /*0x0*/,
    WheaEventLogEntryTypeWarning       = 1 /*0x1*/,
    WheaEventLogEntryTypeError         = 2 /*0x2*/
}WHEA_EVENT_LOG_ENTRY_TYPE, *PWHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _WORKING_SET_TYPE  // 11 elements, 0x4 bytes
{
    WorkingSetTypeUser           = 0 /*0x0*/,
    WorkingSetTypeSession        = 1 /*0x1*/,
    WorkingSetTypeSystemTypes    = 2 /*0x2*/,
    WorkingSetTypeSystemCache    = 2 /*0x2*/,
    WorkingSetTypePagedPool      = 3 /*0x3*/,
    WorkingSetTypeSystemViews    = 4 /*0x4*/,
    WorkingSetTypePagableMaximum = 4 /*0x4*/,
    WorkingSetTypeSystemPtes     = 5 /*0x5*/,
    WorkingSetTypeKernelStacks   = 6 /*0x6*/,
    WorkingSetTypeNonPagedPool   = 7 /*0x7*/,
    WorkingSetTypeMaximum        = 8 /*0x8*/
}WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef enum _WOW64_SHARED_INFORMATION  // 10 elements, 0x4 bytes
{
    SharedNtdll32LdrInitializeThunk                  = 0 /*0x0*/,
    SharedNtdll32KiUserExceptionDispatcher           = 1 /*0x1*/,
    SharedNtdll32KiUserApcDispatcher                 = 2 /*0x2*/,
    SharedNtdll32KiUserCallbackDispatcher            = 3 /*0x3*/,
    SharedNtdll32RtlUserThreadStart                  = 4 /*0x4*/,
    SharedNtdll32pQueryProcessDebugInformationRemote = 5 /*0x5*/,
    SharedNtdll32BaseAddress                         = 6 /*0x6*/,
    SharedNtdll32LdrSystemDllInitBlock               = 7 /*0x7*/,
    SharedNtdll32RtlpFreezeTimeBias                  = 8 /*0x8*/,
    Wow64SharedPageEntriesCount                      = 9 /*0x9*/
}WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Information about structure types

typedef struct _ACCESS_REASONS;
typedef struct _ACCESS_STATE;
typedef struct _ACL;
typedef struct _ACTIVATION_CONTEXT;
typedef struct _ACTIVATION_CONTEXT_DATA;
typedef struct _ACTIVATION_CONTEXT_STACK;
typedef struct _ACTIVATION_CONTEXT_STACK32;
typedef struct _ACTIVATION_CONTEXT_STACK64;
typedef struct _ALPC_PROCESS_CONTEXT;
typedef struct _ASSEMBLY_STORAGE_MAP;
typedef struct _AUX_ACCESS_DATA;
typedef struct _BATTERY_REPORTING_SCALE;
typedef struct _CACHE_DESCRIPTOR;
typedef struct _CI_NGEN_PATHS;
typedef struct _CLIENT_ID;
typedef struct _CLIENT_ID32;
typedef struct _CLIENT_ID64;
typedef struct _CM_FULL_RESOURCE_DESCRIPTOR;
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
typedef struct _CM_PARTIAL_RESOURCE_LIST;
typedef struct _CM_RESOURCE_LIST;
typedef struct _COMPRESSED_DATA_INFO;
typedef struct _CONTEXT;
typedef struct _COUNTER_READING;
typedef struct _CURDIR;
typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
typedef struct _DBGK_SILOSTATE;
typedef struct _DBGKP_ERROR_PORT;
typedef struct _DEVICE_CAPABILITIES;
typedef struct _DEVICE_MAP;
typedef struct _DEVICE_OBJECT;
typedef struct _DEVICE_OBJECT_POWER_EXTENSION;
typedef struct _DEVOBJ_EXTENSION;
typedef struct _DISPATCHER_HEADER;
typedef struct _DPH_BLOCK_INFORMATION;
typedef struct _DPH_HEAP_BLOCK;
typedef struct _DPH_HEAP_ROOT;
typedef struct _DRIVER_EXTENSION;
typedef struct _DRIVER_OBJECT;
typedef struct _DYNAMIC_FUNCTION_TABLE;
typedef struct _ECP_LIST;
typedef struct _EJOB;
typedef union _ENERGY_STATE_DURATION;
typedef struct _ENODE;
typedef struct _EPROCESS;
typedef struct _EPROCESS_QUOTA_BLOCK;
typedef struct _EPROCESS_VALUES;
typedef struct _ERESOURCE;
typedef struct _ESERVERSILO_GLOBALS;
typedef struct _ETHREAD;
typedef struct _ETW_BUFFER_CONTEXT;
typedef struct _ETW_SILODRIVERSTATE;
typedef struct _EVENT_DATA_DESCRIPTOR;
typedef struct _EVENT_DESCRIPTOR;
typedef struct _EVENT_HEADER;
typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
typedef struct _EVENT_RECORD;
typedef struct _EWOW64PROCESS;
typedef struct _EX_FAST_REF;
typedef struct _EX_PUSH_LOCK;
typedef struct _EX_RUNDOWN_REF;
typedef struct _EXCEPTION_RECORD;
typedef struct _EXCEPTION_REGISTRATION_RECORD;
typedef struct _EXHANDLE;
typedef struct _EXT_DELETE_PARAMETERS;
typedef struct _EXT_SET_PARAMETERS_V0;
typedef struct _FAKE_HEAP_ENTRY;
typedef struct _FAST_IO_DISPATCH;
typedef struct _FAST_MUTEX;
typedef struct _FILE_BASIC_INFORMATION;
typedef struct _FILE_GET_QUOTA_INFORMATION;
typedef struct _FILE_NETWORK_OPEN_INFORMATION;
typedef struct _FILE_OBJECT;
typedef struct _FILE_STANDARD_INFORMATION;
typedef struct _FILESYSTEM_DISK_COUNTERS;
typedef struct _flags;
typedef struct _FLS_CALLBACK_INFO;
typedef struct _FS_FILTER_CALLBACK_DATA;
typedef struct _FS_FILTER_CALLBACKS;
typedef union _FS_FILTER_PARAMETERS;
typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT;
typedef struct _GDI_TEB_BATCH;
typedef struct _GDI_TEB_BATCH32;
typedef struct _GDI_TEB_BATCH64;
typedef struct _GENERAL_LOOKASIDE;
typedef struct _GENERAL_LOOKASIDE_POOL;
typedef struct _GENERIC_MAPPING;
typedef struct _GROUP_AFFINITY;
typedef struct _GUID;
typedef struct _HANDLE_TABLE;
typedef union _HANDLE_TABLE_ENTRY;
typedef struct _HANDLE_TABLE_ENTRY_INFO;
typedef struct _HANDLE_TABLE_FREE_LIST;
typedef struct _HANDLE_TRACE_DB_ENTRY;
typedef struct _HANDLE_TRACE_DEBUG_INFO;
typedef struct _HEAP;
typedef struct _HEAP_BUCKET;
typedef union _HEAP_BUCKET_COUNTERS;
typedef union _HEAP_BUCKET_RUN_INFO;
typedef struct _HEAP_COUNTERS;
typedef struct _HEAP_DESCRIPTOR_KEY;
typedef struct _HEAP_ENTRY;
typedef struct _HEAP_ENTRY_EXTRA;
typedef struct _HEAP_EXTENDED_ENTRY;
typedef struct _HEAP_FAILURE_INFORMATION;
typedef struct _HEAP_FREE_ENTRY;
typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS;
typedef struct _HEAP_LARGE_ALLOC_DATA;
typedef struct _HEAP_LFH_AFFINITY_SLOT;
typedef struct _HEAP_LFH_BUCKET;
typedef struct _HEAP_LFH_CONTEXT;
typedef struct _HEAP_LFH_FAST_REF;
typedef struct _HEAP_LFH_MEM_POLICIES;
typedef union _HEAP_LFH_ONDEMAND_POINTER;
typedef struct _HEAP_LFH_SUBSEGMENT;
typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE;
typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
typedef struct _HEAP_LFH_SUBSEGMENT_OWNER;
typedef struct _HEAP_LFH_SUBSEGMENT_STAT;
typedef union _HEAP_LFH_SUBSEGMENT_STATS;
typedef struct _HEAP_LFH_UNUSED_BYTES_INFO;
typedef struct _HEAP_LIST_LOOKUP;
typedef struct _HEAP_LOCAL_DATA;
typedef struct _HEAP_LOCAL_SEGMENT_INFO;
typedef struct _HEAP_LOCK;
typedef struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;
typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR;
typedef union _HEAP_PAGE_SEGMENT;
typedef struct _HEAP_PSEUDO_TAG_ENTRY;
typedef struct _HEAP_RUNTIME_MEMORY_STATS;
typedef struct _HEAP_SEG_CONTEXT;
typedef struct _HEAP_SEGMENT;
typedef union _HEAP_SEGMENT_MGR_COMMIT_STATE;
typedef struct _HEAP_SUBALLOCATOR_CALLBACKS;
typedef struct _HEAP_SUBSEGMENT;
typedef struct _HEAP_TAG_ENTRY;
typedef struct _HEAP_TUNING_PARAMETERS;
typedef struct _HEAP_UCR_DESCRIPTOR;
typedef struct _HEAP_UNPACKED_ENTRY;
typedef struct _HEAP_USERDATA_HEADER;
typedef struct _HEAP_USERDATA_OFFSETS;
typedef struct _HEAP_VAMGR_ALLOCATOR;
typedef struct _HEAP_VAMGR_CTX;
typedef struct _HEAP_VAMGR_RANGE;
typedef struct _HEAP_VAMGR_VASPACE;
typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY;
typedef struct _HEAP_VS_CHUNK_FREE_HEADER;
typedef struct _HEAP_VS_CHUNK_HEADER;
typedef union _HEAP_VS_CHUNK_HEADER_SIZE;
typedef struct _HEAP_VS_CONTEXT;
typedef struct _HEAP_VS_SUBSEGMENT;
typedef struct _HEAP_VS_UNUSED_BYTES_INFO;
typedef struct _IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_DOS_HEADER;
typedef struct _IMAGE_FILE_HEADER;
typedef struct _IMAGE_NT_HEADERS64;
typedef struct _IMAGE_OPTIONAL_HEADER64;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _INITIAL_PRIVILEGE_SET;
typedef struct _INTERFACE;
typedef struct _INTERLOCK_SEQ;
typedef struct _INVERTED_FUNCTION_TABLE;
typedef struct _INVERTED_FUNCTION_TABLE_ENTRY;
typedef union _INVPCID_DESCRIPTOR;
typedef struct _IO_CLIENT_EXTENSION;
typedef struct _IO_COMPLETION_CONTEXT;
typedef struct _IO_DRIVER_CREATE_CONTEXT;
typedef struct _IO_MINI_COMPLETION_PACKET_USER;
typedef struct _IO_PRIORITY_INFO;
typedef struct _IO_RESOURCE_DESCRIPTOR;
typedef struct _IO_RESOURCE_LIST;
typedef struct _IO_RESOURCE_REQUIREMENTS_LIST;
typedef struct _IO_SECURITY_CONTEXT;
typedef struct _IO_STACK_LOCATION;
typedef struct _IO_STATUS_BLOCK;
typedef struct _IO_TIMER;
typedef struct _IOP_IRP_STACK_PROFILER;
typedef struct _IRP;
typedef struct _JOB_ACCESS_STATE;
typedef struct _JOB_CPU_RATE_CONTROL;
typedef struct _JOB_NET_RATE_CONTROL;
typedef struct _JOB_NOTIFICATION_INFORMATION;
typedef struct _JOB_RATE_CONTROL_HEADER;
typedef union _JOBOBJECT_ENERGY_TRACKING_STATE;
typedef struct _JOBOBJECT_WAKE_FILTER;
typedef struct _KAFFINITY_EX;
typedef struct _KAPC;
typedef struct _KAPC_STATE;
typedef struct _KDESCRIPTOR;
typedef struct _KDEVICE_QUEUE;
typedef struct _KDEVICE_QUEUE_ENTRY;
typedef struct _KDPC;
typedef struct _KDPC_DATA;
typedef struct _KDPC_LIST;
typedef struct _KENTROPY_TIMING_STATE;
typedef struct _KERNEL_STACK_SEGMENT;
typedef struct _KEVENT;
typedef struct _KEXCEPTION_FRAME;
typedef union _KEXECUTE_OPTIONS;
typedef struct _KFLOATING_SAVE;
typedef struct _KGATE;
typedef union _KGDTENTRY64;
typedef struct _KHETERO_PROCESSOR_SET;
typedef union _KIDTENTRY64;
typedef struct _KLOCK_ENTRY;
typedef union _KLOCK_ENTRY_BOOST_BITMAP;
typedef struct _KLOCK_ENTRY_LOCK_STATE;
typedef struct _KLOCK_QUEUE_HANDLE;
typedef struct _KNODE;
typedef struct _KPCR;
typedef struct _KPRCB;
typedef union _KPRCBFLAG;
typedef struct _KPROCESS;
typedef struct _KPROCESSOR_STATE;
typedef struct _KQUEUE;
typedef struct _KREQUEST_PACKET;
typedef struct _KSCB;
typedef struct _KSCHEDULING_GROUP;
typedef struct _KSCHEDULING_GROUP_POLICY;
typedef struct _KSECURE_FAULT_INFORMATION;
typedef struct _KSEMAPHORE;
typedef struct _KSHARED_READY_QUEUE;
typedef struct _KSPECIAL_REGISTERS;
typedef struct _KSPIN_LOCK_QUEUE;
typedef struct _KSTACK_CONTROL;
typedef union _KSTACK_COUNT;
typedef struct _KSYSTEM_TIME;
typedef struct _KTHREAD;
typedef struct _KTHREAD_COUNTERS;
typedef struct _KTIMER;
typedef struct _KTIMER_EXPIRATION_TRACE;
typedef struct _KTIMER_TABLE;
typedef struct _KTIMER_TABLE_ENTRY;
typedef struct _KTRAP_FRAME;
typedef struct _KTSS64;
typedef struct _KUMS_CONTEXT_HEADER;
typedef struct _KUSER_SHARED_DATA;
typedef struct _KWAIT_BLOCK;
typedef union _KWAIT_STATUS_REGISTER;
typedef union _LARGE_INTEGER;
typedef struct _LDR_DATA_TABLE_ENTRY;
typedef struct _LDR_DDAG_NODE;
typedef struct _LDR_SERVICE_TAG_RECORD;
typedef struct _LDRP_CSLIST;
typedef struct _LDRP_LOAD_CONTEXT;
typedef struct _LEAP_SECOND_DATA;
typedef struct _LFH_BLOCK_ZONE;
typedef struct _LFH_HEAP;
typedef union _LFH_RANDOM_DATA;
typedef struct _LIST_ENTRY;
typedef struct _LIST_ENTRY32;
typedef struct _LIST_ENTRY64;
typedef struct _LOOKASIDE_LIST_EX;
typedef struct _LUID;
typedef struct _LUID_AND_ATTRIBUTES;
typedef struct _M128A;
typedef struct _MACHINE_CHECK_CONTEXT;
typedef struct _MACHINE_FRAME;
typedef struct _MAILSLOT_CREATE_PARAMETERS;
typedef struct _MCA_EXCEPTION;
typedef union _MCI_ADDR;
typedef union _MCI_STATS;
typedef struct _MCUPDATE_INFO;
typedef struct _MDL;
typedef struct _MM_DRIVER_VERIFIER_DATA;
typedef struct _MM_PAGE_ACCESS_INFO;
typedef union _MM_PAGE_ACCESS_INFO_FLAGS;
typedef struct _MM_PAGE_ACCESS_INFO_HEADER;
typedef struct _MM_SESSION_SPACE;
typedef struct _MMSUPPORT_FLAGS;
typedef struct _MMSUPPORT_FULL;
typedef struct _MMSUPPORT_INSTANCE;
typedef struct _MMSUPPORT_SHARED;
typedef struct _MMWSL_INSTANCE;
typedef struct _NAMED_PIPE_CREATE_PARAMETERS;
typedef struct _NPAGED_LOOKASIDE_LIST;
typedef struct _NT_TIB;
typedef struct _NT_TIB32;
typedef struct _NT_TIB64;
typedef struct _OB_EXTENDED_PARSE_PARAMETERS;
typedef struct _OBJECT_DIRECTORY;
typedef struct _OBJECT_DIRECTORY_ENTRY;
typedef struct _OBJECT_DUMP_CONTROL;
typedef struct _OBJECT_HANDLE_INFORMATION;
typedef struct _OBJECT_NAME_INFORMATION;
typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE;
typedef struct _OBJECT_TYPE;
typedef struct _OBJECT_TYPE_INITIALIZER;
typedef struct _OBP_SILODRIVERSTATE;
typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE;
typedef struct _OWNER_ENTRY;
typedef struct _PAGED_LOOKASIDE_LIST;
typedef struct _PAGEFAULT_HISTORY;
typedef struct _PEB;
typedef struct _PEB_LDR_DATA;
typedef struct _PEB32;
typedef struct _PEBS_DS_SAVE_AREA;
typedef struct _PERF_CONTROL_STATE_SELECTION;
typedef struct _PERFINFO_GROUPMASK;
typedef struct _PERFINFO_PPM_STATE_SELECTION;
typedef struct _PF_KERNEL_GLOBALS;
typedef struct _PO_DIAG_STACK_RECORD;
typedef struct _PO_PROCESS_ENERGY_CONTEXT;
typedef struct _POP_FX_DEVICE;
typedef struct _POWER_SEQUENCE;
typedef union _POWER_STATE;
typedef struct _PP_LOOKASIDE_LIST;
typedef struct _PPM_CONCURRENCY_ACCOUNTING;
typedef struct _PPM_COORDINATED_SELECTION;
typedef struct _PPM_FFH_THROTTLE_STATE_INFO;
typedef struct _PPM_IDLE_STATE;
typedef struct _PPM_IDLE_STATES;
typedef union _PPM_IDLE_SYNCHRONIZATION_STATE;
typedef struct _PPM_SELECTION_DEPENDENCY;
typedef struct _PPM_SELECTION_MENU;
typedef struct _PPM_SELECTION_MENU_ENTRY;
typedef struct _PPM_SELECTION_STATISTICS;
typedef struct _PPM_VETO_ACCOUNTING;
typedef struct _PPM_VETO_ENTRY;
typedef struct _PRIVILEGE_SET;
typedef struct _PROC_FEEDBACK;
typedef struct _PROC_FEEDBACK_COUNTER;
typedef struct _PROC_IDLE_ACCOUNTING;
typedef struct _PROC_IDLE_POLICY;
typedef struct _PROC_IDLE_SNAP;
typedef struct _PROC_IDLE_STATE_ACCOUNTING;
typedef struct _PROC_IDLE_STATE_BUCKET;
typedef struct _PROC_PERF_CHECK;
typedef struct _PROC_PERF_CHECK_SNAP;
typedef struct _PROC_PERF_CONSTRAINT;
typedef struct _PROC_PERF_DOMAIN;
typedef struct _PROC_PERF_HISTORY;
typedef struct _PROC_PERF_HISTORY_ENTRY;
typedef struct _PROC_PERF_LOAD;
typedef struct _PROC_PERF_QOS_CLASS_POLICY;
typedef struct _PROCESS_DISK_COUNTERS;
typedef struct _PROCESS_ENERGY_VALUES;
typedef struct _PROCESS_ENERGY_VALUES_EXTENSION;
typedef struct _PROCESS_EXTENDED_ENERGY_VALUES;
typedef struct _PROCESSOR_IDLE_CONSTRAINTS;
typedef struct _PROCESSOR_IDLE_DEPENDENCY;
typedef struct _PROCESSOR_IDLE_PREPARE_INFO;
typedef struct _PROCESSOR_NUMBER;
typedef struct _PROCESSOR_POWER_STATE;
typedef struct _PROCESSOR_PROFILE_CONTROL_AREA;
typedef union _PS_CLIENT_SECURITY_CONTEXT;
typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES;
typedef struct _PS_IO_CONTROL_ENTRY;
typedef struct _PS_JOB_WAKE_INFORMATION;
typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef struct _PS_MITIGATION_OPTIONS_MAP;
typedef struct _PS_PROCESS_WAKE_INFORMATION;
typedef struct _PS_PROPERTY_SET;
typedef struct _PS_PROTECTION;
typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA;
typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
typedef struct _PS_TRUSTLET_TKSESSION_ID;
typedef struct _PSP_STORAGE;
typedef struct _QUAD;
typedef struct _REQUEST_MAILBOX;
typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef struct _RTL_AVL_TABLE;
typedef struct _RTL_AVL_TREE;
typedef struct _RTL_BALANCED_LINKS;
typedef struct _RTL_BALANCED_NODE;
typedef struct _RTL_BITMAP;
typedef struct _RTL_BITMAP_EX;
typedef struct _RTL_CHASH_ENTRY;
typedef struct _RTL_CHASH_TABLE;
typedef struct _RTL_CRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_CSPARSE_BITMAP;
typedef struct _RTL_DRIVE_LETTER_CURDIR;
typedef struct _RTL_DYNAMIC_HASH_TABLE;
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _RTL_HASH_ENTRY;
typedef struct _RTL_HASH_TABLE;
typedef struct _RTL_HASH_TABLE_ITERATOR;
typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA;
typedef struct _RTL_HP_ENV_HANDLE;
typedef struct _RTL_HP_LFH_CONFIG;
typedef struct _RTL_HP_SEG_ALLOC_POLICY;
typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS;
typedef struct _RTL_HP_VS_CONFIG;
typedef struct _RTL_RB_TREE;
typedef union _RTL_RUN_ONCE;
typedef struct _RTL_SPARSE_ARRAY;
typedef struct _RTL_SPLAY_LINKS;
typedef struct _RTL_SRWLOCK;
typedef struct _RTL_STACK_DATABASE_LOCK;
typedef struct _RTL_STACK_TRACE_ENTRY;
typedef struct _RTL_STACKDB_CONTEXT;
typedef struct _RTL_STD_LIST_ENTRY;
typedef struct _RTL_STD_LIST_HEAD;
typedef struct _RTL_TRACE_BLOCK;
typedef struct _RTL_TRACE_DATABASE;
typedef struct _RTL_TRACE_SEGMENT;
typedef struct _RTL_UMS_CONTEXT;
typedef struct _RTL_USER_PROCESS_PARAMETERS;
typedef struct _RTLP_HP_ALLOC_TRACKER;
typedef struct _RTLP_HP_HEAP_GLOBALS;
typedef struct _RTLP_HP_HEAP_MANAGER;
typedef union _RTLP_HP_LFH_PERF_FLAGS;
typedef struct _RTLP_HP_METADATA_HEAP_CTX;
typedef struct _RTLP_HP_PADDING_HEADER;
typedef struct _SCSI_REQUEST_BLOCK;
typedef struct _SE_AUDIT_PROCESS_CREATION_INFO;
typedef struct _SECTION_OBJECT_POINTERS;
typedef struct _SECURITY_DESCRIPTOR;
typedef struct _SECURITY_QUALITY_OF_SERVICE;
typedef struct _SECURITY_SUBJECT_CONTEXT;
typedef struct _SEGMENT_HEAP;
typedef struct _SEGMENT_HEAP_EXTRA;
typedef struct _SEP_LOGON_SESSION_REFERENCES;
typedef struct _SEP_RM_LSA_CONNECTION_STATE;
typedef struct _SEP_SILOSTATE;
typedef struct _SID;
typedef struct _SID_IDENTIFIER_AUTHORITY;
typedef struct _SILO_USER_SHARED_DATA;
typedef struct _SINGLE_LIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY32;
typedef struct _SLIST_ENTRY;
typedef union _SLIST_HEADER;
typedef struct _STACK_TRACE_DATABASE;
typedef struct _STRING;
typedef struct _STRING32;
typedef struct _STRING64;
typedef struct _SYNCH_COUNTERS;
typedef struct _SYSTEM_POWER_CAPABILITIES;
typedef struct _SYSTEM_POWER_STATE_CONTEXT;
typedef struct _TEB;
typedef struct _TEB_ACTIVE_FRAME;
typedef struct _TEB_ACTIVE_FRAME_CONTEXT;
typedef struct _TEB32;
typedef struct _TEB64;
typedef struct _TERMINATION_PORT;
typedef struct _THREAD_ENERGY_VALUES;
typedef struct _THREAD_PERFORMANCE_DATA;
typedef union _TIMELINE_BITMAP;
typedef struct _TP_CALLBACK_ENVIRON_V3;
typedef struct _TP_CALLBACK_INSTANCE;
typedef struct _TP_CLEANUP_GROUP;
typedef struct _TP_POOL;
typedef struct _TRUSTLET_COLLABORATION_ID;
typedef struct _TRUSTLET_MAILBOX_KEY;
typedef struct _TXN_PARAMETER_BLOCK;
typedef union _ULARGE_INTEGER;
typedef struct _UMS_CONTROL_BLOCK;
typedef struct _UNICODE_STRING;
typedef struct _USER_MEMORY_CACHE_ENTRY;
typedef struct _VPB;
typedef struct _WAIT_CONTEXT_BLOCK;
typedef union _WHEA_ERROR_PACKET_FLAGS;
typedef struct _WHEA_ERROR_PACKET_V2;
typedef struct _WHEA_ERROR_RECORD;
typedef struct _WHEA_ERROR_RECORD_HEADER;
typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS;
typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
typedef struct _WHEA_EVENT_LOG_ENTRY;
typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS;
typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER;
typedef union _WHEA_PERSISTENCE_INFO;
typedef union _WHEA_REVISION;
typedef union _WHEA_TIMESTAMP;
typedef struct _WNF_LOCK;
typedef struct _WNF_SCOPE_MAP;
typedef struct _WNF_SILODRIVERSTATE;
typedef struct _WNF_STATE_NAME;
typedef struct _WORK_QUEUE_ITEM;
typedef struct _XSAVE_AREA;
typedef struct _XSAVE_AREA_HEADER;
typedef struct _XSAVE_FORMAT;
typedef struct _XSTATE_CONFIGURATION;
typedef struct _XSTATE_CONTEXT;
typedef struct _XSTATE_FEATURE;
typedef struct _XSTATE_SAVE;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Function types

typedef VOID (NEAR CDECL FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_Free) (UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_00F6_FinalizationCallback) (UINT64 /*struct _TP_CALLBACK_INSTANCE**/, UINT64 /*VOID**/);
typedef enum _EXCEPTION_DISPOSITION (NEAR CDECL FUNCT_0198_0197_Handler) (UINT64 /*struct _EXCEPTION_RECORD**/, UINT64 /*VOID**/, UINT64 /*struct _CONTEXT**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_02EA_PostProcessInitRoutine) ();
typedef VOID (NEAR CDECL FUNCT_00EF_0672_DeferredRoutine) (UINT64 /*struct _KDPC**/, UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0812_NormalRoutine) (UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0809_KernelRoutine) (UINT64 /*struct _KAPC**/, UINT64 /*FUNCT_00EF_0812_NormalRoutine***/, UINT64 /*VOID***/, UINT64 /*VOID***/, UINT64 /*VOID***/);
typedef VOID (NEAR CDECL FUNCT_00EF_0812_NormalRoutine) (UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0817_RundownRoutine) (UINT64 /*struct _KAPC**/);
typedef UINT64 /*VOID**/ (NEAR CDECL FUNCT_00F2_08E3_AllocateEx) (enum _POOL_TYPE, UINT64, ULONG32, UINT64 /*struct _LOOKASIDE_LIST_EX**/);
typedef UINT64 /*VOID**/ (NEAR CDECL FUNCT_00F2_08ED_Allocate) (enum _POOL_TYPE, UINT64, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_08F2_FreeEx) (UINT64 /*VOID**/, UINT64 /*struct _LOOKASIDE_LIST_EX**/);
typedef VOID (NEAR CDECL FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure) (UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_097A_IdlePrepare) (UINT64 /*struct _PROCESSOR_IDLE_PREPARE_INFO**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_099B_IdlePreExecute) (UINT64 /*VOID**/, ULONG32, ULONG32, ULONG32, UINT64 /*ULONG32**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_09A2_IdleExecute) (UINT64 /*VOID**/, UINT64, ULONG32, ULONG32, ULONG32, ULONG32, UINT64 /*ULONG32**/);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09AB_IdlePreselect) (UINT64 /*VOID**/, UINT64 /*struct _PROCESSOR_IDLE_CONSTRAINTS**/);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09B0_IdleTest) (UINT64 /*VOID**/, ULONG32, ULONG32);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09B5_IdleAvailabilityCheck) (UINT64 /*VOID**/, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_09B9_IdleComplete) (UINT64 /*VOID**/, ULONG32, ULONG32, ULONG32, UINT64 /*ULONG32**/);
typedef VOID (NEAR CDECL FUNCT_00EF_09BB_IdleCancel) (UINT64 /*VOID**/, ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_09BD_IdleIsHalted_IdleInitiateWake) (UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0A56_InstantaneousRead) (UINT64, UINT64 /*ULONG32**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0A5A_DifferentialRead) (UINT64, UINT8, UINT64 /*UINT64**/, UINT64 /*UINT64**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0ADC_GetFFHThrottleState) (UINT64 /*UINT64**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler) (UINT64, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_0AE3_ReinitializeHandler) (UINT64);
typedef ULONG32 (NEAR CDECL FUNCT_0009_0AE6_PerfSelectionHandler) (UINT64, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, UINT64 /*ULONG32**/, UINT64 /*UINT64**/);
typedef VOID (NEAR CDECL FUNCT_00EF_0AF1_PerfControlHandler_DomainPerfControlHandler) (UINT64, UINT64 /*struct _PERF_CONTROL_STATE_SELECTION**/, UINT8, UINT8);
typedef VOID (NEAR CDECL FUNCT_00EF_0BB5_WorkerRoutine) (UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0E38_AddDevice) (UINT64 /*struct _DRIVER_OBJECT**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen) (UINT64 /*struct _FS_FILTER_CALLBACK_DATA**/, UINT64 /*VOID***/);
typedef VOID (NEAR CDECL FUNCT_00EF_0F06_UserApcRoutine) (UINT64 /*VOID**/, UINT64 /*struct _IO_STATUS_BLOCK**/, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_0F0B_DriverStartIo_CancelRoutine) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*struct _IRP**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_11D0_CompletionRoutine) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*struct _IRP**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen) (UINT64 /*struct _FS_FILTER_CALLBACK_DATA**/, LONG32, UINT64 /*VOID**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_11FE_FastIoCheckIfPossible) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, ULONG32, UINT8, ULONG32, UINT8, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1208_FastIoRead_FastIoWrite) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, ULONG32, UINT8, ULONG32, UINT64 /*VOID**/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1212_FastIoQueryBasicInfo) (UINT64 /*struct _FILE_OBJECT**/, UINT8, UINT64 /*struct _FILE_BASIC_INFORMATION**/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1220_FastIoQueryStandardInfo) (UINT64 /*struct _FILE_OBJECT**/, UINT8, UINT64 /*struct _FILE_STANDARD_INFORMATION**/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_122E_FastIoLock) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*struct _EPROCESS**/, ULONG32, UINT8, UINT8, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1239_FastIoUnlockSingle) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*struct _EPROCESS**/, ULONG32, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1242_FastIoUnlockAll) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*struct _EPROCESS**/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1248_FastIoUnlockAllByKey) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*VOID**/, ULONG32, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_124F_FastIoDeviceControl) (UINT64 /*struct _FILE_OBJECT**/, UINT8, UINT64 /*VOID**/, ULONG32, UINT64 /*VOID**/, ULONG32, ULONG32, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef VOID (NEAR CDECL FUNCT_00EF_125A_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection) (UINT64 /*struct _FILE_OBJECT**/);
typedef VOID (NEAR CDECL FUNCT_00EF_125D_FastIoDetachDevice) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1261_FastIoQueryNetworkOpenInfo) (UINT64 /*struct _FILE_OBJECT**/, UINT8, UINT64 /*struct _FILE_NETWORK_OPEN_INFORMATION**/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1271_AcquireForModWrite) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*struct _ERESOURCE***/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1277_MdlRead_PrepareMdlWrite) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, ULONG32, ULONG32, UINT64 /*struct _MDL***/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1281_MdlReadComplete_MdlReadCompleteCompressed) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*struct _MDL**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1286_MdlWriteComplete_MdlWriteCompleteCompressed) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, UINT64 /*struct _MDL**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_128C_FastIoReadCompressed_FastIoWriteCompressed) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*union _LARGE_INTEGER**/, ULONG32, ULONG32, UINT64 /*VOID**/, UINT64 /*struct _MDL***/, UINT64 /*struct _IO_STATUS_BLOCK**/, UINT64 /*struct _COMPRESSED_DATA_INFO**/, ULONG32, UINT64 /*struct _DEVICE_OBJECT**/);
typedef UINT8 (NEAR CDECL FUNCT_00A9_12A1_FastIoQueryOpen) (UINT64 /*struct _IRP**/, UINT64 /*struct _FILE_NETWORK_OPEN_INFORMATION**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12A6_ReleaseForModWrite) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*struct _ERESOURCE**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12AB_AcquireForCcFlush_ReleaseForCcFlush) (UINT64 /*struct _FILE_OBJECT**/, UINT64 /*struct _DEVICE_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12AF_DriverInit) (UINT64 /*struct _DRIVER_OBJECT**/, UINT64 /*struct _UNICODE_STRING**/);
typedef VOID (NEAR CDECL FUNCT_00EF_12B3_DriverUnload) (UINT64 /*struct _DRIVER_OBJECT**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12B7_MajorFunction) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*struct _IRP**/);
typedef VOID (NEAR CDECL FUNCT_00EF_12C1_TimerRoutine) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*VOID**/);
typedef enum _IO_ALLOCATION_ACTION (NEAR CDECL FUNCT_12D8_12D7_DeviceRoutine) (UINT64 /*struct _DEVICE_OBJECT**/, UINT64 /*struct _IRP**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_13C2_MiniPacketCallback) (UINT64 /*struct _IO_MINI_COMPLETION_PACKET_USER**/, UINT64 /*VOID**/);
typedef UINT64 /*struct _IMAGE_RUNTIME_FUNCTION_ENTRY**/ (NEAR CDECL FUNCT_1507_151C_Callback) (UINT64, UINT64 /*VOID**/);
typedef VOID (NEAR CDECL FUNCT_00EF_15EA_DumpProcedure) (UINT64 /*VOID**/, UINT64 /*struct _OBJECT_DUMP_CONTROL**/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_15F2_OpenProcedure) (enum _OB_OPEN_REASON, CHAR, UINT64 /*struct _EPROCESS**/, UINT64 /*VOID**/, UINT64 /*ULONG32**/, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_1600_CloseProcedure) (UINT64 /*struct _EPROCESS**/, UINT64 /*VOID**/, UINT64, UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1606_ParseProcedure) (UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*struct _ACCESS_STATE**/, CHAR, ULONG32, UINT64 /*struct _UNICODE_STRING**/, UINT64 /*struct _UNICODE_STRING**/, UINT64 /*VOID**/, UINT64 /*struct _SECURITY_QUALITY_OF_SERVICE**/, UINT64 /*VOID***/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1612_ParseProcedureEx) (UINT64 /*VOID**/, UINT64 /*VOID**/, UINT64 /*struct _ACCESS_STATE**/, CHAR, ULONG32, UINT64 /*struct _UNICODE_STRING**/, UINT64 /*struct _UNICODE_STRING**/, UINT64 /*VOID**/, UINT64 /*struct _SECURITY_QUALITY_OF_SERVICE**/, UINT64 /*struct _OB_EXTENDED_PARSE_PARAMETERS**/, UINT64 /*VOID***/);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1624_SecurityProcedure) (UINT64 /*VOID**/, enum _SECURITY_OPERATION_CODE, UINT64 /*ULONG32**/, UINT64 /*VOID**/, UINT64 /*ULONG32**/, UINT64 /*VOID***/, enum _POOL_TYPE, UINT64 /*struct _GENERIC_MAPPING**/, CHAR);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1635_QueryNameProcedure) (UINT64 /*VOID**/, UINT8, UINT64 /*struct _OBJECT_NAME_INFORMATION**/, ULONG32, UINT64 /*ULONG32**/, CHAR);
typedef UINT8 (NEAR CDECL FUNCT_00A9_163D_OkayToCloseProcedure) (UINT64 /*struct _EPROCESS**/, UINT64 /*VOID**/, UINT64 /*VOID**/, CHAR);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1969_CommitRoutine) (UINT64 /*VOID**/, UINT64 /*VOID***/, UINT64 /*UINT64**/);
typedef UINT64 /*VOID**/ (NEAR CDECL FUNCT_00F2_1AC9_Allocate) (UINT64, UINT64 /*VOID**/);
typedef ULONG32 (NEAR CDECL FUNCT_0009_1D6C_HashFunction) (ULONG32, UINT64 /*VOID***/);
typedef enum _RTL_GENERIC_COMPARE_RESULTS (NEAR CDECL FUNCT_2002_2001_CompareRoutine) (UINT64 /*struct _RTL_AVL_TABLE**/, UINT64 /*VOID**/, UINT64 /*VOID**/);
typedef UINT64 /*VOID**/ (NEAR CDECL FUNCT_00F2_200B_AllocateRoutine) (UINT64 /*struct _RTL_AVL_TABLE**/, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_200F_FreeRoutine) (UINT64 /*struct _RTL_AVL_TABLE**/, UINT64 /*VOID**/);

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Structure types

          typedef struct _ACCESS_REASONS // 1 elements, 0x80 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      Data[32];                                        
          }ACCESS_REASONS, *PACCESS_REASONS;                                   
                                                                            
          typedef struct _LUID       // 2 elements, 0x8 bytes (sizeof) 
          {                                                            
/*0x000*/     ULONG32      LowPart;                                    
/*0x004*/     LONG32       HighPart;                                   
          }LUID, *PLUID;                                               
                                                                       
          typedef struct _SECURITY_SUBJECT_CONTEXT                   // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT64       ClientToken;                              // VOID*                           
/*0x008*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                    
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                             
/*0x010*/     UINT64       PrimaryToken;                             // VOID*                           
/*0x018*/     UINT64       ProcessAuditId;                           // VOID*                           
          }SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;                                        
                                                                                                        
          typedef struct _LUID_AND_ATTRIBUTES // 2 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _LUID Luid;              // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Attributes;                                          
          }LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;                                  
                                                                                
          typedef struct _INITIAL_PRIVILEGE_SET         // 3 elements, 0x2C bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[3];                                    
          }INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET;                                   
                                                                                           
          typedef struct _PRIVILEGE_SET                 // 3 elements, 0x14 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[1];                                    
          }PRIVILEGE_SET, *PPRIVILEGE_SET;                                                 
                                                                                           
          typedef struct _UNICODE_STRING    // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;          // WCHAR*                          
          }UNICODE_STRING, *PUNICODE_STRING;                                   
                                                                               
          typedef struct _ACCESS_STATE                                 // 16 elements, 0xA0 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _LUID OperationID;                                // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     UINT8        SecurityEvaluated;                                                              
/*0x009*/     UINT8        GenerateAudit;                                                                  
/*0x00A*/     UINT8        GenerateOnClose;                                                                
/*0x00B*/     UINT8        PrivilegesAllocated;                                                            
/*0x00C*/     ULONG32      Flags;                                                                          
/*0x010*/     ULONG32      RemainingDesiredAccess;                                                         
/*0x014*/     ULONG32      PreviouslyGrantedAccess;                                                        
/*0x018*/     ULONG32      OriginalDesiredAccess;                                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x020*/     struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext; // 4 elements, 0x20 bytes (sizeof)  
/*0x040*/     UINT64       SecurityDescriptor;                         // VOID*                            
/*0x048*/     UINT64       AuxData;                                    // VOID*                            
              union                                                    // 2 elements, 0x2C bytes (sizeof)  
              {                                                                                            
/*0x050*/         struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;   // 3 elements, 0x2C bytes (sizeof)  
/*0x050*/         struct _PRIVILEGE_SET PrivilegeSet;                  // 3 elements, 0x14 bytes (sizeof)  
              }Privileges;                                                                                 
/*0x07C*/     UINT8        AuditPrivileges;                                                                
/*0x07D*/     UINT8        _PADDING1_[0x3];                                                                
/*0x080*/     struct _UNICODE_STRING ObjectName;                       // 3 elements, 0x10 bytes (sizeof)  
/*0x090*/     struct _UNICODE_STRING ObjectTypeName;                   // 3 elements, 0x10 bytes (sizeof)  
          }ACCESS_STATE, *PACCESS_STATE;                                                                   
                                                                                                           
          typedef struct _ACL           // 5 elements, 0x8 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT8        AclRevision;                                   
/*0x001*/     UINT8        Sbz1;                                          
/*0x002*/     UINT16       AclSize;                                       
/*0x004*/     UINT16       AceCount;                                      
/*0x006*/     UINT16       Sbz2;                                          
          }ACL, *PACL;                                                    
                                                                          
typedef struct _ACTIVATION_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}ACTIVATION_CONTEXT, *PACTIVATION_CONTEXT;                                  
                                                                     
typedef struct _ACTIVATION_CONTEXT_DATA // 0 elements, 0x0 bytes (sizeof) 
{                                                                         
}ACTIVATION_CONTEXT_DATA, *PACTIVATION_CONTEXT_DATA;                                  
                                                                          
          typedef struct _LIST_ENTRY // 2 elements, 0x10 bytes (sizeof) 
          {                                                             
/*0x000*/     UINT64       Flink;    // struct _LIST_ENTRY*             
/*0x008*/     UINT64       Blink;    // struct _LIST_ENTRY*             
          }LIST_ENTRY, *PLIST_ENTRY;                                    
                                                                        
          typedef struct _ACTIVATION_CONTEXT_STACK   // 5 elements, 0x28 bytes (sizeof)             
          {                                                                                         
/*0x000*/     UINT64       ActiveFrame;              // struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* 
/*0x008*/     struct _LIST_ENTRY FrameListCache;     // 2 elements, 0x10 bytes (sizeof)             
/*0x018*/     ULONG32      Flags;                                                                   
/*0x01C*/     ULONG32      NextCookieSequenceNumber;                                                
/*0x020*/     ULONG32      StackId;                                                                 
/*0x024*/     UINT8        _PADDING0_[0x4];                                                         
          }ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK;                                               
                                                                                                    
          typedef struct _LIST_ENTRY32 // 2 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Flink;                                        
/*0x004*/     ULONG32      Blink;                                        
          }LIST_ENTRY32, *PLIST_ENTRY32;                                  
                                                                         
          typedef struct _ACTIVATION_CONTEXT_STACK32 // 5 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      ActiveFrame;                                                 
/*0x004*/     struct _LIST_ENTRY32 FrameListCache;   // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     ULONG32      Flags;                                                       
/*0x010*/     ULONG32      NextCookieSequenceNumber;                                    
/*0x014*/     ULONG32      StackId;                                                     
          }ACTIVATION_CONTEXT_STACK32, *PACTIVATION_CONTEXT_STACK32;                                   
                                                                                        
          typedef struct _LIST_ENTRY64 // 2 elements, 0x10 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT64       Flink;                                         
/*0x008*/     UINT64       Blink;                                         
          }LIST_ENTRY64, *PLIST_ENTRY64;                                   
                                                                          
          typedef struct _ACTIVATION_CONTEXT_STACK64 // 5 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       ActiveFrame;                                                 
/*0x008*/     struct _LIST_ENTRY64 FrameListCache;   // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     ULONG32      Flags;                                                       
/*0x01C*/     ULONG32      NextCookieSequenceNumber;                                    
/*0x020*/     ULONG32      StackId;                                                     
/*0x024*/     UINT8        _PADDING0_[0x4];                                             
          }ACTIVATION_CONTEXT_STACK64, *PACTIVATION_CONTEXT_STACK64;                                   
                                                                                        
          typedef struct _EX_PUSH_LOCK                 // 7 elements, 0x8 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x8 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x8 bytes (sizeof) 
                  {                                                                      
/*0x000*/             UINT64       Locked : 1;         // 0 BitPosition                  
/*0x000*/             UINT64       Waiting : 1;        // 1 BitPosition                  
/*0x000*/             UINT64       Waking : 1;         // 2 BitPosition                  
/*0x000*/             UINT64       MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             UINT64       Shared : 60;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         UINT64       Value;                                                    
/*0x000*/         UINT64       Ptr;                    // VOID*                          
              };                                                                         
          }EX_PUSH_LOCK, *PEX_PUSH_LOCK;                                                 
                                                                                         
          typedef struct _ALPC_PROCESS_CONTEXT  // 3 elements, 0x20 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _EX_PUSH_LOCK Lock;        // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LIST_ENTRY ViewListHead;  // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       PagedPoolQuotaCache;                                    
          }ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT;                                   
                                                                                   
typedef struct _ASSEMBLY_STORAGE_MAP // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}ASSEMBLY_STORAGE_MAP, *PASSEMBLY_STORAGE_MAP;                                  
                                                                       
          typedef struct _GENERIC_MAPPING  // 4 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      GenericRead;                                       
/*0x004*/     ULONG32      GenericWrite;                                      
/*0x008*/     ULONG32      GenericExecute;                                    
/*0x00C*/     ULONG32      GenericAll;                                        
          }GENERIC_MAPPING, *PGENERIC_MAPPING;                                   
                                                                              
          typedef struct _GUID       // 4 elements, 0x10 bytes (sizeof) 
          {                                                             
/*0x000*/     ULONG32      Data1;                                       
/*0x004*/     UINT16       Data2;                                       
/*0x006*/     UINT16       Data3;                                       
/*0x008*/     UINT8        Data4[8];                                    
          }GUID, *PGUID;                                                
                                                                        
          typedef struct _AUX_ACCESS_DATA              // 12 elements, 0xE0 bytes (sizeof)                                         
          {                                                                                                                        
/*0x000*/     UINT64       PrivilegesUsed;             // struct _PRIVILEGE_SET*                                                   
/*0x008*/     struct _GENERIC_MAPPING GenericMapping;  // 4 elements, 0x10 bytes (sizeof)                                          
/*0x018*/     ULONG32      AccessesToAudit;                                                                                        
/*0x01C*/     ULONG32      MaximumAuditMask;                                                                                       
/*0x020*/     struct _GUID TransactionId;              // 4 elements, 0x10 bytes (sizeof)                                          
/*0x030*/     UINT64       NewSecurityDescriptor;      // VOID*                                                                    
/*0x038*/     UINT64       ExistingSecurityDescriptor; // VOID*                                                                    
/*0x040*/     UINT64       ParentSecurityDescriptor;   // VOID*                                                                    
/*0x048*/     UINT64       DeRefSecurityDescriptor;    // FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_Free* 
/*0x050*/     UINT64       SDLock;                     // VOID*                                                                    
/*0x058*/     struct _ACCESS_REASONS AccessReasons;    // 1 elements, 0x80 bytes (sizeof)                                          
/*0x0D8*/     UINT8        GenerateStagingEvents;                                                                                  
/*0x0D9*/     UINT8        _PADDING0_[0x7];                                                                                        
          }AUX_ACCESS_DATA, *PAUX_ACCESS_DATA;                                                                                     
                                                                                                                                   
          typedef struct _BATTERY_REPORTING_SCALE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Granularity;                                             
/*0x004*/     ULONG32      Capacity;                                                
          }BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;                                  
                                                                                    
          typedef struct _CACHE_DESCRIPTOR     // 5 elements, 0xC bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Level;                                                
/*0x001*/     UINT8        Associativity;                                        
/*0x002*/     UINT16       LineSize;                                             
/*0x004*/     ULONG32      Size;                                                 
/*0x008*/     enum _PROCESSOR_CACHE_TYPE Type;                                   
          }CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;                                  
                                                                                 
typedef struct _CI_NGEN_PATHS // 0 elements, 0x0 bytes (sizeof) 
{                                                               
}CI_NGEN_PATHS, *PCI_NGEN_PATHS;                                  
                                                                
          typedef struct _CLIENT_ID       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       UniqueProcess; // VOID*                           
/*0x008*/     UINT64       UniqueThread;  // VOID*                           
          }CLIENT_ID, *PCLIENT_ID;                                           
                                                                             
          typedef struct _CLIENT_ID32     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      UniqueProcess;                                   
/*0x004*/     ULONG32      UniqueThread;                                    
          }CLIENT_ID32, *PCLIENT_ID32;                                      
                                                                            
          typedef struct _CLIENT_ID64     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       UniqueProcess;                                    
/*0x008*/     UINT64       UniqueThread;                                     
          }CLIENT_ID64, *PCLIENT_ID64;                                       
                                                                             
          typedef union _LARGE_INTEGER   // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              }u;                                                          
/*0x000*/     INT64        QuadPart;                                       
          }LARGE_INTEGER, *PLARGE_INTEGER;                                  
                                                                           
          typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR // 4 elements, 0x14 bytes (sizeof)  
          {                                                                                  
/*0x000*/     UINT8        Type;                                                             
/*0x001*/     UINT8        ShareDisposition;                                                 
/*0x002*/     UINT16       Flags;                                                            
              union                                      // 14 elements, 0x10 bytes (sizeof) 
              {                                                                              
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Generic;                                                                  
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Port;                                                                     
                  struct                                 // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                          
/*0x004*/             UINT16       Level;                                                    
/*0x006*/             UINT16       Group;                                                    
/*0x008*/             ULONG32      Vector;                                                   
/*0x00C*/             UINT64       Affinity;                                                 
                  }Interrupt;                                                                
                  struct                                 // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                          
                      union                              // 2 elements, 0x10 bytes (sizeof)  
                      {                                                                      
                          struct                         // 4 elements, 0x10 bytes (sizeof)  
                          {                                                                  
/*0x004*/                     UINT16       Group;                                            
/*0x006*/                     UINT16       MessageCount;                                     
/*0x008*/                     ULONG32      Vector;                                           
/*0x00C*/                     UINT64       Affinity;                                         
                          }Raw;                                                              
                          struct                         // 4 elements, 0x10 bytes (sizeof)  
                          {                                                                  
/*0x004*/                     UINT16       Level;                                            
/*0x006*/                     UINT16       Group;                                            
/*0x008*/                     ULONG32      Vector;                                           
/*0x00C*/                     UINT64       Affinity;                                         
                          }Translated;                                                       
                      };                                                                     
                  }MessageInterrupt;                                                         
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Memory;                                                                   
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Channel;                                                  
/*0x008*/             ULONG32      Port;                                                     
/*0x00C*/             ULONG32      Reserved1;                                                
                  }Dma;                                                                      
                  struct                                 // 6 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Channel;                                                  
/*0x008*/             ULONG32      RequestLine;                                              
/*0x00C*/             UINT8        TransferWidth;                                            
/*0x00D*/             UINT8        Reserved1;                                                
/*0x00E*/             UINT8        Reserved2;                                                
/*0x00F*/             UINT8        Reserved3;                                                
                  }DmaV3;                                                                    
                  struct                                 // 1 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Data[3];                                                  
                  }DevicePrivate;                                                            
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Start;                                                    
/*0x008*/             ULONG32      Length;                                                   
/*0x00C*/             ULONG32      Reserved;                                                 
                  }BusNumber;                                                                
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      DataSize;                                                 
/*0x008*/             ULONG32      Reserved1;                                                
/*0x00C*/             ULONG32      Reserved2;                                                
                  }DeviceSpecificData;                                                       
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length40;                                                 
                  }Memory40;                                                                 
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length48;                                                 
                  }Memory48;                                                                 
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length64;                                                 
                  }Memory64;                                                                 
                  struct                                 // 6 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             UINT8        Class;                                                    
/*0x005*/             UINT8        Type;                                                     
/*0x006*/             UINT8        Reserved1;                                                
/*0x007*/             UINT8        Reserved2;                                                
/*0x008*/             ULONG32      IdLowPart;                                                
/*0x00C*/             ULONG32      IdHighPart;                                               
                  }Connection;                                                               
              }u;                                                                            
          }CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;                                    
                                                                                             
          typedef struct _CM_PARTIAL_RESOURCE_LIST                          // 4 elements, 0x1C bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT16       Version;                                                                            
/*0x002*/     UINT16       Revision;                                                                           
/*0x004*/     ULONG32      Count;                                                                              
/*0x008*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];                                    
          }CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;                                               
                                                                                                               
          typedef struct _CM_FULL_RESOURCE_DESCRIPTOR               // 3 elements, 0x24 bytes (sizeof) 
          {                                                                                            
/*0x000*/     enum _INTERFACE_TYPE InterfaceType;                                                      
/*0x004*/     ULONG32      BusNumber;                                                                  
/*0x008*/     struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList; // 4 elements, 0x1C bytes (sizeof) 
          }CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;                                   
                                                                                                       
          typedef struct _CM_RESOURCE_LIST                 // 2 elements, 0x28 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Count;                                                             
/*0x004*/     struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];                                    
          }CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;                                              
                                                                                              
          typedef struct _COMPRESSED_DATA_INFO         // 7 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT16       CompressionFormatAndEngine;                                   
/*0x002*/     UINT8        CompressionUnitShift;                                         
/*0x003*/     UINT8        ChunkShift;                                                   
/*0x004*/     UINT8        ClusterShift;                                                 
/*0x005*/     UINT8        Reserved;                                                     
/*0x006*/     UINT16       NumberOfChunks;                                               
/*0x008*/     ULONG32      CompressedChunkSizes[1];                                      
          }COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO;                                  
                                                                                         
          typedef struct _M128A  // 2 elements, 0x10 bytes (sizeof) 
          {                                                         
/*0x000*/     UINT64       Low;                                     
/*0x008*/     INT64        High;                                    
          }M128A, *PM128A;                                          
                                                                    
          typedef struct _XSAVE_FORMAT         // 16 elements, 0x200 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       ControlWord;                                             
/*0x002*/     UINT16       StatusWord;                                              
/*0x004*/     UINT8        TagWord;                                                 
/*0x005*/     UINT8        Reserved1;                                               
/*0x006*/     UINT16       ErrorOpcode;                                             
/*0x008*/     ULONG32      ErrorOffset;                                             
/*0x00C*/     UINT16       ErrorSelector;                                           
/*0x00E*/     UINT16       Reserved2;                                               
/*0x010*/     ULONG32      DataOffset;                                              
/*0x014*/     UINT16       DataSelector;                                            
/*0x016*/     UINT16       Reserved3;                                               
/*0x018*/     ULONG32      MxCsr;                                                   
/*0x01C*/     ULONG32      MxCsr_Mask;                                              
/*0x020*/     struct _M128A FloatRegisters[8];                                      
/*0x0A0*/     struct _M128A XmmRegisters[16];                                       
/*0x1A0*/     UINT8        Reserved4[96];                                           
          }XSAVE_FORMAT, *PXSAVE_FORMAT;                                            
                                                                                    
          typedef struct _CONTEXT                    // 64 elements, 0x4D0 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       P1Home;                                                        
/*0x008*/     UINT64       P2Home;                                                        
/*0x010*/     UINT64       P3Home;                                                        
/*0x018*/     UINT64       P4Home;                                                        
/*0x020*/     UINT64       P5Home;                                                        
/*0x028*/     UINT64       P6Home;                                                        
/*0x030*/     ULONG32      ContextFlags;                                                  
/*0x034*/     ULONG32      MxCsr;                                                         
/*0x038*/     UINT16       SegCs;                                                         
/*0x03A*/     UINT16       SegDs;                                                         
/*0x03C*/     UINT16       SegEs;                                                         
/*0x03E*/     UINT16       SegFs;                                                         
/*0x040*/     UINT16       SegGs;                                                         
/*0x042*/     UINT16       SegSs;                                                         
/*0x044*/     ULONG32      EFlags;                                                        
/*0x048*/     UINT64       Dr0;                                                           
/*0x050*/     UINT64       Dr1;                                                           
/*0x058*/     UINT64       Dr2;                                                           
/*0x060*/     UINT64       Dr3;                                                           
/*0x068*/     UINT64       Dr6;                                                           
/*0x070*/     UINT64       Dr7;                                                           
/*0x078*/     UINT64       Rax;                                                           
/*0x080*/     UINT64       Rcx;                                                           
/*0x088*/     UINT64       Rdx;                                                           
/*0x090*/     UINT64       Rbx;                                                           
/*0x098*/     UINT64       Rsp;                                                           
/*0x0A0*/     UINT64       Rbp;                                                           
/*0x0A8*/     UINT64       Rsi;                                                           
/*0x0B0*/     UINT64       Rdi;                                                           
/*0x0B8*/     UINT64       R8;                                                            
/*0x0C0*/     UINT64       R9;                                                            
/*0x0C8*/     UINT64       R10;                                                           
/*0x0D0*/     UINT64       R11;                                                           
/*0x0D8*/     UINT64       R12;                                                           
/*0x0E0*/     UINT64       R13;                                                           
/*0x0E8*/     UINT64       R14;                                                           
/*0x0F0*/     UINT64       R15;                                                           
/*0x0F8*/     UINT64       Rip;                                                           
              union                                  // 2 elements, 0x200 bytes (sizeof)  
              {                                                                           
/*0x100*/         struct _XSAVE_FORMAT FltSave;      // 16 elements, 0x200 bytes (sizeof) 
                  struct                             // 18 elements, 0x200 bytes (sizeof) 
                  {                                                                       
/*0x100*/             struct _M128A Header[2];                                            
/*0x120*/             struct _M128A Legacy[8];                                            
/*0x1A0*/             struct _M128A Xmm0;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1B0*/             struct _M128A Xmm1;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1C0*/             struct _M128A Xmm2;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1D0*/             struct _M128A Xmm3;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1E0*/             struct _M128A Xmm4;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1F0*/             struct _M128A Xmm5;            // 2 elements, 0x10 bytes (sizeof)   
/*0x200*/             struct _M128A Xmm6;            // 2 elements, 0x10 bytes (sizeof)   
/*0x210*/             struct _M128A Xmm7;            // 2 elements, 0x10 bytes (sizeof)   
/*0x220*/             struct _M128A Xmm8;            // 2 elements, 0x10 bytes (sizeof)   
/*0x230*/             struct _M128A Xmm9;            // 2 elements, 0x10 bytes (sizeof)   
/*0x240*/             struct _M128A Xmm10;           // 2 elements, 0x10 bytes (sizeof)   
/*0x250*/             struct _M128A Xmm11;           // 2 elements, 0x10 bytes (sizeof)   
/*0x260*/             struct _M128A Xmm12;           // 2 elements, 0x10 bytes (sizeof)   
/*0x270*/             struct _M128A Xmm13;           // 2 elements, 0x10 bytes (sizeof)   
/*0x280*/             struct _M128A Xmm14;           // 2 elements, 0x10 bytes (sizeof)   
/*0x290*/             struct _M128A Xmm15;           // 2 elements, 0x10 bytes (sizeof)   
/*0x2A0*/             UINT8        _PADDING0_[0x60];                                      
                  };                                                                      
              };                                                                          
/*0x300*/     struct _M128A VectorRegister[26];                                           
/*0x4A0*/     UINT64       VectorControl;                                                 
/*0x4A8*/     UINT64       DebugControl;                                                  
/*0x4B0*/     UINT64       LastBranchToRip;                                               
/*0x4B8*/     UINT64       LastBranchFromRip;                                             
/*0x4C0*/     UINT64       LastExceptionToRip;                                            
/*0x4C8*/     UINT64       LastExceptionFromRip;                                          
          }CONTEXT, *PCONTEXT;                                                            
                                                                                          
          typedef struct _COUNTER_READING       // 4 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     enum _HARDWARE_COUNTER_TYPE Type;                                    
/*0x004*/     ULONG32      Index;                                                  
/*0x008*/     UINT64       Start;                                                  
/*0x010*/     UINT64       Total;                                                  
          }COUNTER_READING, *PCOUNTER_READING;                                     
                                                                                   
          typedef struct _CURDIR              // 2 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _UNICODE_STRING DosPath; // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Handle;            // VOID*                           
          }CURDIR, *PCURDIR;                                                     
                                                                                 
          typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     ULONG32      Size;                                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                                     
/*0x008*/     UINT64       TriggerId;                        // WCHAR*                          
          }CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;                                   
                                                                                                
          typedef struct _DBGK_SILOSTATE             // 4 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _EX_PUSH_LOCK ErrorPortLock;    // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       ErrorPort;                // struct _DBGKP_ERROR_PORT*       
/*0x010*/     UINT64       ErrorProcess;             // struct _EPROCESS*               
/*0x018*/     UINT64       ErrorPortRegisteredEvent; // struct _KEVENT*                 
          }DBGK_SILOSTATE, *PDBGK_SILOSTATE;                                            
                                                                                        
typedef struct _DBGKP_ERROR_PORT // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}DBGKP_ERROR_PORT, *PDBGKP_ERROR_PORT;                                  
                                                                   
          typedef struct _DEVICE_CAPABILITIES               // 34 elements, 0x40 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Size;                                                                
/*0x002*/     UINT16       Version;                                                             
              struct                                        // 24 elements, 0x4 bytes (sizeof)  
              {                                                                                 
/*0x004*/         ULONG32      DeviceD1 : 1;                // 0 BitPosition                    
/*0x004*/         ULONG32      DeviceD2 : 1;                // 1 BitPosition                    
/*0x004*/         ULONG32      LockSupported : 1;           // 2 BitPosition                    
/*0x004*/         ULONG32      EjectSupported : 1;          // 3 BitPosition                    
/*0x004*/         ULONG32      Removable : 1;               // 4 BitPosition                    
/*0x004*/         ULONG32      DockDevice : 1;              // 5 BitPosition                    
/*0x004*/         ULONG32      UniqueID : 1;                // 6 BitPosition                    
/*0x004*/         ULONG32      SilentInstall : 1;           // 7 BitPosition                    
/*0x004*/         ULONG32      RawDeviceOK : 1;             // 8 BitPosition                    
/*0x004*/         ULONG32      SurpriseRemovalOK : 1;       // 9 BitPosition                    
/*0x004*/         ULONG32      WakeFromD0 : 1;              // 10 BitPosition                   
/*0x004*/         ULONG32      WakeFromD1 : 1;              // 11 BitPosition                   
/*0x004*/         ULONG32      WakeFromD2 : 1;              // 12 BitPosition                   
/*0x004*/         ULONG32      WakeFromD3 : 1;              // 13 BitPosition                   
/*0x004*/         ULONG32      HardwareDisabled : 1;        // 14 BitPosition                   
/*0x004*/         ULONG32      NonDynamic : 1;              // 15 BitPosition                   
/*0x004*/         ULONG32      WarmEjectSupported : 1;      // 16 BitPosition                   
/*0x004*/         ULONG32      NoDisplayInUI : 1;           // 17 BitPosition                   
/*0x004*/         ULONG32      Reserved1 : 1;               // 18 BitPosition                   
/*0x004*/         ULONG32      WakeFromInterrupt : 1;       // 19 BitPosition                   
/*0x004*/         ULONG32      SecureDevice : 1;            // 20 BitPosition                   
/*0x004*/         ULONG32      ChildOfVgaEnabledBridge : 1; // 21 BitPosition                   
/*0x004*/         ULONG32      DecodeIoOnBoot : 1;          // 22 BitPosition                   
/*0x004*/         ULONG32      Reserved : 9;                // 23 BitPosition                   
              };                                                                                
/*0x008*/     ULONG32      Address;                                                             
/*0x00C*/     ULONG32      UINumber;                                                            
/*0x010*/     enum _DEVICE_POWER_STATE DeviceState[7];                                          
/*0x02C*/     enum _SYSTEM_POWER_STATE SystemWake;                                              
/*0x030*/     enum _DEVICE_POWER_STATE DeviceWake;                                              
/*0x034*/     ULONG32      D1Latency;                                                           
/*0x038*/     ULONG32      D2Latency;                                                           
/*0x03C*/     ULONG32      D3Latency;                                                           
          }DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES;                                          
                                                                                                
          typedef struct _DEVICE_MAP                  // 7 elements, 0x48 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       DosDevicesDirectory;       // struct _OBJECT_DIRECTORY*       
/*0x008*/     UINT64       GlobalDosDevicesDirectory; // struct _OBJECT_DIRECTORY*       
/*0x010*/     UINT64       DosDevicesDirectoryHandle; // VOID*                           
/*0x018*/     LONG32       ReferenceCount;                                               
/*0x01C*/     ULONG32      DriveMap;                                                     
/*0x020*/     UINT8        DriveType[32];                                                
/*0x040*/     UINT64       ServerSilo;                // struct _EJOB*                   
          }DEVICE_MAP, *PDEVICE_MAP;                                                     
                                                                                         
          typedef struct _KDEVICE_QUEUE_ENTRY     // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY DeviceListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SortKey;                                                  
/*0x014*/     UINT8        Inserted;                                                 
/*0x015*/     UINT8        _PADDING0_[0x3];                                          
          }KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY;                                   
                                                                                     
          typedef struct _WAIT_CONTEXT_BLOCK                    // 14 elements, 0x48 bytes (sizeof) 
          {                                                                                         
              union                                             // 2 elements, 0x18 bytes (sizeof)  
              {                                                                                     
/*0x000*/         struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;   // 3 elements, 0x18 bytes (sizeof)  
                  struct                                        // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                 
/*0x000*/             struct _LIST_ENTRY DmaWaitEntry;          // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/             ULONG32      NumberOfChannels;                                                
                      struct                                    // 5 elements, 0x4 bytes (sizeof)   
                      {                                                                             
/*0x014*/                 ULONG32      SyncCallback : 1;        // 0 BitPosition                    
/*0x014*/                 ULONG32      DmaContext : 1;          // 1 BitPosition                    
/*0x014*/                 ULONG32      ZeroMapRegisters : 1;    // 2 BitPosition                    
/*0x014*/                 ULONG32      Reserved : 9;            // 3 BitPosition                    
/*0x014*/                 ULONG32      NumberOfRemapPages : 20; // 12 BitPosition                   
                      };                                                                            
                  };                                                                                
              };                                                                                    
/*0x018*/     UINT64       DeviceRoutine;                       // FUNCT_12D8_12D7_DeviceRoutine*   
/*0x020*/     UINT64       DeviceContext;                       // VOID*                            
/*0x028*/     ULONG32      NumberOfMapRegisters;                                                    
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                         
/*0x030*/     UINT64       DeviceObject;                        // VOID*                            
/*0x038*/     UINT64       CurrentIrp;                          // VOID*                            
/*0x040*/     UINT64       BufferChainingDpc;                   // struct _KDPC*                    
          }WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;                                                
                                                                                                    
          typedef struct _KDEVICE_QUEUE          // 7 elements, 0x28 bytes (sizeof) 
          {                                                                         
/*0x000*/     INT16        Type;                                                    
/*0x002*/     INT16        Size;                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                         
/*0x008*/     struct _LIST_ENTRY DeviceListHead; // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       Lock;                                                    
              union                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                     
/*0x020*/         UINT8        Busy;                                                
                  struct                         // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                 
/*0x020*/             INT64        Reserved : 8; // 0 BitPosition                   
/*0x020*/             INT64        Hint : 56;    // 8 BitPosition                   
                  };                                                                
              };                                                                    
          }KDEVICE_QUEUE, *PKDEVICE_QUEUE;                                          
                                                                                    
          typedef struct _SINGLE_LIST_ENTRY // 1 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Next;            // struct _SINGLE_LIST_ENTRY*     
          }SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;                                  
                                                                              
          typedef struct _KDPC                        // 11 elements, 0x40 bytes (sizeof) 
          {                                                                               
              union                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                           
/*0x000*/         ULONG32      TargetInfoAsUlong;                                         
                  struct                              // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                       
/*0x000*/             UINT8        Type;                                                  
/*0x001*/             UINT8        Importance;                                            
/*0x002*/             UINT16       Number;                                                
/*0x004*/             UINT8        _PADDING0_[0x4];                                       
                  };                                                                      
              };                                                                          
/*0x008*/     struct _SINGLE_LIST_ENTRY DpcListEntry; // 1 elements, 0x8 bytes (sizeof)   
/*0x010*/     UINT64       ProcessorHistory;                                              
/*0x018*/     UINT64       DeferredRoutine;           // FUNCT_00EF_0672_DeferredRoutine* 
/*0x020*/     UINT64       DeferredContext;           // VOID*                            
/*0x028*/     UINT64       SystemArgument1;           // VOID*                            
/*0x030*/     UINT64       SystemArgument2;           // VOID*                            
/*0x038*/     UINT64       DpcData;                   // VOID*                            
          }KDPC, *PKDPC;                                                                  
                                                                                          
          typedef struct _DISPATCHER_HEADER                                // 58 elements, 0x18 bytes (sizeof) 
          {                                                                                                    
              union                                                        // 8 elements, 0x4 bytes (sizeof)   
              {                                                                                                
/*0x000*/         LONG32       Lock;                                                                           
/*0x000*/         LONG32       LockNV;                                                                         
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Type;                                                                       
/*0x001*/             UINT8        Signalling;                                                                 
/*0x002*/             UINT8        Size;                                                                       
/*0x003*/             UINT8        Reserved1;                                                                  
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        TimerType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        TimerControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Absolute : 1;                   // 0 BitPosition                    
/*0x001*/                     UINT8        Wake : 1;                       // 1 BitPosition                    
/*0x001*/                     UINT8        EncodedTolerableDelay : 6;      // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Hand;                                                                       
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x003*/                 UINT8        TimerMiscFlags;                                                         
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x003*/                     UINT8        Index : 6;                      // 0 BitPosition                    
/*0x003*/                     UINT8        Inserted : 1;                   // 6 BitPosition                    
/*0x003*/                     UINT8        Expired : 1;                    // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Timer2Type;                                                                 
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        Timer2Flags;                                                            
                          struct                                           // 7 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Timer2Inserted : 1;             // 0 BitPosition                    
/*0x001*/                     UINT8        Timer2Expiring : 1;             // 1 BitPosition                    
/*0x001*/                     UINT8        Timer2CancelPending : 1;        // 2 BitPosition                    
/*0x001*/                     UINT8        Timer2SetPending : 1;           // 3 BitPosition                    
/*0x001*/                     UINT8        Timer2Running : 1;              // 4 BitPosition                    
/*0x001*/                     UINT8        Timer2Disabled : 1;             // 5 BitPosition                    
/*0x001*/                     UINT8        Timer2ReservedFlags : 2;        // 6 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Timer2ComponentId;                                                          
/*0x003*/             UINT8        Timer2RelativeId;                                                           
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        QueueType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        QueueControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Abandoned : 1;                  // 0 BitPosition                    
/*0x001*/                     UINT8        DisableIncrement : 1;           // 1 BitPosition                    
/*0x001*/                     UINT8        QueueReservedControlFlags : 6;  // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        QueueSize;                                                                  
/*0x003*/             UINT8        QueueReserved;                                                              
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        ThreadType;                                                                 
/*0x001*/             UINT8        ThreadReserved;                                                             
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x002*/                 UINT8        ThreadControlFlags;                                                     
                          struct                                           // 8 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x002*/                     UINT8        CycleProfiling : 1;             // 0 BitPosition                    
/*0x002*/                     UINT8        CounterProfiling : 1;           // 1 BitPosition                    
/*0x002*/                     UINT8        GroupScheduling : 1;            // 2 BitPosition                    
/*0x002*/                     UINT8        AffinitySet : 1;                // 3 BitPosition                    
/*0x002*/                     UINT8        Tagged : 1;                     // 4 BitPosition                    
/*0x002*/                     UINT8        EnergyProfiling : 1;            // 5 BitPosition                    
/*0x002*/                     UINT8        SchedulerAssist : 1;            // 6 BitPosition                    
/*0x002*/                     UINT8        ThreadReservedControlFlags : 1; // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x003*/                 UINT8        DebugActive;                                                            
                          struct                                           // 6 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x003*/                     UINT8        ActiveDR7 : 1;                  // 0 BitPosition                    
/*0x003*/                     UINT8        Instrumented : 1;               // 1 BitPosition                    
/*0x003*/                     UINT8        Minimal : 1;                    // 2 BitPosition                    
/*0x003*/                     UINT8        Reserved4 : 3;                  // 3 BitPosition                    
/*0x003*/                     UINT8        UmsScheduled : 1;               // 6 BitPosition                    
/*0x003*/                     UINT8        UmsPrimary : 1;                 // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        MutantType;                                                                 
/*0x001*/             UINT8        MutantSize;                                                                 
/*0x002*/             UINT8        DpcActive;                                                                  
/*0x003*/             UINT8        MutantReserved;                                                             
                  };                                                                                           
              };                                                                                               
/*0x004*/     LONG32       SignalState;                                                                        
/*0x008*/     struct _LIST_ENTRY WaitListHead;                             // 2 elements, 0x10 bytes (sizeof)  
          }DISPATCHER_HEADER, *PDISPATCHER_HEADER;                                                             
                                                                                                               
          typedef struct _KEVENT                // 1 elements, 0x18 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
          }KEVENT, *PKEVENT;                                                        
                                                                                    
          typedef struct _DEVICE_OBJECT           // 25 elements, 0x150 bytes (sizeof) 
          {                                                                            
/*0x000*/     INT16        Type;                                                       
/*0x002*/     UINT16       Size;                                                       
/*0x004*/     LONG32       ReferenceCount;                                             
/*0x008*/     UINT64       DriverObject;          // struct _DRIVER_OBJECT*            
/*0x010*/     UINT64       NextDevice;            // struct _DEVICE_OBJECT*            
/*0x018*/     UINT64       AttachedDevice;        // struct _DEVICE_OBJECT*            
/*0x020*/     UINT64       CurrentIrp;            // struct _IRP*                      
/*0x028*/     UINT64       Timer;                 // struct _IO_TIMER*                 
/*0x030*/     ULONG32      Flags;                                                      
/*0x034*/     ULONG32      Characteristics;                                            
/*0x038*/     UINT64       Vpb;                   // struct _VPB*                      
/*0x040*/     UINT64       DeviceExtension;       // VOID*                             
/*0x048*/     ULONG32      DeviceType;                                                 
/*0x04C*/     CHAR         StackSize;                                                  
/*0x04D*/     UINT8        _PADDING0_[0x3];                                            
              union                               // 2 elements, 0x48 bytes (sizeof)   
              {                                                                        
/*0x050*/         struct _LIST_ENTRY ListEntry;   // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/         struct _WAIT_CONTEXT_BLOCK Wcb; // 14 elements, 0x48 bytes (sizeof)  
              }Queue;                                                                  
/*0x098*/     ULONG32      AlignmentRequirement;                                       
/*0x09C*/     UINT8        _PADDING1_[0x4];                                            
/*0x0A0*/     struct _KDEVICE_QUEUE DeviceQueue;  // 7 elements, 0x28 bytes (sizeof)   
/*0x0C8*/     struct _KDPC Dpc;                   // 11 elements, 0x40 bytes (sizeof)  
/*0x108*/     ULONG32      ActiveThreadCount;                                          
/*0x10C*/     UINT8        _PADDING2_[0x4];                                            
/*0x110*/     UINT64       SecurityDescriptor;    // VOID*                             
/*0x118*/     struct _KEVENT DeviceLock;          // 1 elements, 0x18 bytes (sizeof)   
/*0x130*/     UINT16       SectorSize;                                                 
/*0x132*/     UINT16       Spare1;                                                     
/*0x134*/     UINT8        _PADDING3_[0x4];                                            
/*0x138*/     UINT64       DeviceObjectExtension; // struct _DEVOBJ_EXTENSION*         
/*0x140*/     UINT64       Reserved;              // VOID*                             
/*0x148*/     UINT8        _PADDING4_[0x8];                                            
          }DEVICE_OBJECT, *PDEVICE_OBJECT;                                             
                                                                                       
typedef struct _DEVICE_OBJECT_POWER_EXTENSION // 0 elements, 0x0 bytes (sizeof) 
{                                                                               
}DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION;                                  
                                                                                
          typedef struct _DEVOBJ_EXTENSION   // 15 elements, 0x68 bytes (sizeof)       
          {                                                                            
/*0x000*/     INT16        Type;                                                       
/*0x002*/     UINT16       Size;                                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                            
/*0x008*/     UINT64       DeviceObject;     // struct _DEVICE_OBJECT*                 
/*0x010*/     ULONG32      PowerFlags;                                                 
/*0x014*/     UINT8        _PADDING1_[0x4];                                            
/*0x018*/     UINT64       Dope;             // struct _DEVICE_OBJECT_POWER_EXTENSION* 
/*0x020*/     ULONG32      ExtensionFlags;                                             
/*0x024*/     UINT8        _PADDING2_[0x4];                                            
/*0x028*/     UINT64       DeviceNode;       // VOID*                                  
/*0x030*/     UINT64       AttachedTo;       // struct _DEVICE_OBJECT*                 
/*0x038*/     LONG32       StartIoCount;                                               
/*0x03C*/     LONG32       StartIoKey;                                                 
/*0x040*/     ULONG32      StartIoFlags;                                               
/*0x044*/     UINT8        _PADDING3_[0x4];                                            
/*0x048*/     UINT64       Vpb;              // struct _VPB*                           
/*0x050*/     UINT64       DependencyNode;   // VOID*                                  
/*0x058*/     UINT64       InterruptContext; // VOID*                                  
/*0x060*/     UINT64       VerifierContext;  // VOID*                                  
          }DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;                                          
                                                                                       
          typedef struct _SLIST_ENTRY       // 1 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Next;            // struct _SLIST_ENTRY*            
/*0x008*/     UINT8        _PADDING0_[0x8];                                    
          }SLIST_ENTRY, *PSLIST_ENTRY;                                         
                                                                               
          typedef struct _DPH_BLOCK_INFORMATION     // 10 elements, 0x40 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      StartStamp;                                                  
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     UINT64       Heap;                    // VOID*                            
/*0x010*/     UINT64       RequestedSize;                                               
/*0x018*/     UINT64       ActualSize;                                                  
              union                                 // 3 elements, 0x10 bytes (sizeof)  
              {                                                                         
/*0x020*/         struct _LIST_ENTRY FreeQueue;     // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/         struct _SLIST_ENTRY FreePushList; // 1 elements, 0x10 bytes (sizeof)  
/*0x020*/         UINT16       TraceIndex;                                              
              };                                                                        
/*0x030*/     UINT64       StackTrace;              // VOID*                            
/*0x038*/     ULONG32      Padding;                                                     
/*0x03C*/     ULONG32      EndStamp;                                                    
          }DPH_BLOCK_INFORMATION, *PDPH_BLOCK_INFORMATION;                                    
                                                                                        
          typedef struct _RTL_BALANCED_LINKS // 5 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       Parent;           // struct _RTL_BALANCED_LINKS*     
/*0x008*/     UINT64       LeftChild;        // struct _RTL_BALANCED_LINKS*     
/*0x010*/     UINT64       RightChild;       // struct _RTL_BALANCED_LINKS*     
/*0x018*/     CHAR         Balance;                                             
/*0x019*/     UINT8        Reserved[3];                                         
/*0x01C*/     UINT8        _PADDING0_[0x4];                                     
          }RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;                                   
                                                                                
          typedef struct _DPH_HEAP_BLOCK                 // 14 elements, 0x80 bytes (sizeof) 
          {                                                                                  
              union                                      // 3 elements, 0x20 bytes (sizeof)  
              {                                                                              
/*0x000*/         UINT64       pNextAlloc;               // struct _DPH_HEAP_BLOCK*          
/*0x000*/         struct _LIST_ENTRY AvailableEntry;     // 2 elements, 0x10 bytes (sizeof)  
/*0x000*/         struct _RTL_BALANCED_LINKS TableLinks; // 5 elements, 0x20 bytes (sizeof)  
              };                                                                             
/*0x020*/     UINT64       pUserAllocation;              // UINT8*                           
/*0x028*/     UINT64       pVirtualBlock;                // UINT8*                           
/*0x030*/     UINT64       nVirtualBlockSize;                                                
/*0x038*/     UINT64       nVirtualAccessSize;                                               
/*0x040*/     UINT64       nUserRequestedSize;                                               
/*0x048*/     UINT64       nUserActualSize;                                                  
/*0x050*/     UINT64       UserValue;                    // VOID*                            
/*0x058*/     ULONG32      UserFlags;                                                        
/*0x05C*/     UINT8        _PADDING0_[0x4];                                                  
/*0x060*/     UINT64       StackTrace;                   // struct _RTL_TRACE_BLOCK*         
/*0x068*/     struct _LIST_ENTRY AdjacencyEntry;         // 2 elements, 0x10 bytes (sizeof)  
/*0x078*/     UINT64       pVirtualRegion;               // UINT8*                           
          }DPH_HEAP_BLOCK, *PDPH_HEAP_BLOCK;                                                 
                                                                                             
          typedef struct _RTL_AVL_TABLE                // 11 elements, 0x68 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _RTL_BALANCED_LINKS BalancedRoot; // 5 elements, 0x20 bytes (sizeof)  
/*0x020*/     UINT64       OrderedPointer;             // VOID*                            
/*0x028*/     ULONG32      WhichOrderedElement;                                            
/*0x02C*/     ULONG32      NumberGenericTableElements;                                     
/*0x030*/     ULONG32      DepthOfTree;                                                    
/*0x034*/     UINT8        _PADDING0_[0x4];                                                
/*0x038*/     UINT64       RestartKey;                 // struct _RTL_BALANCED_LINKS*      
/*0x040*/     ULONG32      DeleteCount;                                                    
/*0x044*/     UINT8        _PADDING1_[0x4];                                                
/*0x048*/     UINT64       CompareRoutine;             // FUNCT_2002_2001_CompareRoutine*  
/*0x050*/     UINT64       AllocateRoutine;            // FUNCT_00F2_200B_AllocateRoutine* 
/*0x058*/     UINT64       FreeRoutine;                // FUNCT_00EF_200F_FreeRoutine*     
/*0x060*/     UINT64       TableContext;               // VOID*                            
          }RTL_AVL_TABLE, *PRTL_AVL_TABLE;                                                 
                                                                                           
          typedef struct _DPH_HEAP_ROOT                        // 33 elements, 0x168 bytes (sizeof) 
          {                                                                                         
/*0x000*/     ULONG32      Signature;                                                               
/*0x004*/     ULONG32      HeapFlags;                                                               
/*0x008*/     UINT64       HeapCritSect;                       // struct _RTL_CRITICAL_SECTION*     
/*0x010*/     ULONG32      nRemoteLockAcquired;                                                     
/*0x014*/     UINT8        _PADDING0_[0x4];                                                         
/*0x018*/     UINT64       pVirtualStorageListHead;            // struct _DPH_HEAP_BLOCK*           
/*0x020*/     UINT64       pVirtualStorageListTail;            // struct _DPH_HEAP_BLOCK*           
/*0x028*/     ULONG32      nVirtualStorageRanges;                                                   
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                         
/*0x030*/     UINT64       nVirtualStorageBytes;                                                    
/*0x038*/     struct _RTL_AVL_TABLE BusyNodesTable;            // 11 elements, 0x68 bytes (sizeof)  
/*0x0A0*/     UINT64       NodeToAllocate;                     // struct _DPH_HEAP_BLOCK*           
/*0x0A8*/     ULONG32      nBusyAllocations;                                                        
/*0x0AC*/     UINT8        _PADDING2_[0x4];                                                         
/*0x0B0*/     UINT64       nBusyAllocationBytesCommitted;                                           
/*0x0B8*/     UINT64       pFreeAllocationListHead;            // struct _DPH_HEAP_BLOCK*           
/*0x0C0*/     UINT64       pFreeAllocationListTail;            // struct _DPH_HEAP_BLOCK*           
/*0x0C8*/     ULONG32      nFreeAllocations;                                                        
/*0x0CC*/     UINT8        _PADDING3_[0x4];                                                         
/*0x0D0*/     UINT64       nFreeAllocationBytesCommitted;                                           
/*0x0D8*/     struct _LIST_ENTRY AvailableAllocationHead;      // 2 elements, 0x10 bytes (sizeof)   
/*0x0E8*/     ULONG32      nAvailableAllocations;                                                   
/*0x0EC*/     UINT8        _PADDING4_[0x4];                                                         
/*0x0F0*/     UINT64       nAvailableAllocationBytesCommitted;                                      
/*0x0F8*/     UINT64       pUnusedNodeListHead;                // struct _DPH_HEAP_BLOCK*           
/*0x100*/     UINT64       pUnusedNodeListTail;                // struct _DPH_HEAP_BLOCK*           
/*0x108*/     ULONG32      nUnusedNodes;                                                            
/*0x10C*/     UINT8        _PADDING5_[0x4];                                                         
/*0x110*/     UINT64       nBusyAllocationBytesAccessible;                                          
/*0x118*/     UINT64       pNodePoolListHead;                  // struct _DPH_HEAP_BLOCK*           
/*0x120*/     UINT64       pNodePoolListTail;                  // struct _DPH_HEAP_BLOCK*           
/*0x128*/     ULONG32      nNodePools;                                                              
/*0x12C*/     UINT8        _PADDING6_[0x4];                                                         
/*0x130*/     UINT64       nNodePoolBytes;                                                          
/*0x138*/     struct _LIST_ENTRY NextHeap;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x148*/     ULONG32      ExtraFlags;                                                              
/*0x14C*/     ULONG32      Seed;                                                                    
/*0x150*/     UINT64       NormalHeap;                         // VOID*                             
/*0x158*/     UINT64       CreateStackTrace;                   // struct _RTL_TRACE_BLOCK*          
/*0x160*/     UINT64       FirstThread;                        // VOID*                             
          }DPH_HEAP_ROOT, *PDPH_HEAP_ROOT;                                                          
                                                                                                    
          typedef struct _DRIVER_EXTENSION           // 9 elements, 0x50 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       DriverObject;             // struct _DRIVER_OBJECT*          
/*0x008*/     UINT64       AddDevice;                // FUNCT_00A0_0E38_AddDevice*      
/*0x010*/     ULONG32      Count;                                                       
/*0x014*/     UINT8        _PADDING0_[0x4];                                             
/*0x018*/     struct _UNICODE_STRING ServiceKeyName; // 3 elements, 0x10 bytes (sizeof) 
/*0x028*/     UINT64       ClientDriverExtension;    // struct _IO_CLIENT_EXTENSION*    
/*0x030*/     UINT64       FsFilterCallbacks;        // struct _FS_FILTER_CALLBACKS*    
/*0x038*/     UINT64       KseCallbacks;             // VOID*                           
/*0x040*/     UINT64       DvCallbacks;              // VOID*                           
/*0x048*/     UINT64       VerifierContext;          // VOID*                           
          }DRIVER_EXTENSION, *PDRIVER_EXTENSION;                                        
                                                                                        
          typedef struct _DRIVER_OBJECT          // 15 elements, 0x150 bytes (sizeof)            
          {                                                                                      
/*0x000*/     INT16        Type;                                                                 
/*0x002*/     INT16        Size;                                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                                      
/*0x008*/     UINT64       DeviceObject;         // struct _DEVICE_OBJECT*                       
/*0x010*/     ULONG32      Flags;                                                                
/*0x014*/     UINT8        _PADDING1_[0x4];                                                      
/*0x018*/     UINT64       DriverStart;          // VOID*                                        
/*0x020*/     ULONG32      DriverSize;                                                           
/*0x024*/     UINT8        _PADDING2_[0x4];                                                      
/*0x028*/     UINT64       DriverSection;        // VOID*                                        
/*0x030*/     UINT64       DriverExtension;      // struct _DRIVER_EXTENSION*                    
/*0x038*/     struct _UNICODE_STRING DriverName; // 3 elements, 0x10 bytes (sizeof)              
/*0x048*/     UINT64       HardwareDatabase;     // struct _UNICODE_STRING*                      
/*0x050*/     UINT64       FastIoDispatch;       // struct _FAST_IO_DISPATCH*                    
/*0x058*/     UINT64       DriverInit;           // FUNCT_00A0_12AF_DriverInit*                  
/*0x060*/     UINT64       DriverStartIo;        // FUNCT_00EF_0F0B_DriverStartIo_CancelRoutine* 
/*0x068*/     UINT64       DriverUnload;         // FUNCT_00EF_12B3_DriverUnload*                
/*0x070*/     UINT64       MajorFunction[28];    // FUNCT_00A0_12B7_MajorFunction*               
          }DRIVER_OBJECT, *PDRIVER_OBJECT;                                                       
                                                                                                 
          typedef struct _RTL_BALANCED_NODE     // 6 elements, 0x18 bytes (sizeof) 
          {                                                                        
              union                             // 2 elements, 0x10 bytes (sizeof) 
              {                                                                    
/*0x000*/         UINT64       Children[2];     // struct _RTL_BALANCED_NODE*      
                  struct                        // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                
/*0x000*/             UINT64       Left;        // struct _RTL_BALANCED_NODE*      
/*0x008*/             UINT64       Right;       // struct _RTL_BALANCED_NODE*      
                  };                                                               
              };                                                                   
              union                             // 2 elements, 0x8 bytes (sizeof)  
              {                                                                    
                  struct                        // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                
/*0x010*/             UINT8        Red : 1;     // 0 BitPosition                   
/*0x010*/             UINT8        Balance : 2; // 0 BitPosition                   
                  };                                                               
/*0x010*/         UINT64       ParentValue;                                        
              };                                                                   
          }RTL_BALANCED_NODE, *PRTL_BALANCED_NODE;                                   
                                                                                   
          typedef struct _DYNAMIC_FUNCTION_TABLE    // 12 elements, 0x70 bytes (sizeof)      
          {                                                                                  
/*0x000*/     struct _LIST_ENTRY ListEntry;         // 2 elements, 0x10 bytes (sizeof)       
/*0x010*/     UINT64       FunctionTable;           // struct _IMAGE_RUNTIME_FUNCTION_ENTRY* 
/*0x018*/     union _LARGE_INTEGER TimeStamp;       // 4 elements, 0x8 bytes (sizeof)        
/*0x020*/     UINT64       MinimumAddress;                                                   
/*0x028*/     UINT64       MaximumAddress;                                                   
/*0x030*/     UINT64       BaseAddress;                                                      
/*0x038*/     UINT64       Callback;                // FUNCT_1507_151C_Callback*             
/*0x040*/     UINT64       Context;                 // VOID*                                 
/*0x048*/     UINT64       OutOfProcessCallbackDll; // WCHAR*                                
/*0x050*/     enum _FUNCTION_TABLE_TYPE Type;                                                
/*0x054*/     ULONG32      EntryCount;                                                       
/*0x058*/     struct _RTL_BALANCED_NODE TreeNode;   // 6 elements, 0x18 bytes (sizeof)       
          }DYNAMIC_FUNCTION_TABLE, *PDYNAMIC_FUNCTION_TABLE;                                         
                                                                                             
typedef struct _ECP_LIST // 0 elements, 0x0 bytes (sizeof) 
{                                                          
}ECP_LIST, *PECP_LIST;                                     
                                                           
          typedef struct _OWNER_ENTRY                        // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT64       OwnerThread;                                                         
              union                                          // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                 
                  struct                                     // 4 elements, 0x4 bytes (sizeof)  
                  {                                                                             
/*0x008*/             ULONG32      IoPriorityBoosted : 1;    // 0 BitPosition                   
/*0x008*/             ULONG32      OwnerReferenced : 1;      // 1 BitPosition                   
/*0x008*/             ULONG32      IoQoSPriorityBoosted : 1; // 2 BitPosition                   
/*0x008*/             ULONG32      OwnerCount : 29;          // 3 BitPosition                   
                  };                                                                            
/*0x008*/         ULONG32      TableSize;                                                       
              };                                                                                
          }OWNER_ENTRY, *POWNER_ENTRY;                                                          
                                                                                                
          typedef struct _ERESOURCE                   // 17 elements, 0x68 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY SystemResourcesList; // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     UINT64       OwnerTable;                // struct _OWNER_ENTRY*             
/*0x018*/     INT16        ActiveCount;                                                   
              union                                   // 2 elements, 0x6 bytes (sizeof)   
              {                                                                           
/*0x01A*/         UINT16       Flag;                                                      
                  struct                              // 2 elements, 0x6 bytes (sizeof)   
                  {                                                                       
/*0x01A*/             UINT8        ReservedLowFlags;                                      
/*0x01B*/             UINT8        WaiterPriority;                                        
/*0x01C*/             UINT8        _PADDING0_[0x4];                                       
                  };                                                                      
              };                                                                          
/*0x020*/     UINT64       SharedWaiters;             // VOID*                            
/*0x028*/     UINT64       ExclusiveWaiters;          // VOID*                            
/*0x030*/     struct _OWNER_ENTRY OwnerEntry;         // 6 elements, 0x10 bytes (sizeof)  
/*0x040*/     ULONG32      ActiveEntries;                                                 
/*0x044*/     ULONG32      ContentionCount;                                               
/*0x048*/     ULONG32      NumberOfSharedWaiters;                                         
/*0x04C*/     ULONG32      NumberOfExclusiveWaiters;                                      
/*0x050*/     UINT64       Reserved2;                 // VOID*                            
              union                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                           
/*0x058*/         UINT64       Address;               // VOID*                            
/*0x058*/         UINT64       CreatorBackTraceIndex;                                     
              };                                                                          
/*0x060*/     UINT64       SpinLock;                                                      
          }ERESOURCE, *PERESOURCE;                                                        
                                                                                          
          typedef struct _KAFFINITY_EX // 4 elements, 0xA8 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT16       Count;                                         
/*0x002*/     UINT16       Size;                                          
/*0x004*/     ULONG32      Reserved;                                      
/*0x008*/     UINT64       Bitmap[20];                                    
          }KAFFINITY_EX, *PKAFFINITY_EX;                                   
                                                                          
          typedef struct _PROCESS_DISK_COUNTERS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       BytesRead;                                              
/*0x008*/     UINT64       BytesWritten;                                           
/*0x010*/     UINT64       ReadOperationCount;                                     
/*0x018*/     UINT64       WriteOperationCount;                                    
/*0x020*/     UINT64       FlushOperationCount;                                    
          }PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS;                                   
                                                                                   
          typedef struct _WNF_STATE_NAME // 1 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Data[2];                                        
          }WNF_STATE_NAME, *PWNF_STATE_NAME;                                  
                                                                           
          typedef struct _PS_JOB_WAKE_INFORMATION // 3 elements, 0x48 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       NotificationChannel;                                      
/*0x008*/     UINT64       WakeCounters[7];                                          
/*0x040*/     UINT64       NoWakeCounter;                                            
          }PS_JOB_WAKE_INFORMATION, *PPS_JOB_WAKE_INFORMATION;                                   
                                                                                     
          typedef struct _JOBOBJECT_WAKE_FILTER // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      HighEdgeFilter;                                        
/*0x004*/     ULONG32      LowEdgeFilter;                                         
          }JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER;                                  
                                                                                  
          typedef struct _EPROCESS_VALUES       // 11 elements, 0x58 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       KernelTime;                                              
/*0x008*/     UINT64       UserTime;                                                
/*0x010*/     UINT64       ReadyTime;                                               
/*0x018*/     UINT64       CycleTime;                                               
/*0x020*/     UINT64       ContextSwitches;                                         
/*0x028*/     INT64        ReadOperationCount;                                      
/*0x030*/     INT64        WriteOperationCount;                                     
/*0x038*/     INT64        OtherOperationCount;                                     
/*0x040*/     INT64        ReadTransferCount;                                       
/*0x048*/     INT64        WriteTransferCount;                                      
/*0x050*/     INT64        OtherTransferCount;                                      
          }EPROCESS_VALUES, *PEPROCESS_VALUES;                                      
                                                                                    
          typedef struct _PS_PROPERTY_SET  // 2 elements, 0x18 bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _LIST_ENTRY ListHead; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Lock;                                              
          }PS_PROPERTY_SET, *PPS_PROPERTY_SET;                                   
                                                                              
          typedef struct _RTL_BITMAP        // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      SizeOfBitMap;                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;          // ULONG32*                        
          }RTL_BITMAP, *PRTL_BITMAP;                                           
                                                                               
          typedef struct _JOB_RATE_CONTROL_HEADER     // 4 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       RateControlQuotaReference; // VOID*                           
/*0x008*/     struct _RTL_BITMAP OverQuotaHistory;    // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       BitMapBuffer;              // UINT8*                          
/*0x020*/     UINT64       BitMapBufferSize;                                             
          }JOB_RATE_CONTROL_HEADER, *PJOB_RATE_CONTROL_HEADER;                                   
                                                                                         
          typedef struct _EX_RUNDOWN_REF // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
              union                      // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         UINT64       Count;                                      
/*0x000*/         UINT64       Ptr;      // VOID*                          
              };                                                           
          }EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;                                  
                                                                           
          typedef struct _PS_IO_CONTROL_ENTRY               // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x18 bytes (sizeof) 
              {                                                                                
/*0x000*/         struct _RTL_BALANCED_NODE VolumeTreeNode; // 6 elements, 0x18 bytes (sizeof) 
                  struct                                    // 2 elements, 0x18 bytes (sizeof) 
                  {                                                                            
/*0x000*/             struct _LIST_ENTRY FreeListEntry;     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/             UINT64       ReservedForParentValue;                                     
                  };                                                                           
              };                                                                               
/*0x018*/     UINT64       VolumeKey;                                                          
/*0x020*/     struct _EX_RUNDOWN_REF Rundown;               // 2 elements, 0x8 bytes (sizeof)  
/*0x028*/     UINT64       IoControl;                       // VOID*                           
/*0x030*/     UINT64       VolumeIoAttribution;             // VOID*                           
          }PS_IO_CONTROL_ENTRY, *PPS_IO_CONTROL_ENTRY;                                         
                                                                                               
          typedef struct _RTL_RB_TREE       // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Root;            // struct _RTL_BALANCED_NODE*      
              union                         // 2 elements, 0x8 bytes (sizeof)  
              {                                                                
/*0x008*/         UINT8        Encoded : 1; // 0 BitPosition                   
/*0x008*/         UINT64       Min;         // struct _RTL_BALANCED_NODE*      
              };                                                               
          }RTL_RB_TREE, *PRTL_RB_TREE;                                         
                                                                               
          typedef struct _WORK_QUEUE_ITEM // 3 elements, 0x20 bytes (sizeof)                                                                            
          {                                                                                                                                             
/*0x000*/     struct _LIST_ENTRY List;    // 2 elements, 0x10 bytes (sizeof)                                                                            
/*0x010*/     UINT64       WorkerRoutine; // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
/*0x018*/     UINT64       Parameter;     // VOID*                                                                                                      
          }WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;                                                                                                              
                                                                                                                                                        
          typedef union _JOBOBJECT_ENERGY_TRACKING_STATE // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       Value;                                                          
              struct                                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      UpdateMask;                                                 
/*0x004*/         ULONG32      DesiredState;                                               
              };                                                                           
          }JOBOBJECT_ENERGY_TRACKING_STATE, *PJOBOBJECT_ENERGY_TRACKING_STATE;                                  
                                                                                           
          typedef struct _EJOB                                                  // 153 elements, 0x620 bytes (sizeof)      
          {                                                                                                                
/*0x000*/     struct _KEVENT Event;                                             // 1 elements, 0x18 bytes (sizeof)         
/*0x018*/     struct _LIST_ENTRY JobLinks;                                      // 2 elements, 0x10 bytes (sizeof)         
/*0x028*/     struct _LIST_ENTRY ProcessListHead;                               // 2 elements, 0x10 bytes (sizeof)         
/*0x038*/     struct _ERESOURCE JobLock;                                        // 17 elements, 0x68 bytes (sizeof)        
/*0x0A0*/     union _LARGE_INTEGER TotalUserTime;                               // 4 elements, 0x8 bytes (sizeof)          
/*0x0A8*/     union _LARGE_INTEGER TotalKernelTime;                             // 4 elements, 0x8 bytes (sizeof)          
/*0x0B0*/     union _LARGE_INTEGER TotalCycleTime;                              // 4 elements, 0x8 bytes (sizeof)          
/*0x0B8*/     union _LARGE_INTEGER ThisPeriodTotalUserTime;                     // 4 elements, 0x8 bytes (sizeof)          
/*0x0C0*/     union _LARGE_INTEGER ThisPeriodTotalKernelTime;                   // 4 elements, 0x8 bytes (sizeof)          
/*0x0C8*/     UINT64       TotalContextSwitches;                                                                           
/*0x0D0*/     ULONG32      TotalPageFaultCount;                                                                            
/*0x0D4*/     ULONG32      TotalProcesses;                                                                                 
/*0x0D8*/     ULONG32      ActiveProcesses;                                                                                
/*0x0DC*/     ULONG32      TotalTerminatedProcesses;                                                                       
/*0x0E0*/     union _LARGE_INTEGER PerProcessUserTimeLimit;                     // 4 elements, 0x8 bytes (sizeof)          
/*0x0E8*/     union _LARGE_INTEGER PerJobUserTimeLimit;                         // 4 elements, 0x8 bytes (sizeof)          
/*0x0F0*/     UINT64       MinimumWorkingSetSize;                                                                          
/*0x0F8*/     UINT64       MaximumWorkingSetSize;                                                                          
/*0x100*/     ULONG32      LimitFlags;                                                                                     
/*0x104*/     ULONG32      ActiveProcessLimit;                                                                             
/*0x108*/     struct _KAFFINITY_EX Affinity;                                    // 4 elements, 0xA8 bytes (sizeof)         
/*0x1B0*/     UINT64       AccessState;                                         // struct _JOB_ACCESS_STATE*               
/*0x1B8*/     UINT64       AccessStateQuotaReference;                           // VOID*                                   
/*0x1C0*/     ULONG32      UIRestrictionsClass;                                                                            
/*0x1C4*/     ULONG32      EndOfJobTimeAction;                                                                             
/*0x1C8*/     UINT64       CompletionPort;                                      // VOID*                                   
/*0x1D0*/     UINT64       CompletionKey;                                       // VOID*                                   
/*0x1D8*/     UINT64       CompletionCount;                                                                                
/*0x1E0*/     ULONG32      SessionId;                                                                                      
/*0x1E4*/     ULONG32      SchedulingClass;                                                                                
/*0x1E8*/     UINT64       ReadOperationCount;                                                                             
/*0x1F0*/     UINT64       WriteOperationCount;                                                                            
/*0x1F8*/     UINT64       OtherOperationCount;                                                                            
/*0x200*/     UINT64       ReadTransferCount;                                                                              
/*0x208*/     UINT64       WriteTransferCount;                                                                             
/*0x210*/     UINT64       OtherTransferCount;                                                                             
/*0x218*/     struct _PROCESS_DISK_COUNTERS DiskIoInfo;                         // 5 elements, 0x28 bytes (sizeof)         
/*0x240*/     UINT64       ProcessMemoryLimit;                                                                             
/*0x248*/     UINT64       JobMemoryLimit;                                                                                 
/*0x250*/     UINT64       JobTotalMemoryLimit;                                                                            
/*0x258*/     UINT64       PeakProcessMemoryUsed;                                                                          
/*0x260*/     UINT64       PeakJobMemoryUsed;                                                                              
/*0x268*/     struct _KAFFINITY_EX EffectiveAffinity;                           // 4 elements, 0xA8 bytes (sizeof)         
/*0x310*/     union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;            // 4 elements, 0x8 bytes (sizeof)          
/*0x318*/     UINT64       EffectiveMinimumWorkingSetSize;                                                                 
/*0x320*/     UINT64       EffectiveMaximumWorkingSetSize;                                                                 
/*0x328*/     UINT64       EffectiveProcessMemoryLimit;                                                                    
/*0x330*/     UINT64       EffectiveProcessMemoryLimitJob;                      // struct _EJOB*                           
/*0x338*/     UINT64       EffectivePerProcessUserTimeLimitJob;                 // struct _EJOB*                           
/*0x340*/     UINT64       EffectiveNetIoRateLimitJob;                          // struct _EJOB*                           
/*0x348*/     UINT64       EffectiveHeapAttributionJob;                         // struct _EJOB*                           
/*0x350*/     ULONG32      EffectiveLimitFlags;                                                                            
/*0x354*/     ULONG32      EffectiveSchedulingClass;                                                                       
/*0x358*/     ULONG32      EffectiveFreezeCount;                                                                           
/*0x35C*/     ULONG32      EffectiveBackgroundCount;                                                                       
/*0x360*/     ULONG32      EffectiveSwapCount;                                                                             
/*0x364*/     ULONG32      EffectiveNotificationLimitCount;                                                                
/*0x368*/     UINT8        EffectivePriorityClass;                                                                         
/*0x369*/     UINT8        PriorityClass;                                                                                  
/*0x36A*/     UINT8        NestingDepth;                                                                                   
/*0x36B*/     UINT8        Reserved1[1];                                                                                   
/*0x36C*/     ULONG32      CompletionFilter;                                                                               
              union                                                             // 2 elements, 0x48 bytes (sizeof)         
              {                                                                                                            
/*0x370*/         struct _WNF_STATE_NAME WakeChannel;                           // 1 elements, 0x8 bytes (sizeof)          
/*0x370*/         struct _PS_JOB_WAKE_INFORMATION WakeInfo;                     // 3 elements, 0x48 bytes (sizeof)         
              };                                                                                                           
/*0x3B8*/     struct _JOBOBJECT_WAKE_FILTER WakeFilter;                         // 2 elements, 0x8 bytes (sizeof)          
/*0x3C0*/     ULONG32      LowEdgeLatchFilter;                                                                             
/*0x3C4*/     UINT8        _PADDING0_[0x4];                                                                                
/*0x3C8*/     UINT64       NotificationLink;                                    // struct _EJOB*                           
/*0x3D0*/     UINT64       CurrentJobMemoryUsed;                                                                           
/*0x3D8*/     UINT64       NotificationInfo;                                    // struct _JOB_NOTIFICATION_INFORMATION*   
/*0x3E0*/     UINT64       NotificationInfoQuotaReference;                      // VOID*                                   
/*0x3E8*/     UINT64       NotificationPacket;                                  // struct _IO_MINI_COMPLETION_PACKET_USER* 
/*0x3F0*/     UINT64       CpuRateControl;                                      // struct _JOB_CPU_RATE_CONTROL*           
/*0x3F8*/     UINT64       EffectiveSchedulingGroup;                            // VOID*                                   
/*0x400*/     UINT64       ReadyTime;                                                                                      
/*0x408*/     struct _EX_PUSH_LOCK MemoryLimitsLock;                            // 7 elements, 0x8 bytes (sizeof)          
/*0x410*/     struct _LIST_ENTRY SiblingJobLinks;                               // 2 elements, 0x10 bytes (sizeof)         
/*0x420*/     struct _LIST_ENTRY ChildJobListHead;                              // 2 elements, 0x10 bytes (sizeof)         
/*0x430*/     UINT64       ParentJob;                                           // struct _EJOB*                           
/*0x438*/     UINT64       RootJob;                                             // struct _EJOB*                           
/*0x440*/     struct _LIST_ENTRY IteratorListHead;                              // 2 elements, 0x10 bytes (sizeof)         
/*0x450*/     UINT64       AncestorCount;                                                                                  
              union                                                             // 2 elements, 0x8 bytes (sizeof)          
              {                                                                                                            
/*0x458*/         UINT64       Ancestors;                                       // struct _EJOB**                          
/*0x458*/         UINT64       SessionObject;                                   // VOID*                                   
              };                                                                                                           
/*0x460*/     struct _EPROCESS_VALUES Accounting;                               // 11 elements, 0x58 bytes (sizeof)        
/*0x4B8*/     ULONG32      ShadowActiveProcessCount;                                                                       
/*0x4BC*/     ULONG32      ActiveAuxiliaryProcessCount;                                                                    
/*0x4C0*/     ULONG32      SequenceNumber;                                                                                 
/*0x4C4*/     ULONG32      JobId;                                                                                          
/*0x4C8*/     struct _GUID ContainerId;                                         // 4 elements, 0x10 bytes (sizeof)         
/*0x4D8*/     struct _GUID ContainerTelemetryId;                                // 4 elements, 0x10 bytes (sizeof)         
/*0x4E8*/     UINT64       ServerSiloGlobals;                                   // struct _ESERVERSILO_GLOBALS*            
/*0x4F0*/     struct _PS_PROPERTY_SET PropertySet;                              // 2 elements, 0x18 bytes (sizeof)         
/*0x508*/     UINT64       Storage;                                             // struct _PSP_STORAGE*                    
/*0x510*/     UINT64       NetRateControl;                                      // struct _JOB_NET_RATE_CONTROL*           
              union                                                             // 2 elements, 0x4 bytes (sizeof)          
              {                                                                                                            
/*0x518*/         ULONG32      JobFlags;                                                                                   
                  struct                                                        // 32 elements, 0x4 bytes (sizeof)         
                  {                                                                                                        
/*0x518*/             ULONG32      CloseDone : 1;                               // 0 BitPosition                           
/*0x518*/             ULONG32      MultiGroup : 1;                              // 1 BitPosition                           
/*0x518*/             ULONG32      OutstandingNotification : 1;                 // 2 BitPosition                           
/*0x518*/             ULONG32      NotificationInProgress : 1;                  // 3 BitPosition                           
/*0x518*/             ULONG32      UILimits : 1;                                // 4 BitPosition                           
/*0x518*/             ULONG32      CpuRateControlActive : 1;                    // 5 BitPosition                           
/*0x518*/             ULONG32      OwnCpuRateControl : 1;                       // 6 BitPosition                           
/*0x518*/             ULONG32      Terminating : 1;                             // 7 BitPosition                           
/*0x518*/             ULONG32      WorkingSetLock : 1;                          // 8 BitPosition                           
/*0x518*/             ULONG32      JobFrozen : 1;                               // 9 BitPosition                           
/*0x518*/             ULONG32      Background : 1;                              // 10 BitPosition                          
/*0x518*/             ULONG32      WakeNotificationAllocated : 1;               // 11 BitPosition                          
/*0x518*/             ULONG32      WakeNotificationEnabled : 1;                 // 12 BitPosition                          
/*0x518*/             ULONG32      WakeNotificationPending : 1;                 // 13 BitPosition                          
/*0x518*/             ULONG32      LimitNotificationRequired : 1;               // 14 BitPosition                          
/*0x518*/             ULONG32      ZeroCountNotificationRequired : 1;           // 15 BitPosition                          
/*0x518*/             ULONG32      CycleTimeNotificationRequired : 1;           // 16 BitPosition                          
/*0x518*/             ULONG32      CycleTimeNotificationPending : 1;            // 17 BitPosition                          
/*0x518*/             ULONG32      TimersVirtualized : 1;                       // 18 BitPosition                          
/*0x518*/             ULONG32      JobSwapped : 1;                              // 19 BitPosition                          
/*0x518*/             ULONG32      ViolationDetected : 1;                       // 20 BitPosition                          
/*0x518*/             ULONG32      EmptyJobNotified : 1;                        // 21 BitPosition                          
/*0x518*/             ULONG32      NoSystemCharge : 1;                          // 22 BitPosition                          
/*0x518*/             ULONG32      DropNoWakeCharges : 1;                       // 23 BitPosition                          
/*0x518*/             ULONG32      NoWakeChargePolicyDecided : 1;               // 24 BitPosition                          
/*0x518*/             ULONG32      NetRateControlActive : 1;                    // 25 BitPosition                          
/*0x518*/             ULONG32      OwnNetRateControl : 1;                       // 26 BitPosition                          
/*0x518*/             ULONG32      IoRateControlActive : 1;                     // 27 BitPosition                          
/*0x518*/             ULONG32      OwnIoRateControl : 1;                        // 28 BitPosition                          
/*0x518*/             ULONG32      DisallowNewProcesses : 1;                    // 29 BitPosition                          
/*0x518*/             ULONG32      Silo : 1;                                    // 30 BitPosition                          
/*0x518*/             ULONG32      ContainerTelemetryIdSet : 1;                 // 31 BitPosition                          
                  };                                                                                                       
              };                                                                                                           
              union                                                             // 2 elements, 0x4 bytes (sizeof)          
              {                                                                                                            
/*0x51C*/         ULONG32      JobFlags2;                                                                                  
                  struct                                                        // 3 elements, 0x4 bytes (sizeof)          
                  {                                                                                                        
/*0x51C*/             ULONG32      ParentLocked : 1;                            // 0 BitPosition                           
/*0x51C*/             ULONG32      EnableUsermodeSiloThreadImpersonation : 1;   // 1 BitPosition                           
/*0x51C*/             ULONG32      DisallowUsermodeSiloThreadImpersonation : 1; // 2 BitPosition                           
                  };                                                                                                       
              };                                                                                                           
/*0x520*/     UINT64       EnergyValues;                                        // struct _PROCESS_EXTENDED_ENERGY_VALUES* 
/*0x528*/     UINT64       SharedCommitCharge;                                                                             
/*0x530*/     ULONG32      DiskIoAttributionUserRefCount;                                                                  
/*0x534*/     ULONG32      DiskIoAttributionRefCount;                                                                      
              union                                                             // 2 elements, 0x8 bytes (sizeof)          
              {                                                                                                            
/*0x538*/         UINT64       DiskIoAttributionContext;                        // VOID*                                   
/*0x538*/         UINT64       DiskIoAttributionOwnerJob;                       // struct _EJOB*                           
              };                                                                                                           
/*0x540*/     struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;              // 4 elements, 0x28 bytes (sizeof)         
/*0x568*/     struct _PS_IO_CONTROL_ENTRY GlobalIoControl;                      // 7 elements, 0x38 bytes (sizeof)         
/*0x5A0*/     LONG32       IoControlStateLock;                                                                             
/*0x5A4*/     UINT8        _PADDING1_[0x4];                                                                                
/*0x5A8*/     struct _RTL_RB_TREE VolumeIoControlTree;                          // 3 elements, 0x10 bytes (sizeof)         
/*0x5B8*/     UINT64       IoRateOverQuotaHistory;                                                                         
/*0x5C0*/     ULONG32      IoRateCurrentGeneration;                                                                        
/*0x5C4*/     ULONG32      IoRateLastQueryGeneration;                                                                      
/*0x5C8*/     ULONG32      IoRateGenerationLength;                                                                         
/*0x5CC*/     ULONG32      IoRateOverQuotaNotifySequenceId;                                                                
/*0x5D0*/     UINT64       LastThrottledIoTime;                                                                            
/*0x5D8*/     struct _EX_PUSH_LOCK IoControlLock;                               // 7 elements, 0x8 bytes (sizeof)          
/*0x5E0*/     UINT64       SiloHardReferenceCount;                                                                         
/*0x5E8*/     struct _WORK_QUEUE_ITEM RundownWorkItem;                          // 3 elements, 0x20 bytes (sizeof)         
/*0x608*/     UINT64       PartitionObject;                                     // VOID*                                   
/*0x610*/     UINT64       PartitionOwnerJob;                                   // struct _EJOB*                           
/*0x618*/     union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;       // 3 elements, 0x8 bytes (sizeof)          
          }EJOB, *PEJOB;                                                                                                   
                                                                                                                           
          typedef union _ENERGY_STATE_DURATION    // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Value;                                                   
              struct                              // 1 elements, 0x8 bytes (sizeof) 
              {                                                                     
/*0x000*/         ULONG32      LastChangeTime;                                      
                  struct                          // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                 
/*0x004*/             ULONG32      Duration : 31; // 0 BitPosition                  
/*0x004*/             ULONG32      IsInState : 1; // 31 BitPosition                 
                  };                                                                
              };                                                                    
          }ENERGY_STATE_DURATION, *PENERGY_STATE_DURATION;                                  
                                                                                    
          typedef struct _GROUP_AFFINITY // 3 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Mask;                                            
/*0x008*/     UINT16       Group;                                           
/*0x00A*/     UINT16       Reserved[3];                                     
          }GROUP_AFFINITY, *PGROUP_AFFINITY;                                   
                                                                            
          typedef struct _flags                      // 5 elements, 0x1 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT8        Removable : 1;            // 0 BitPosition                  
/*0x000*/     UINT8        GroupAssigned : 1;        // 1 BitPosition                  
/*0x000*/     UINT8        GroupCommitted : 1;       // 2 BitPosition                  
/*0x000*/     UINT8        GroupAssignmentFixed : 1; // 3 BitPosition                  
/*0x000*/     UINT8        Fill : 4;                 // 4 BitPosition                  
          }flags, *Pflags;                                                             
                                                                                       
          typedef struct _KHETERO_PROCESSOR_SET // 3 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       IdealMask;                                              
/*0x008*/     UINT64       PreferredMask;                                          
/*0x010*/     UINT64       AvailableMask;                                          
          }KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET;                                   
                                                                                   
          typedef struct _KNODE                            // 25 elements, 0x180 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT64       IdleNonParkedCpuSet;                                                 
/*0x008*/     UINT64       IdleSmtSet;                                                          
/*0x010*/     UINT64       IdleCpuSet;                                                          
/*0x018*/     UINT8        _PADDING0_[0x28];                                                    
/*0x040*/     UINT64       DeepIdleSet;                                                         
/*0x048*/     UINT64       IdleConstrainedSet;                                                  
/*0x050*/     UINT64       NonParkedSet;                                                        
/*0x058*/     UINT64       NonIsrTargetedSet;                                                   
/*0x060*/     LONG32       ParkLock;                                                            
/*0x064*/     ULONG32      Seed;                                                                
/*0x068*/     UINT8        _PADDING1_[0x18];                                                    
/*0x080*/     ULONG32      SiblingMask;                                                         
/*0x084*/     UINT8        _PADDING2_[0x4];                                                     
              union                                        // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                 
/*0x088*/         struct _GROUP_AFFINITY Affinity;         // 3 elements, 0x10 bytes (sizeof)   
                  struct                                   // 5 elements, 0x10 bytes (sizeof)   
                  {                                                                             
/*0x088*/             UINT8        AffinityFill[10];                                            
/*0x092*/             UINT16       NodeNumber;                                                  
/*0x094*/             UINT16       PrimaryNodeNumber;                                           
/*0x096*/             UINT8        Stride;                                                      
/*0x097*/             UINT8        Spare0;                                                      
                  };                                                                            
              };                                                                                
/*0x098*/     UINT64       SharedReadyQueueLeaders;                                             
/*0x0A0*/     ULONG32      ProximityId;                                                         
/*0x0A4*/     ULONG32      Lowest;                                                              
/*0x0A8*/     ULONG32      Highest;                                                             
/*0x0AC*/     UINT8        MaximumProcessors;                                                   
/*0x0AD*/     struct _flags Flags;                         // 5 elements, 0x1 bytes (sizeof)    
/*0x0AE*/     UINT8        Spare10;                                                             
/*0x0AF*/     UINT8        _PADDING3_[0x1];                                                     
/*0x0B0*/     struct _KHETERO_PROCESSOR_SET HeteroSets[5];                                      
/*0x128*/     UINT64       PpmConfiguredQosSets[4];                                             
/*0x148*/     UINT8        _PADDING4_[0x38];                                                    
          }KNODE, *PKNODE;                                                                      
                                                                                                
          typedef struct _ENODE                                // 2 elements, 0x1C0 bytes (sizeof)  
          {                                                                                         
/*0x000*/     struct _KNODE Ncb;                               // 25 elements, 0x180 bytes (sizeof) 
/*0x180*/     struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem; // 3 elements, 0x20 bytes (sizeof)   
/*0x1A0*/     UINT8        _PADDING0_[0x20];                                                        
          }ENODE, *PENODE;                                                                          
                                                                                                    
          typedef union _KEXECUTE_OPTIONS                           // 10 elements, 0x1 bytes (sizeof) 
          {                                                                                            
              struct                                                // 8 elements, 0x1 bytes (sizeof)  
              {                                                                                        
/*0x000*/         UINT8        ExecuteDisable : 1;                  // 0 BitPosition                   
/*0x000*/         UINT8        ExecuteEnable : 1;                   // 1 BitPosition                   
/*0x000*/         UINT8        DisableThunkEmulation : 1;           // 2 BitPosition                   
/*0x000*/         UINT8        Permanent : 1;                       // 3 BitPosition                   
/*0x000*/         UINT8        ExecuteDispatchEnable : 1;           // 4 BitPosition                   
/*0x000*/         UINT8        ImageDispatchEnable : 1;             // 5 BitPosition                   
/*0x000*/         UINT8        DisableExceptionChainValidation : 1; // 6 BitPosition                   
/*0x000*/         UINT8        Spare : 1;                           // 7 BitPosition                   
              };                                                                                       
/*0x000*/     UINT8        ExecuteOptions;                                                             
/*0x000*/     UINT8        ExecuteOptionsNV;                                                           
          }KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS;                                                       
                                                                                                       
          typedef union _KSTACK_COUNT           // 3 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     LONG32       Value;                                                 
              struct                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                   
/*0x000*/         ULONG32      State : 3;       // 0 BitPosition                  
/*0x000*/         ULONG32      StackCount : 29; // 3 BitPosition                  
              };                                                                  
          }KSTACK_COUNT, *PKSTACK_COUNT;                                          
                                                                                  
          typedef struct _KPROCESS                            // 45 elements, 0x2D8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _DISPATCHER_HEADER Header;               // 58 elements, 0x18 bytes (sizeof)  
/*0x018*/     struct _LIST_ENTRY ProfileListHead;             // 2 elements, 0x10 bytes (sizeof)   
/*0x028*/     UINT64       DirectoryTableBase;                                                     
/*0x030*/     struct _LIST_ENTRY ThreadListHead;              // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     ULONG32      ProcessLock;                                                            
/*0x044*/     ULONG32      ProcessTimerDelay;                                                      
/*0x048*/     UINT64       DeepFreezeStartTime;                                                    
/*0x050*/     struct _KAFFINITY_EX Affinity;                  // 4 elements, 0xA8 bytes (sizeof)   
/*0x0F8*/     struct _LIST_ENTRY ReadyListHead;               // 2 elements, 0x10 bytes (sizeof)   
/*0x108*/     struct _SINGLE_LIST_ENTRY SwapListEntry;        // 1 elements, 0x8 bytes (sizeof)    
/*0x110*/     struct _KAFFINITY_EX ActiveProcessors;          // 4 elements, 0xA8 bytes (sizeof)   
              union                                           // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                    
                  struct                                      // 11 elements, 0x4 bytes (sizeof)   
                  {                                                                                
/*0x1B8*/             ULONG32      AutoAlignment : 1;         // 0 BitPosition                     
/*0x1B8*/             ULONG32      DisableBoost : 1;          // 1 BitPosition                     
/*0x1B8*/             ULONG32      DisableQuantum : 1;        // 2 BitPosition                     
/*0x1B8*/             ULONG32      DeepFreeze : 1;            // 3 BitPosition                     
/*0x1B8*/             ULONG32      TimerVirtualization : 1;   // 4 BitPosition                     
/*0x1B8*/             ULONG32      CheckStackExtents : 1;     // 5 BitPosition                     
/*0x1B8*/             ULONG32      CacheIsolationEnabled : 1; // 6 BitPosition                     
/*0x1B8*/             ULONG32      PpmPolicy : 3;             // 7 BitPosition                     
/*0x1B8*/             ULONG32      ActiveGroupsMask : 20;     // 10 BitPosition                    
/*0x1B8*/             ULONG32      VaSpaceDeleted : 1;        // 30 BitPosition                    
/*0x1B8*/             ULONG32      ReservedFlags : 1;         // 31 BitPosition                    
                  };                                                                               
/*0x1B8*/         LONG32       ProcessFlags;                                                       
              };                                                                                   
/*0x1BC*/     CHAR         BasePriority;                                                           
/*0x1BD*/     CHAR         QuantumReset;                                                           
/*0x1BE*/     CHAR         Visited;                                                                
/*0x1BF*/     union _KEXECUTE_OPTIONS Flags;                  // 10 elements, 0x1 bytes (sizeof)   
/*0x1C0*/     ULONG32      ThreadSeed[20];                                                         
/*0x210*/     UINT16       IdealNode[20];                                                          
/*0x238*/     UINT16       IdealGlobalNode;                                                        
/*0x23A*/     UINT16       Spare1;                                                                 
/*0x23C*/     union _KSTACK_COUNT StackCount;                 // 3 elements, 0x4 bytes (sizeof)    
/*0x240*/     struct _LIST_ENTRY ProcessListEntry;            // 2 elements, 0x10 bytes (sizeof)   
/*0x250*/     UINT64       CycleTime;                                                              
/*0x258*/     UINT64       ContextSwitches;                                                        
/*0x260*/     UINT64       SchedulingGroup;                   // struct _KSCHEDULING_GROUP*        
/*0x268*/     ULONG32      FreezeCount;                                                            
/*0x26C*/     ULONG32      KernelTime;                                                             
/*0x270*/     ULONG32      UserTime;                                                               
/*0x274*/     ULONG32      ReadyTime;                                                              
/*0x278*/     UINT64       UserDirectoryTableBase;                                                 
/*0x280*/     UINT8        AddressPolicy;                                                          
/*0x281*/     UINT8        Spare2[71];                                                             
/*0x2C8*/     UINT64       InstrumentationCallback;           // VOID*                             
              union                                           // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                    
/*0x2D0*/         UINT64       SecureHandle;                                                       
                  struct                                      // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                                
/*0x2D0*/             UINT64       SecureProcess : 1;         // 0 BitPosition                     
/*0x2D0*/             UINT64       Unused : 1;                // 1 BitPosition                     
                  }Flags;                                                                          
              }SecureState;                                                                        
          }KPROCESS, *PKPROCESS;                                                                   
                                                                                                   
          typedef struct _EX_FAST_REF      // 3 elements, 0x8 bytes (sizeof) 
          {                                                                  
              union                        // 3 elements, 0x8 bytes (sizeof) 
              {                                                              
/*0x000*/         UINT64       Object;     // VOID*                          
/*0x000*/         UINT64       RefCnt : 4; // 0 BitPosition                  
/*0x000*/         UINT64       Value;                                        
              };                                                             
          }EX_FAST_REF, *PEX_FAST_REF;                                       
                                                                             
          typedef struct _RTL_AVL_TREE // 1 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     UINT64       Root;       // struct _RTL_BALANCED_NODE*     
          }RTL_AVL_TREE, *PRTL_AVL_TREE;                                  
                                                                         
          typedef struct _SE_AUDIT_PROCESS_CREATION_INFO // 1 elements, 0x8 bytes (sizeof)   
          {                                                                                  
/*0x000*/     UINT64       ImageFileName;                // struct _OBJECT_NAME_INFORMATION* 
          }SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO;                                    
                                                                                             
          typedef struct _MMSUPPORT_FLAGS                         // 17 elements, 0x4 bytes (sizeof) 
          {                                                                                          
              union                                               // 2 elements, 0x2 bytes (sizeof)  
              {                                                                                      
                  struct                                          // 2 elements, 0x2 bytes (sizeof)  
                  {                                                                                  
                      struct                                      // 4 elements, 0x1 bytes (sizeof)  
                      {                                                                              
/*0x000*/                 UINT8        WorkingSetType : 3;        // 0 BitPosition                   
/*0x000*/                 UINT8        Reserved0 : 3;             // 3 BitPosition                   
/*0x000*/                 UINT8        MaximumWorkingSetHard : 1; // 6 BitPosition                   
/*0x000*/                 UINT8        MinimumWorkingSetHard : 1; // 7 BitPosition                   
                      };                                                                             
                      struct                                      // 4 elements, 0x1 bytes (sizeof)  
                      {                                                                              
/*0x001*/                 UINT8        SessionMaster : 1;         // 0 BitPosition                   
/*0x001*/                 UINT8        TrimmerState : 2;          // 1 BitPosition                   
/*0x001*/                 UINT8        Reserved : 1;              // 3 BitPosition                   
/*0x001*/                 UINT8        PageStealers : 4;          // 4 BitPosition                   
                      };                                                                             
                  };                                                                                 
/*0x000*/         UINT16       u1;                                                                   
              };                                                                                     
/*0x002*/     UINT8        MemoryPriority;                                                           
              union                                               // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                      
                  struct                                          // 6 elements, 0x1 bytes (sizeof)  
                  {                                                                                  
/*0x003*/             UINT8        WsleDeleted : 1;               // 0 BitPosition                   
/*0x003*/             UINT8        SvmEnabled : 1;                // 1 BitPosition                   
/*0x003*/             UINT8        ForceAge : 1;                  // 2 BitPosition                   
/*0x003*/             UINT8        ForceTrim : 1;                 // 3 BitPosition                   
/*0x003*/             UINT8        NewMaximum : 1;                // 4 BitPosition                   
/*0x003*/             UINT8        CommitReleaseState : 2;        // 5 BitPosition                   
                  };                                                                                 
/*0x003*/         UINT8        u2;                                                                   
              };                                                                                     
          }MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS;                                                       
                                                                                                     
          typedef struct _MMSUPPORT_INSTANCE               // 19 elements, 0xC0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      NextPageColor;                                                      
/*0x004*/     ULONG32      PageFaultCount;                                                     
/*0x008*/     UINT64       TrimmedPageCount;                                                   
/*0x010*/     UINT64       VmWorkingSetList;               // struct _MMWSL_INSTANCE*          
/*0x018*/     struct _LIST_ENTRY WorkingSetExpansionLinks; // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     UINT64       AgeDistribution[8];                                                 
/*0x068*/     UINT64       ExitOutswapGate;                // struct _KGATE*                   
/*0x070*/     UINT64       MinimumWorkingSetSize;                                              
/*0x078*/     UINT64       WorkingSetLeafSize;                                                 
/*0x080*/     UINT64       WorkingSetLeafPrivateSize;                                          
/*0x088*/     UINT64       WorkingSetSize;                                                     
/*0x090*/     UINT64       WorkingSetPrivateSize;                                              
/*0x098*/     UINT64       MaximumWorkingSetSize;                                              
/*0x0A0*/     UINT64       PeakWorkingSetSize;                                                 
/*0x0A8*/     ULONG32      HardFaultCount;                                                     
/*0x0AC*/     UINT16       LastTrimStamp;                                                      
/*0x0AE*/     UINT16       PartitionId;                                                        
/*0x0B0*/     UINT64       SelfmapLock;                                                        
/*0x0B8*/     struct _MMSUPPORT_FLAGS Flags;               // 17 elements, 0x4 bytes (sizeof)  
/*0x0BC*/     UINT8        _PADDING0_[0x4];                                                    
          }MMSUPPORT_INSTANCE, *PMMSUPPORT_INSTANCE;                                           
                                                                                               
          typedef struct _MMSUPPORT_SHARED            // 11 elements, 0x50 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       WorkingSetLock;                                                
/*0x004*/     LONG32       GoodCitizenWaiting;                                            
/*0x008*/     UINT64       ReleasedCommitDebt;                                            
/*0x010*/     UINT64       ResetPagesRepurposedCount;                                     
/*0x018*/     UINT64       WsSwapSupport;             // VOID*                            
/*0x020*/     UINT64       CommitReleaseContext;      // VOID*                            
/*0x028*/     LONG32       WorkingSetCoreLock;                                            
/*0x02C*/     UINT8        _PADDING0_[0x4];                                               
/*0x030*/     UINT64       AccessLog;                 // VOID*                            
/*0x038*/     UINT64       ChargedWslePages;                                              
/*0x040*/     UINT64       ActualWslePages;                                               
/*0x048*/     UINT64       ShadowMapping;             // VOID*                            
          }MMSUPPORT_SHARED, *PMMSUPPORT_SHARED;                                          
                                                                                          
          typedef struct _MMSUPPORT_FULL           // 2 elements, 0x110 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _MMSUPPORT_INSTANCE Instance; // 19 elements, 0xC0 bytes (sizeof) 
/*0x0C0*/     struct _MMSUPPORT_SHARED Shared;     // 11 elements, 0x50 bytes (sizeof) 
          }MMSUPPORT_FULL, *PMMSUPPORT_FULL;                                           
                                                                                       
          typedef struct _PS_PROTECTION        // 4 elements, 0x1 bytes (sizeof) 
          {                                                                      
              union                            // 2 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        Level;                                            
                  struct                       // 3 elements, 0x1 bytes (sizeof) 
                  {                                                              
/*0x000*/             UINT8        Type : 3;   // 0 BitPosition                  
/*0x000*/             UINT8        Audit : 1;  // 3 BitPosition                  
/*0x000*/             UINT8        Signer : 4; // 4 BitPosition                  
                  };                                                             
              };                                                                 
          }PS_PROTECTION, *PPS_PROTECTION;                                       
                                                                                 
          typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES // 7 elements, 0x8 bytes (sizeof) 
          {                                                                                  
              struct                                       // 6 elements, 0x8 bytes (sizeof) 
              {                                                                              
/*0x000*/         UINT64       DelayMs : 30;               // 0 BitPosition                  
/*0x000*/         UINT64       CoalescingWindowMs : 30;    // 30 BitPosition                 
/*0x000*/         UINT64       Reserved : 1;               // 60 BitPosition                 
/*0x000*/         UINT64       NewTimerWheel : 1;          // 61 BitPosition                 
/*0x000*/         UINT64       Retry : 1;                  // 62 BitPosition                 
/*0x000*/         UINT64       Locked : 1;                 // 63 BitPosition                 
              };                                                                             
/*0x000*/     UINT64       All;                                                              
          }PS_INTERLOCKED_TIMER_DELAY_VALUES, *PPS_INTERLOCKED_TIMER_DELAY_VALUES;                                  
                                                                                             
          typedef struct _PS_PROCESS_WAKE_INFORMATION   // 4 elements, 0x30 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       NotificationChannel;                                            
/*0x008*/     ULONG32      WakeCounters[7];                                                
/*0x024*/     struct _JOBOBJECT_WAKE_FILTER WakeFilter; // 2 elements, 0x8 bytes (sizeof)  
/*0x02C*/     ULONG32      NoWakeCounter;                                                  
          }PS_PROCESS_WAKE_INFORMATION, *PPS_PROCESS_WAKE_INFORMATION;                                   
                                                                                           
          typedef struct _EPROCESS                                               // 227 elements, 0x850 bytes (sizeof) 
          {                                                                                                            
/*0x000*/     struct _KPROCESS Pcb;                                              // 45 elements, 0x2D8 bytes (sizeof)  
/*0x2D8*/     struct _EX_PUSH_LOCK ProcessLock;                                  // 7 elements, 0x8 bytes (sizeof)     
/*0x2E0*/     UINT64       UniqueProcessId;                                      // VOID*                              
/*0x2E8*/     struct _LIST_ENTRY ActiveProcessLinks;                             // 2 elements, 0x10 bytes (sizeof)    
/*0x2F8*/     struct _EX_RUNDOWN_REF RundownProtect;                             // 2 elements, 0x8 bytes (sizeof)     
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x300*/         ULONG32      Flags2;                                                                                 
                  struct                                                         // 28 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x300*/             ULONG32      JobNotReallyActive : 1;                       // 0 BitPosition                      
/*0x300*/             ULONG32      AccountingFolded : 1;                         // 1 BitPosition                      
/*0x300*/             ULONG32      NewProcessReported : 1;                       // 2 BitPosition                      
/*0x300*/             ULONG32      ExitProcessReported : 1;                      // 3 BitPosition                      
/*0x300*/             ULONG32      ReportCommitChanges : 1;                      // 4 BitPosition                      
/*0x300*/             ULONG32      LastReportMemory : 1;                         // 5 BitPosition                      
/*0x300*/             ULONG32      ForceWakeCharge : 1;                          // 6 BitPosition                      
/*0x300*/             ULONG32      CrossSessionCreate : 1;                       // 7 BitPosition                      
/*0x300*/             ULONG32      NeedsHandleRundown : 1;                       // 8 BitPosition                      
/*0x300*/             ULONG32      RefTraceEnabled : 1;                          // 9 BitPosition                      
/*0x300*/             ULONG32      PicoCreated : 1;                              // 10 BitPosition                     
/*0x300*/             ULONG32      EmptyJobEvaluated : 1;                        // 11 BitPosition                     
/*0x300*/             ULONG32      DefaultPagePriority : 3;                      // 12 BitPosition                     
/*0x300*/             ULONG32      PrimaryTokenFrozen : 1;                       // 15 BitPosition                     
/*0x300*/             ULONG32      ProcessVerifierTarget : 1;                    // 16 BitPosition                     
/*0x300*/             ULONG32      RestrictSetThreadContext : 1;                 // 17 BitPosition                     
/*0x300*/             ULONG32      AffinityPermanent : 1;                        // 18 BitPosition                     
/*0x300*/             ULONG32      AffinityUpdateEnable : 1;                     // 19 BitPosition                     
/*0x300*/             ULONG32      PropagateNode : 1;                            // 20 BitPosition                     
/*0x300*/             ULONG32      ExplicitAffinity : 1;                         // 21 BitPosition                     
/*0x300*/             ULONG32      ProcessExecutionState : 2;                    // 22 BitPosition                     
/*0x300*/             ULONG32      EnableReadVmLogging : 1;                      // 24 BitPosition                     
/*0x300*/             ULONG32      EnableWriteVmLogging : 1;                     // 25 BitPosition                     
/*0x300*/             ULONG32      FatalAccessTerminationRequested : 1;          // 26 BitPosition                     
/*0x300*/             ULONG32      DisableSystemAllowedCpuSet : 1;               // 27 BitPosition                     
/*0x300*/             ULONG32      ProcessStateChangeRequest : 2;                // 28 BitPosition                     
/*0x300*/             ULONG32      ProcessStateChangeInProgress : 1;             // 30 BitPosition                     
/*0x300*/             ULONG32      InPrivate : 1;                                // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x304*/         ULONG32      Flags;                                                                                  
                  struct                                                         // 29 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x304*/             ULONG32      CreateReported : 1;                           // 0 BitPosition                      
/*0x304*/             ULONG32      NoDebugInherit : 1;                           // 1 BitPosition                      
/*0x304*/             ULONG32      ProcessExiting : 1;                           // 2 BitPosition                      
/*0x304*/             ULONG32      ProcessDelete : 1;                            // 3 BitPosition                      
/*0x304*/             ULONG32      ManageExecutableMemoryWrites : 1;             // 4 BitPosition                      
/*0x304*/             ULONG32      VmDeleted : 1;                                // 5 BitPosition                      
/*0x304*/             ULONG32      OutswapEnabled : 1;                           // 6 BitPosition                      
/*0x304*/             ULONG32      Outswapped : 1;                               // 7 BitPosition                      
/*0x304*/             ULONG32      FailFastOnCommitFail : 1;                     // 8 BitPosition                      
/*0x304*/             ULONG32      Wow64VaSpace4Gb : 1;                          // 9 BitPosition                      
/*0x304*/             ULONG32      AddressSpaceInitialized : 2;                  // 10 BitPosition                     
/*0x304*/             ULONG32      SetTimerResolution : 1;                       // 12 BitPosition                     
/*0x304*/             ULONG32      BreakOnTermination : 1;                       // 13 BitPosition                     
/*0x304*/             ULONG32      DeprioritizeViews : 1;                        // 14 BitPosition                     
/*0x304*/             ULONG32      WriteWatch : 1;                               // 15 BitPosition                     
/*0x304*/             ULONG32      ProcessInSession : 1;                         // 16 BitPosition                     
/*0x304*/             ULONG32      OverrideAddressSpace : 1;                     // 17 BitPosition                     
/*0x304*/             ULONG32      HasAddressSpace : 1;                          // 18 BitPosition                     
/*0x304*/             ULONG32      LaunchPrefetched : 1;                         // 19 BitPosition                     
/*0x304*/             ULONG32      Background : 1;                               // 20 BitPosition                     
/*0x304*/             ULONG32      VmTopDown : 1;                                // 21 BitPosition                     
/*0x304*/             ULONG32      ImageNotifyDone : 1;                          // 22 BitPosition                     
/*0x304*/             ULONG32      PdeUpdateNeeded : 1;                          // 23 BitPosition                     
/*0x304*/             ULONG32      VdmAllowed : 1;                               // 24 BitPosition                     
/*0x304*/             ULONG32      ProcessRundown : 1;                           // 25 BitPosition                     
/*0x304*/             ULONG32      ProcessInserted : 1;                          // 26 BitPosition                     
/*0x304*/             ULONG32      DefaultIoPriority : 3;                        // 27 BitPosition                     
/*0x304*/             ULONG32      ProcessSelfDelete : 1;                        // 30 BitPosition                     
/*0x304*/             ULONG32      SetTimerResolutionLink : 1;                   // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x308*/     union _LARGE_INTEGER CreateTime;                                   // 4 elements, 0x8 bytes (sizeof)     
/*0x310*/     UINT64       ProcessQuotaUsage[2];                                                                       
/*0x320*/     UINT64       ProcessQuotaPeak[2];                                                                        
/*0x330*/     UINT64       PeakVirtualSize;                                                                            
/*0x338*/     UINT64       VirtualSize;                                                                                
/*0x340*/     struct _LIST_ENTRY SessionProcessLinks;                            // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 3 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
/*0x350*/         UINT64       ExceptionPortData;                                // VOID*                              
/*0x350*/         UINT64       ExceptionPortValue;                                                                     
/*0x350*/         UINT64       ExceptionPortState : 3;                           // 0 BitPosition                      
              };                                                                                                       
/*0x358*/     struct _EX_FAST_REF Token;                                         // 3 elements, 0x8 bytes (sizeof)     
/*0x360*/     UINT64       MmReserved;                                                                                 
/*0x368*/     struct _EX_PUSH_LOCK AddressCreationLock;                          // 7 elements, 0x8 bytes (sizeof)     
/*0x370*/     struct _EX_PUSH_LOCK PageTableCommitmentLock;                      // 7 elements, 0x8 bytes (sizeof)     
/*0x378*/     UINT64       RotateInProgress;                                     // struct _ETHREAD*                   
/*0x380*/     UINT64       ForkInProgress;                                       // struct _ETHREAD*                   
/*0x388*/     UINT64       CommitChargeJob;                                      // struct _EJOB*                      
/*0x390*/     struct _RTL_AVL_TREE CloneRoot;                                    // 1 elements, 0x8 bytes (sizeof)     
/*0x398*/     UINT64       NumberOfPrivatePages;                                                                       
/*0x3A0*/     UINT64       NumberOfLockedPages;                                                                        
/*0x3A8*/     UINT64       Win32Process;                                         // VOID*                              
/*0x3B0*/     UINT64       Job;                                                  // struct _EJOB*                      
/*0x3B8*/     UINT64       SectionObject;                                        // VOID*                              
/*0x3C0*/     UINT64       SectionBaseAddress;                                   // VOID*                              
/*0x3C8*/     ULONG32      Cookie;                                                                                     
/*0x3CC*/     UINT8        _PADDING0_[0x4];                                                                            
/*0x3D0*/     UINT64       WorkingSetWatch;                                      // struct _PAGEFAULT_HISTORY*         
/*0x3D8*/     UINT64       Win32WindowStation;                                   // VOID*                              
/*0x3E0*/     UINT64       InheritedFromUniqueProcessId;                         // VOID*                              
/*0x3E8*/     UINT64       Spare0;                                               // VOID*                              
/*0x3F0*/     UINT64       OwnerProcessId;                                                                             
/*0x3F8*/     UINT64       Peb;                                                  // struct _PEB*                       
/*0x400*/     UINT64       Session;                                              // struct _MM_SESSION_SPACE*          
/*0x408*/     UINT64       Spare1;                                               // VOID*                              
/*0x410*/     UINT64       QuotaBlock;                                           // struct _EPROCESS_QUOTA_BLOCK*      
/*0x418*/     UINT64       ObjectTable;                                          // struct _HANDLE_TABLE*              
/*0x420*/     UINT64       DebugPort;                                            // VOID*                              
/*0x428*/     UINT64       WoW64Process;                                         // struct _EWOW64PROCESS*             
/*0x430*/     UINT64       DeviceMap;                                            // VOID*                              
/*0x438*/     UINT64       EtwDataSource;                                        // VOID*                              
/*0x440*/     UINT64       PageDirectoryPte;                                                                           
/*0x448*/     UINT64       ImageFilePointer;                                     // struct _FILE_OBJECT*               
/*0x450*/     UINT8        ImageFileName[15];                                                                          
/*0x45F*/     UINT8        PriorityClass;                                                                              
/*0x460*/     UINT64       SecurityPort;                                         // VOID*                              
/*0x468*/     struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo; // 1 elements, 0x8 bytes (sizeof)     
/*0x470*/     struct _LIST_ENTRY JobLinks;                                       // 2 elements, 0x10 bytes (sizeof)    
/*0x480*/     UINT64       HighestUserAddress;                                   // VOID*                              
/*0x488*/     struct _LIST_ENTRY ThreadListHead;                                 // 2 elements, 0x10 bytes (sizeof)    
/*0x498*/     ULONG32      ActiveThreads;                                                                              
/*0x49C*/     ULONG32      ImagePathHash;                                                                              
/*0x4A0*/     ULONG32      DefaultHardErrorProcessing;                                                                 
/*0x4A4*/     LONG32       LastThreadExitStatus;                                                                       
/*0x4A8*/     struct _EX_FAST_REF PrefetchTrace;                                 // 3 elements, 0x8 bytes (sizeof)     
/*0x4B0*/     UINT64       LockedPagesList;                                      // VOID*                              
/*0x4B8*/     union _LARGE_INTEGER ReadOperationCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4C0*/     union _LARGE_INTEGER WriteOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x4C8*/     union _LARGE_INTEGER OtherOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x4D0*/     union _LARGE_INTEGER ReadTransferCount;                            // 4 elements, 0x8 bytes (sizeof)     
/*0x4D8*/     union _LARGE_INTEGER WriteTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4E0*/     union _LARGE_INTEGER OtherTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4E8*/     UINT64       CommitChargeLimit;                                                                          
/*0x4F0*/     UINT64       CommitCharge;                                                                               
/*0x4F8*/     UINT64       CommitChargePeak;                                                                           
/*0x500*/     struct _MMSUPPORT_FULL Vm;                                         // 2 elements, 0x110 bytes (sizeof)   
/*0x610*/     struct _LIST_ENTRY MmProcessLinks;                                 // 2 elements, 0x10 bytes (sizeof)    
/*0x620*/     ULONG32      ModifiedPageCount;                                                                          
/*0x624*/     LONG32       ExitStatus;                                                                                 
/*0x628*/     struct _RTL_AVL_TREE VadRoot;                                      // 1 elements, 0x8 bytes (sizeof)     
/*0x630*/     UINT64       VadHint;                                              // VOID*                              
/*0x638*/     UINT64       VadCount;                                                                                   
/*0x640*/     UINT64       VadPhysicalPages;                                                                           
/*0x648*/     UINT64       VadPhysicalPagesLimit;                                                                      
/*0x650*/     struct _ALPC_PROCESS_CONTEXT AlpcContext;                          // 3 elements, 0x20 bytes (sizeof)    
/*0x670*/     struct _LIST_ENTRY TimerResolutionLink;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x680*/     UINT64       TimerResolutionStackRecord;                           // struct _PO_DIAG_STACK_RECORD*      
/*0x688*/     ULONG32      RequestedTimerResolution;                                                                   
/*0x68C*/     ULONG32      SmallestTimerResolution;                                                                    
/*0x690*/     union _LARGE_INTEGER ExitTime;                                     // 4 elements, 0x8 bytes (sizeof)     
/*0x698*/     UINT64       InvertedFunctionTable;                                // struct _INVERTED_FUNCTION_TABLE*   
/*0x6A0*/     struct _EX_PUSH_LOCK InvertedFunctionTableLock;                    // 7 elements, 0x8 bytes (sizeof)     
/*0x6A8*/     ULONG32      ActiveThreadsHighWatermark;                                                                 
/*0x6AC*/     ULONG32      LargePrivateVadCount;                                                                       
/*0x6B0*/     struct _EX_PUSH_LOCK ThreadListLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6B8*/     UINT64       WnfContext;                                           // VOID*                              
/*0x6C0*/     UINT64       ServerSilo;                                           // struct _EJOB*                      
/*0x6C8*/     UINT8        SignatureLevel;                                                                             
/*0x6C9*/     UINT8        SectionSignatureLevel;                                                                      
/*0x6CA*/     struct _PS_PROTECTION Protection;                                  // 4 elements, 0x1 bytes (sizeof)     
              struct                                                             // 3 elements, 0x1 bytes (sizeof)     
              {                                                                                                        
/*0x6CB*/         UINT8        HangCount : 3;                                    // 0 BitPosition                      
/*0x6CB*/         UINT8        GhostCount : 3;                                   // 3 BitPosition                      
/*0x6CB*/         UINT8        PrefilterException : 1;                           // 6 BitPosition                      
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x6CC*/         ULONG32      Flags3;                                                                                 
                  struct                                                         // 24 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x6CC*/             ULONG32      Minimal : 1;                                  // 0 BitPosition                      
/*0x6CC*/             ULONG32      ReplacingPageRoot : 1;                        // 1 BitPosition                      
/*0x6CC*/             ULONG32      Crashed : 1;                                  // 2 BitPosition                      
/*0x6CC*/             ULONG32      JobVadsAreTracked : 1;                        // 3 BitPosition                      
/*0x6CC*/             ULONG32      VadTrackingDisabled : 1;                      // 4 BitPosition                      
/*0x6CC*/             ULONG32      AuxiliaryProcess : 1;                         // 5 BitPosition                      
/*0x6CC*/             ULONG32      SubsystemProcess : 1;                         // 6 BitPosition                      
/*0x6CC*/             ULONG32      IndirectCpuSets : 1;                          // 7 BitPosition                      
/*0x6CC*/             ULONG32      RelinquishedCommit : 1;                       // 8 BitPosition                      
/*0x6CC*/             ULONG32      HighGraphicsPriority : 1;                     // 9 BitPosition                      
/*0x6CC*/             ULONG32      CommitFailLogged : 1;                         // 10 BitPosition                     
/*0x6CC*/             ULONG32      ReserveFailLogged : 1;                        // 11 BitPosition                     
/*0x6CC*/             ULONG32      SystemProcess : 1;                            // 12 BitPosition                     
/*0x6CC*/             ULONG32      HideImageBaseAddresses : 1;                   // 13 BitPosition                     
/*0x6CC*/             ULONG32      AddressPolicyFrozen : 1;                      // 14 BitPosition                     
/*0x6CC*/             ULONG32      ProcessFirstResume : 1;                       // 15 BitPosition                     
/*0x6CC*/             ULONG32      ForegroundExternal : 1;                       // 16 BitPosition                     
/*0x6CC*/             ULONG32      ForegroundSystem : 1;                         // 17 BitPosition                     
/*0x6CC*/             ULONG32      HighMemoryPriority : 1;                       // 18 BitPosition                     
/*0x6CC*/             ULONG32      EnableProcessSuspendResumeLogging : 1;        // 19 BitPosition                     
/*0x6CC*/             ULONG32      EnableThreadSuspendResumeLogging : 1;         // 20 BitPosition                     
/*0x6CC*/             ULONG32      SecurityDomainChanged : 1;                    // 21 BitPosition                     
/*0x6CC*/             ULONG32      SecurityFreezeComplete : 1;                   // 22 BitPosition                     
/*0x6CC*/             ULONG32      VmProcessorHost : 1;                          // 23 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x6D0*/     LONG32       DeviceAsid;                                                                                 
/*0x6D4*/     UINT8        _PADDING1_[0x4];                                                                            
/*0x6D8*/     UINT64       SvmData;                                              // VOID*                              
/*0x6E0*/     struct _EX_PUSH_LOCK SvmProcessLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6E8*/     UINT64       SvmLock;                                                                                    
/*0x6F0*/     struct _LIST_ENTRY SvmProcessDeviceListHead;                       // 2 elements, 0x10 bytes (sizeof)    
/*0x700*/     UINT64       LastFreezeInterruptTime;                                                                    
/*0x708*/     UINT64       DiskCounters;                                         // struct _PROCESS_DISK_COUNTERS*     
/*0x710*/     UINT64       PicoContext;                                          // VOID*                              
/*0x718*/     UINT64       EnclaveTable;                                         // VOID*                              
/*0x720*/     UINT64       EnclaveNumber;                                                                              
/*0x728*/     struct _EX_PUSH_LOCK EnclaveLock;                                  // 7 elements, 0x8 bytes (sizeof)     
/*0x730*/     ULONG32      HighPriorityFaultsAllowed;                                                                  
/*0x734*/     UINT8        _PADDING2_[0x4];                                                                            
/*0x738*/     UINT64       EnergyContext;                                        // struct _PO_PROCESS_ENERGY_CONTEXT* 
/*0x740*/     UINT64       VmContext;                                            // VOID*                              
/*0x748*/     UINT64       SequenceNumber;                                                                             
/*0x750*/     UINT64       CreateInterruptTime;                                                                        
/*0x758*/     UINT64       CreateUnbiasedInterruptTime;                                                                
/*0x760*/     UINT64       TotalUnbiasedFrozenTime;                                                                    
/*0x768*/     UINT64       LastAppStateUpdateTime;                                                                     
              struct                                                             // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
/*0x770*/         UINT64       LastAppStateUptime : 61;                          // 0 BitPosition                      
/*0x770*/         UINT64       LastAppState : 3;                                 // 61 BitPosition                     
              };                                                                                                       
/*0x778*/     UINT64       SharedCommitCharge;                                                                         
/*0x780*/     struct _EX_PUSH_LOCK SharedCommitLock;                             // 7 elements, 0x8 bytes (sizeof)     
/*0x788*/     struct _LIST_ENTRY SharedCommitLinks;                              // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                        
                  struct                                                         // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                    
/*0x798*/             UINT64       AllowedCpuSets;                                                                     
/*0x7A0*/             UINT64       DefaultCpuSets;                                                                     
                  };                                                                                                   
                  struct                                                         // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                    
/*0x798*/             UINT64       AllowedCpuSetsIndirect;                       // UINT64*                            
/*0x7A0*/             UINT64       DefaultCpuSetsIndirect;                       // UINT64*                            
                  };                                                                                                   
              };                                                                                                       
/*0x7A8*/     UINT64       DiskIoAttribution;                                    // VOID*                              
/*0x7B0*/     UINT64       DxgProcess;                                           // VOID*                              
/*0x7B8*/     ULONG32      Win32KFilterSet;                                                                            
/*0x7BC*/     UINT8        _PADDING3_[0x4];                                                                            
/*0x7C0*/     union _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;        // 7 elements, 0x8 bytes (sizeof)     
/*0x7C8*/     ULONG32      KTimerSets;                                                                                 
/*0x7CC*/     ULONG32      KTimer2Sets;                                                                                
/*0x7D0*/     ULONG32      ThreadTimerSets;                                                                            
/*0x7D4*/     UINT8        _PADDING4_[0x4];                                                                            
/*0x7D8*/     UINT64       VirtualTimerListLock;                                                                       
/*0x7E0*/     struct _LIST_ENTRY VirtualTimerListHead;                           // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                        
/*0x7F0*/         struct _WNF_STATE_NAME WakeChannel;                            // 1 elements, 0x8 bytes (sizeof)     
/*0x7F0*/         struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;                  // 4 elements, 0x30 bytes (sizeof)    
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x820*/         ULONG32      MitigationFlags;                                                                        
                  struct                                                         // 32 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x820*/             ULONG32      ControlFlowGuardEnabled : 1;                  // 0 BitPosition                      
/*0x820*/             ULONG32      ControlFlowGuardExportSuppressionEnabled : 1; // 1 BitPosition                      
/*0x820*/             ULONG32      ControlFlowGuardStrict : 1;                   // 2 BitPosition                      
/*0x820*/             ULONG32      DisallowStrippedImages : 1;                   // 3 BitPosition                      
/*0x820*/             ULONG32      ForceRelocateImages : 1;                      // 4 BitPosition                      
/*0x820*/             ULONG32      HighEntropyASLREnabled : 1;                   // 5 BitPosition                      
/*0x820*/             ULONG32      StackRandomizationDisabled : 1;               // 6 BitPosition                      
/*0x820*/             ULONG32      ExtensionPointDisable : 1;                    // 7 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCode : 1;                       // 8 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCodeAllowOptOut : 1;            // 9 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCodeAllowRemoteDowngrade : 1;   // 10 BitPosition                     
/*0x820*/             ULONG32      AuditDisableDynamicCode : 1;                  // 11 BitPosition                     
/*0x820*/             ULONG32      DisallowWin32kSystemCalls : 1;                // 12 BitPosition                     
/*0x820*/             ULONG32      AuditDisallowWin32kSystemCalls : 1;           // 13 BitPosition                     
/*0x820*/             ULONG32      EnableFilteredWin32kAPIs : 1;                 // 14 BitPosition                     
/*0x820*/             ULONG32      AuditFilteredWin32kAPIs : 1;                  // 15 BitPosition                     
/*0x820*/             ULONG32      DisableNonSystemFonts : 1;                    // 16 BitPosition                     
/*0x820*/             ULONG32      AuditNonSystemFontLoading : 1;                // 17 BitPosition                     
/*0x820*/             ULONG32      PreferSystem32Images : 1;                     // 18 BitPosition                     
/*0x820*/             ULONG32      ProhibitRemoteImageMap : 1;                   // 19 BitPosition                     
/*0x820*/             ULONG32      AuditProhibitRemoteImageMap : 1;              // 20 BitPosition                     
/*0x820*/             ULONG32      ProhibitLowILImageMap : 1;                    // 21 BitPosition                     
/*0x820*/             ULONG32      AuditProhibitLowILImageMap : 1;               // 22 BitPosition                     
/*0x820*/             ULONG32      SignatureMitigationOptIn : 1;                 // 23 BitPosition                     
/*0x820*/             ULONG32      AuditBlockNonMicrosoftBinaries : 1;           // 24 BitPosition                     
/*0x820*/             ULONG32      AuditBlockNonMicrosoftBinariesAllowStore : 1; // 25 BitPosition                     
/*0x820*/             ULONG32      LoaderIntegrityContinuityEnabled : 1;         // 26 BitPosition                     
/*0x820*/             ULONG32      AuditLoaderIntegrityContinuity : 1;           // 27 BitPosition                     
/*0x820*/             ULONG32      EnableModuleTamperingProtection : 1;          // 28 BitPosition                     
/*0x820*/             ULONG32      EnableModuleTamperingProtectionNoInherit : 1; // 29 BitPosition                     
/*0x820*/             ULONG32      RestrictIndirectBranchPrediction : 1;         // 30 BitPosition                     
/*0x820*/             ULONG32      IsolateSecurityDomain : 1;                    // 31 BitPosition                     
                  }MitigationFlagsValues;                                                                              
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x824*/         ULONG32      MitigationFlags2;                                                                       
                  struct                                                         // 15 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x824*/             ULONG32      EnableExportAddressFilter : 1;                // 0 BitPosition                      
/*0x824*/             ULONG32      AuditExportAddressFilter : 1;                 // 1 BitPosition                      
/*0x824*/             ULONG32      EnableExportAddressFilterPlus : 1;            // 2 BitPosition                      
/*0x824*/             ULONG32      AuditExportAddressFilterPlus : 1;             // 3 BitPosition                      
/*0x824*/             ULONG32      EnableRopStackPivot : 1;                      // 4 BitPosition                      
/*0x824*/             ULONG32      AuditRopStackPivot : 1;                       // 5 BitPosition                      
/*0x824*/             ULONG32      EnableRopCallerCheck : 1;                     // 6 BitPosition                      
/*0x824*/             ULONG32      AuditRopCallerCheck : 1;                      // 7 BitPosition                      
/*0x824*/             ULONG32      EnableRopSimExec : 1;                         // 8 BitPosition                      
/*0x824*/             ULONG32      AuditRopSimExec : 1;                          // 9 BitPosition                      
/*0x824*/             ULONG32      EnableImportAddressFilter : 1;                // 10 BitPosition                     
/*0x824*/             ULONG32      AuditImportAddressFilter : 1;                 // 11 BitPosition                     
/*0x824*/             ULONG32      DisablePageCombine : 1;                       // 12 BitPosition                     
/*0x824*/             ULONG32      SpeculativeStoreBypassDisable : 1;            // 13 BitPosition                     
/*0x824*/             ULONG32      CetShadowStacks : 1;                          // 14 BitPosition                     
                  }MitigationFlags2Values;                                                                             
              };                                                                                                       
/*0x828*/     UINT64       PartitionObject;                                      // VOID*                              
/*0x830*/     UINT64       SecurityDomain;                                                                             
/*0x838*/     UINT64       ParentSecurityDomain;                                                                       
/*0x840*/     UINT64       CoverageSamplerContext;                               // VOID*                              
/*0x848*/     UINT64       MmHotPatchContext;                                    // VOID*                              
          }EPROCESS, *PEPROCESS;                                                                                       
                                                                                                                       
typedef struct _EPROCESS_QUOTA_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;                                  
                                                                       
          typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE // 2 elements, 0x6C bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      GlobalDeviceMap;                                              
/*0x004*/     ULONG32      LocalDeviceCount[26];                                         
          }OBP_SYSTEM_DOS_DEVICE_STATE, *POBP_SYSTEM_DOS_DEVICE_STATE;                                   
                                                                                         
          typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE // 3 elements, 0x260 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _LIST_ENTRY HashBuckets[37];                                          
/*0x250*/     struct _EX_PUSH_LOCK Lock;               // 7 elements, 0x8 bytes (sizeof)   
/*0x258*/     ULONG32      NumberOfPrivateSpaces;                                          
/*0x25C*/     UINT8        _PADDING0_[0x4];                                                
          }OBJECT_NAMESPACE_LOOKUPTABLE, *POBJECT_NAMESPACE_LOOKUPTABLE;                                    
                                                                                           
          typedef struct _OBP_SILODRIVERSTATE                                   // 4 elements, 0x2E0 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     UINT64       SystemDeviceMap;                                     // struct _DEVICE_MAP*              
/*0x008*/     struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;         // 2 elements, 0x6C bytes (sizeof)  
/*0x074*/     UINT8        _PADDING0_[0x4];                                                                         
/*0x078*/     struct _EX_PUSH_LOCK DeviceMapLock;                               // 7 elements, 0x8 bytes (sizeof)   
/*0x080*/     struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable; // 3 elements, 0x260 bytes (sizeof) 
          }OBP_SILODRIVERSTATE, *POBP_SILODRIVERSTATE;                                                              
                                                                                                                    
          typedef struct _SEP_SILOSTATE                   // 6 elements, 0x30 bytes (sizeof)       
          {                                                                                        
/*0x000*/     UINT64       SystemLogonSession;            // struct _SEP_LOGON_SESSION_REFERENCES* 
/*0x008*/     UINT64       AnonymousLogonSession;         // struct _SEP_LOGON_SESSION_REFERENCES* 
/*0x010*/     UINT64       AnonymousLogonToken;           // VOID*                                 
/*0x018*/     UINT64       AnonymousLogonTokenNoEveryone; // VOID*                                 
/*0x020*/     UINT64       UncSystemPaths;                // struct _UNICODE_STRING*               
/*0x028*/     UINT64       NgenPaths;                     // struct _CI_NGEN_PATHS*                
          }SEP_SILOSTATE, *PSEP_SILOSTATE;                                                         
                                                                                                   
          typedef struct _SEP_RM_LSA_CONNECTION_STATE         // 11 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       LsaProcessHandle;                  // VOID*                            
/*0x008*/     UINT64       LsaCommandPortHandle;              // VOID*                            
/*0x010*/     UINT64       SepRmThreadHandle;                 // VOID*                            
/*0x018*/     UINT64       RmCommandPortHandle;               // VOID*                            
/*0x020*/     UINT64       RmCommandServerPortHandle;         // VOID*                            
/*0x028*/     UINT64       LsaCommandPortSectionHandle;       // VOID*                            
/*0x030*/     union _LARGE_INTEGER LsaCommandPortSectionSize; // 4 elements, 0x8 bytes (sizeof)   
/*0x038*/     UINT64       LsaViewPortMemory;                 // VOID*                            
/*0x040*/     UINT64       RmViewPortMemory;                  // VOID*                            
/*0x048*/     LONG32       LsaCommandPortMemoryDelta;                                             
/*0x04C*/     UINT8        LsaCommandPortActive;                                                  
/*0x04D*/     UINT8        _PADDING0_[0x3];                                                       
          }SEP_RM_LSA_CONNECTION_STATE, *PSEP_RM_LSA_CONNECTION_STATE;                                    
                                                                                                  
          typedef struct _WNF_LOCK           // 1 elements, 0x8 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _EX_PUSH_LOCK PushLock; // 7 elements, 0x8 bytes (sizeof) 
          }WNF_LOCK, *PWNF_LOCK;                                               
                                                                               
          typedef struct _WNF_SILODRIVERSTATE                   // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       ScopeMap;                            // struct _WNF_SCOPE_MAP*          
/*0x008*/     UINT64       PermanentNameStoreRootKey;           // VOID*                           
/*0x010*/     UINT64       PersistentNameStoreRootKey;          // VOID*                           
/*0x018*/     INT64        PermanentNameSequenceNumber;                                            
/*0x020*/     struct _WNF_LOCK PermanentNameSequenceNumberLock; // 1 elements, 0x8 bytes (sizeof)  
/*0x028*/     INT64        PermanentNameSequenceNumberPool;                                        
/*0x030*/     INT64        RuntimeNameSequenceNumber;                                              
          }WNF_SILODRIVERSTATE, *PWNF_SILODRIVERSTATE;                                             
                                                                                                   
          typedef struct _ESERVERSILO_GLOBALS                     // 24 elements, 0x480 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _OBP_SILODRIVERSTATE ObSiloState;            // 4 elements, 0x2E0 bytes (sizeof)  
/*0x2E0*/     struct _SEP_SILOSTATE SeSiloState;                  // 6 elements, 0x30 bytes (sizeof)   
/*0x310*/     struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;  // 11 elements, 0x50 bytes (sizeof)  
/*0x360*/     UINT64       EtwSiloState;                          // struct _ETW_SILODRIVERSTATE*      
/*0x368*/     UINT64       MiSessionLeaderProcess;                // struct _EPROCESS*                 
/*0x370*/     UINT64       ExpDefaultErrorPortProcess;            // struct _EPROCESS*                 
/*0x378*/     UINT64       ExpDefaultErrorPort;                   // VOID*                             
/*0x380*/     ULONG32      HardErrorState;                                                             
/*0x384*/     UINT8        _PADDING0_[0x4];                                                            
/*0x388*/     struct _WNF_SILODRIVERSTATE WnfSiloState;           // 7 elements, 0x38 bytes (sizeof)   
/*0x3C0*/     struct _DBGK_SILOSTATE DbgkSiloState;               // 4 elements, 0x20 bytes (sizeof)   
/*0x3E0*/     struct _UNICODE_STRING PsProtectedCurrentDirectory; // 3 elements, 0x10 bytes (sizeof)   
/*0x3F0*/     struct _UNICODE_STRING PsProtectedEnvironment;      // 3 elements, 0x10 bytes (sizeof)   
/*0x400*/     UINT64       ApiSetSection;                         // VOID*                             
/*0x408*/     UINT64       ApiSetSchema;                          // VOID*                             
/*0x410*/     UINT8        OneCoreForwardersEnabled;                                                   
/*0x411*/     UINT8        _PADDING1_[0x7];                                                            
/*0x418*/     struct _UNICODE_STRING NtSystemRoot;                // 3 elements, 0x10 bytes (sizeof)   
/*0x428*/     struct _UNICODE_STRING SiloRootDirectoryName;       // 3 elements, 0x10 bytes (sizeof)   
/*0x438*/     UINT64       Storage;                               // struct _PSP_STORAGE*              
/*0x440*/     enum _SERVERSILO_STATE State;                                                            
/*0x444*/     LONG32       ExitStatus;                                                                 
/*0x448*/     UINT64       DeleteEvent;                           // struct _KEVENT*                   
/*0x450*/     UINT64       UserSharedData;                        // struct _SILO_USER_SHARED_DATA*    
/*0x458*/     UINT64       UserSharedSection;                     // VOID*                             
/*0x460*/     struct _WORK_QUEUE_ITEM TerminateWorkItem;          // 3 elements, 0x20 bytes (sizeof)   
          }ESERVERSILO_GLOBALS, *PESERVERSILO_GLOBALS;                                                 
                                                                                                       
          typedef union _KWAIT_STATUS_REGISTER // 7 elements, 0x1 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Flags;                                                
              struct                           // 6 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        State : 3;      // 0 BitPosition                  
/*0x000*/         UINT8        Affinity : 1;   // 3 BitPosition                  
/*0x000*/         UINT8        Priority : 1;   // 4 BitPosition                  
/*0x000*/         UINT8        Apc : 1;        // 5 BitPosition                  
/*0x000*/         UINT8        UserApc : 1;    // 6 BitPosition                  
/*0x000*/         UINT8        Alert : 1;      // 7 BitPosition                  
              };                                                                 
          }KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER;                                  
                                                                                 
          typedef struct _KAPC_STATE                          // 9 elements, 0x30 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY ApcListHead[2];                                                 
/*0x020*/     UINT64       Process;                           // struct _KPROCESS*               
              union                                           // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                  
/*0x028*/         UINT8        InProgressFlags;                                                  
                  struct                                      // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                              
/*0x028*/             UINT8        KernelApcInProgress : 1;   // 0 BitPosition                   
/*0x028*/             UINT8        SpecialApcInProgress : 1;  // 1 BitPosition                   
                  };                                                                             
              };                                                                                 
/*0x029*/     UINT8        KernelApcPending;                                                     
              union                                           // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                  
/*0x02A*/         UINT8        UserApcPendingAll;                                                
                  struct                                      // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                              
/*0x02A*/             UINT8        SpecialUserApcPending : 1; // 0 BitPosition                   
/*0x02A*/             UINT8        UserApcPending : 1;        // 1 BitPosition                   
                  };                                                                             
              };                                                                                 
          }KAPC_STATE, *PKAPC_STATE;                                                             
                                                                                                 
          typedef union _ULARGE_INTEGER  // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              }u;                                                          
/*0x000*/     UINT64       QuadPart;                                       
          }ULARGE_INTEGER, *PULARGE_INTEGER;                                  
                                                                           
          typedef struct _KTIMER                 // 6 elements, 0x40 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     union _ULARGE_INTEGER DueTime;     // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY TimerListEntry; // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       Dpc;                  // struct _KDPC*                    
/*0x038*/     ULONG32      Processor;                                                
/*0x03C*/     ULONG32      Period;                                                   
          }KTIMER, *PKTIMER;                                                         
                                                                                     
          typedef struct _KWAIT_BLOCK             // 9 elements, 0x30 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY WaitListEntry;   // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        WaitType;                                                 
/*0x011*/     UINT8        BlockState;                                               
/*0x012*/     UINT16       WaitKey;                                                  
/*0x014*/     LONG32       SpareLong;                                                
              union                               // 2 elements, 0x8 bytes (sizeof)  
              {                                                                      
/*0x018*/         UINT64       Thread;            // struct _KTHREAD*                
/*0x018*/         UINT64       NotificationQueue; // struct _KQUEUE*                 
              };                                                                     
/*0x020*/     UINT64       Object;                // VOID*                           
/*0x028*/     UINT64       SparePtr;              // VOID*                           
          }KWAIT_BLOCK, *PKWAIT_BLOCK;                                               
                                                                                     
          typedef struct _KAPC                     // 17 elements, 0x58 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT8        Type;                                                       
/*0x001*/     UINT8        SpareByte0;                                                 
/*0x002*/     UINT8        Size;                                                       
/*0x003*/     UINT8        SpareByte1;                                                 
/*0x004*/     ULONG32      SpareLong0;                                                 
/*0x008*/     UINT64       Thread;                 // struct _KTHREAD*                 
/*0x010*/     struct _LIST_ENTRY ApcListEntry;     // 2 elements, 0x10 bytes (sizeof)  
              union                                // 2 elements, 0x18 bytes (sizeof)  
              {                                                                        
                  struct                           // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                    
/*0x020*/             UINT64       KernelRoutine;  // FUNCT_00EF_0809_KernelRoutine*   
/*0x028*/             UINT64       RundownRoutine; // FUNCT_00EF_0817_RundownRoutine*  
/*0x030*/             UINT64       NormalRoutine;  // FUNCT_00EF_0812_NormalRoutine*   
                  };                                                                   
/*0x020*/         UINT64       Reserved[3];        // VOID*                            
              };                                                                       
/*0x038*/     UINT64       NormalContext;          // VOID*                            
/*0x040*/     UINT64       SystemArgument1;        // VOID*                            
/*0x048*/     UINT64       SystemArgument2;        // VOID*                            
/*0x050*/     CHAR         ApcStateIndex;                                              
/*0x051*/     CHAR         ApcMode;                                                    
/*0x052*/     UINT8        Inserted;                                                   
/*0x053*/     UINT8        _PADDING0_[0x5];                                            
          }KAPC, *PKAPC;                                                               
                                                                                       
          typedef struct _KLOCK_ENTRY_LOCK_STATE              // 8 elements, 0x10 bytes (sizeof) 
          {                                                                                      
              union                                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                  
                  struct                                      // 4 elements, 0x8 bytes (sizeof)  
                  {                                                                              
/*0x000*/             UINT64       CrossThreadReleasable : 1; // 0 BitPosition                   
/*0x000*/             UINT64       Busy : 1;                  // 1 BitPosition                   
/*0x000*/             UINT64       Reserved : 61;             // 2 BitPosition                   
/*0x000*/             UINT64       InTree : 1;                // 63 BitPosition                  
                  };                                                                             
/*0x000*/         UINT64       LockState;                     // VOID*                           
              };                                                                                 
              union                                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                  
/*0x008*/         UINT64       SessionState;                  // VOID*                           
                  struct                                      // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                              
/*0x008*/             ULONG32      SessionId;                                                    
/*0x00C*/             ULONG32      SessionPad;                                                   
                  };                                                                             
              };                                                                                 
          }KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE;                                     
                                                                                                 
          typedef union _KLOCK_ENTRY_BOOST_BITMAP               // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      AllFields;                                                             
              struct                                            // 4 elements, 0x4 bytes (sizeof) 
              {                                                                                   
/*0x000*/         ULONG32      AllBoosts : 17;                  // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved : 15;                   // 17 BitPosition                 
/*0x000*/         UINT16       CpuBoostsBitmap : 15;            // 0 BitPosition                  
/*0x000*/         UINT16       IoBoost : 1;                     // 15 BitPosition                 
              };                                                                                  
              struct                                            // 3 elements, 0x2 bytes (sizeof) 
              {                                                                                   
/*0x002*/         UINT16       IoQoSBoost : 1;                  // 0 BitPosition                  
/*0x002*/         UINT16       IoNormalPriorityWaiterCount : 8; // 1 BitPosition                  
/*0x002*/         UINT16       IoQoSWaiterCount : 7;            // 9 BitPosition                  
              };                                                                                  
          }KLOCK_ENTRY_BOOST_BITMAP, *PKLOCK_ENTRY_BOOST_BITMAP;                                  
                                                                                                  
          typedef struct _KLOCK_ENTRY                                // 31 elements, 0x60 bytes (sizeof) 
          {                                                                                              
              union                                                  // 2 elements, 0x18 bytes (sizeof)  
              {                                                                                          
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;                // 6 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY FreeListEntry;           // 1 elements, 0x8 bytes (sizeof)   
              };                                                                                         
              union                                                  // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                          
/*0x018*/         ULONG32      EntryFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x018*/             UINT8        EntryOffset;                                                          
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x019*/                 UINT8        ThreadLocalFlags;                                                 
                          struct                                     // 2 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x019*/                     UINT8        WaitingBit : 1;           // 0 BitPosition                    
/*0x019*/                     UINT8        Spare0 : 7;               // 1 BitPosition                    
                          };                                                                             
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x01A*/                 UINT8        AcquiredByte;                                                     
/*0x01A*/                 UINT8        AcquiredBit : 1;              // 0 BitPosition                    
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x01B*/                 UINT8        CrossThreadFlags;                                                 
                          struct                                     // 4 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x01B*/                     UINT8        HeadNodeBit : 1;          // 0 BitPosition                    
/*0x01B*/                     UINT8        IoPriorityBit : 1;        // 1 BitPosition                    
/*0x01B*/                     UINT8        IoQoSWaiter : 1;          // 2 BitPosition                    
/*0x01B*/                     UINT8        Spare1 : 5;               // 3 BitPosition                    
                          };                                                                             
                      };                                                                                 
                  };                                                                                     
                  struct                                             // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x018*/             ULONG32      StaticState : 8;                  // 0 BitPosition                    
/*0x018*/             ULONG32      AllFlags : 24;                    // 8 BitPosition                    
                  };                                                                                     
              };                                                                                         
/*0x01C*/     ULONG32      SpareFlags;                                                                   
              union                                                  // 3 elements, 0x10 bytes (sizeof)  
              {                                                                                          
/*0x020*/         struct _KLOCK_ENTRY_LOCK_STATE LockState;          // 8 elements, 0x10 bytes (sizeof)  
/*0x020*/         UINT64       LockUnsafe;                           // VOID*                            
                  struct                                             // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                      
/*0x020*/             UINT8        CrossThreadReleasableAndBusyByte;                                     
/*0x021*/             UINT8        Reserved[6];                                                          
/*0x027*/             UINT8        InTreeByte;                                                           
                      union                                          // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                                  
/*0x028*/                 UINT64       SessionState;                 // VOID*                            
                          struct                                     // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                              
/*0x028*/                     ULONG32      SessionId;                                                    
/*0x02C*/                     ULONG32      SessionPad;                                                   
                          };                                                                             
                      };                                                                                 
                  };                                                                                     
              };                                                                                         
              union                                                  // 2 elements, 0x20 bytes (sizeof)  
              {                                                                                          
                  struct                                             // 2 elements, 0x20 bytes (sizeof)  
                  {                                                                                      
/*0x030*/             struct _RTL_RB_TREE OwnerTree;                 // 3 elements, 0x10 bytes (sizeof)  
/*0x040*/             struct _RTL_RB_TREE WaiterTree;                // 3 elements, 0x10 bytes (sizeof)  
                  };                                                                                     
/*0x030*/         CHAR         CpuPriorityKey;                                                           
              };                                                                                         
/*0x050*/     UINT64       EntryLock;                                                                    
/*0x058*/     union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;           // 8 elements, 0x4 bytes (sizeof)   
/*0x05C*/     ULONG32      SparePad;                                                                     
          }KLOCK_ENTRY, *PKLOCK_ENTRY;                                                                   
                                                                                                         
          typedef struct _KTHREAD                                            // 185 elements, 0x5F0 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     struct _DISPATCHER_HEADER Header;                              // 58 elements, 0x18 bytes (sizeof)   
/*0x018*/     UINT64       SListFaultAddress;                                // VOID*                              
/*0x020*/     UINT64       QuantumTarget;                                                                          
/*0x028*/     UINT64       InitialStack;                                     // VOID*                              
/*0x030*/     UINT64       StackLimit;                                       // VOID*                              
/*0x038*/     UINT64       StackBase;                                        // VOID*                              
/*0x040*/     UINT64       ThreadLock;                                                                             
/*0x048*/     UINT64       CycleTime;                                                                              
/*0x050*/     ULONG32      CurrentRunTime;                                                                         
/*0x054*/     ULONG32      ExpectedRunTime;                                                                        
/*0x058*/     UINT64       KernelStack;                                      // VOID*                              
/*0x060*/     UINT64       StateSaveArea;                                    // struct _XSAVE_FORMAT*              
/*0x068*/     UINT64       SchedulingGroup;                                  // struct _KSCHEDULING_GROUP*         
/*0x070*/     union _KWAIT_STATUS_REGISTER WaitRegister;                     // 7 elements, 0x1 bytes (sizeof)     
/*0x071*/     UINT8        Running;                                                                                
/*0x072*/     UINT8        Alerted[2];                                                                             
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 22 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x074*/             ULONG32      AutoBoostActive : 1;                      // 0 BitPosition                      
/*0x074*/             ULONG32      ReadyTransition : 1;                      // 1 BitPosition                      
/*0x074*/             ULONG32      WaitNext : 1;                             // 2 BitPosition                      
/*0x074*/             ULONG32      SystemAffinityActive : 1;                 // 3 BitPosition                      
/*0x074*/             ULONG32      Alertable : 1;                            // 4 BitPosition                      
/*0x074*/             ULONG32      UserStackWalkActive : 1;                  // 5 BitPosition                      
/*0x074*/             ULONG32      ApcInterruptRequest : 1;                  // 6 BitPosition                      
/*0x074*/             ULONG32      QuantumEndMigrate : 1;                    // 7 BitPosition                      
/*0x074*/             ULONG32      UmsDirectedSwitchEnable : 1;              // 8 BitPosition                      
/*0x074*/             ULONG32      TimerActive : 1;                          // 9 BitPosition                      
/*0x074*/             ULONG32      SystemThread : 1;                         // 10 BitPosition                     
/*0x074*/             ULONG32      ProcessDetachActive : 1;                  // 11 BitPosition                     
/*0x074*/             ULONG32      CalloutActive : 1;                        // 12 BitPosition                     
/*0x074*/             ULONG32      ScbReadyQueue : 1;                        // 13 BitPosition                     
/*0x074*/             ULONG32      ApcQueueable : 1;                         // 14 BitPosition                     
/*0x074*/             ULONG32      ReservedStackInUse : 1;                   // 15 BitPosition                     
/*0x074*/             ULONG32      UmsPerformingSyscall : 1;                 // 16 BitPosition                     
/*0x074*/             ULONG32      TimerSuspended : 1;                       // 17 BitPosition                     
/*0x074*/             ULONG32      SuspendedWaitMode : 1;                    // 18 BitPosition                     
/*0x074*/             ULONG32      SuspendSchedulerApcWait : 1;              // 19 BitPosition                     
/*0x074*/             ULONG32      CetShadowStack : 1;                       // 20 BitPosition                     
/*0x074*/             ULONG32      Reserved : 11;                            // 21 BitPosition                     
                  };                                                                                               
/*0x074*/         LONG32       MiscFlags;                                                                          
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 23 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x078*/             ULONG32      BamQosLevel : 2;                          // 0 BitPosition                      
/*0x078*/             ULONG32      AutoAlignment : 1;                        // 2 BitPosition                      
/*0x078*/             ULONG32      DisableBoost : 1;                         // 3 BitPosition                      
/*0x078*/             ULONG32      AlertedByThreadId : 1;                    // 4 BitPosition                      
/*0x078*/             ULONG32      QuantumDonation : 1;                      // 5 BitPosition                      
/*0x078*/             ULONG32      EnableStackSwap : 1;                      // 6 BitPosition                      
/*0x078*/             ULONG32      GuiThread : 1;                            // 7 BitPosition                      
/*0x078*/             ULONG32      DisableQuantum : 1;                       // 8 BitPosition                      
/*0x078*/             ULONG32      ChargeOnlySchedulingGroup : 1;            // 9 BitPosition                      
/*0x078*/             ULONG32      DeferPreemption : 1;                      // 10 BitPosition                     
/*0x078*/             ULONG32      QueueDeferPreemption : 1;                 // 11 BitPosition                     
/*0x078*/             ULONG32      ForceDeferSchedule : 1;                   // 12 BitPosition                     
/*0x078*/             ULONG32      SharedReadyQueueAffinity : 1;             // 13 BitPosition                     
/*0x078*/             ULONG32      FreezeCount : 1;                          // 14 BitPosition                     
/*0x078*/             ULONG32      TerminationApcRequest : 1;                // 15 BitPosition                     
/*0x078*/             ULONG32      AutoBoostEntriesExhausted : 1;            // 16 BitPosition                     
/*0x078*/             ULONG32      KernelStackResident : 1;                  // 17 BitPosition                     
/*0x078*/             ULONG32      TerminateRequestReason : 2;               // 18 BitPosition                     
/*0x078*/             ULONG32      ProcessStackCountDecremented : 1;         // 20 BitPosition                     
/*0x078*/             ULONG32      RestrictedGuiThread : 1;                  // 21 BitPosition                     
/*0x078*/             ULONG32      VpBackingThread : 1;                      // 22 BitPosition                     
/*0x078*/             ULONG32      ThreadFlagsSpare : 1;                     // 23 BitPosition                     
/*0x078*/             ULONG32      EtwStackTraceApcInserted : 8;             // 24 BitPosition                     
                  };                                                                                               
/*0x078*/         LONG32       ThreadFlags;                                                                        
              };                                                                                                   
/*0x07C*/     UINT8        Tag;                                                                                    
/*0x07D*/     UINT8        SystemHeteroCpuPolicy;                                                                  
              struct                                                         // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                                    
/*0x07E*/         UINT8        UserHeteroCpuPolicy : 7;                      // 0 BitPosition                      
/*0x07E*/         UINT8        ExplicitSystemHeteroCpuPolicy : 1;            // 7 BitPosition                      
              };                                                                                                   
/*0x07F*/     UINT8        Spare0;                                                                                 
/*0x080*/     ULONG32      SystemCallNumber;                                                                       
/*0x084*/     ULONG32      ReadyTime;                                                                              
/*0x088*/     UINT64       FirstArgument;                                    // VOID*                              
/*0x090*/     UINT64       TrapFrame;                                        // struct _KTRAP_FRAME*               
              union                                                          // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                    
/*0x098*/         struct _KAPC_STATE ApcState;                               // 9 elements, 0x30 bytes (sizeof)    
                  struct                                                     // 3 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x098*/             UINT8        ApcStateFill[43];                                                               
/*0x0C3*/             CHAR         Priority;                                                                       
/*0x0C4*/             ULONG32      UserIdealProcessor;                                                             
                  };                                                                                               
              };                                                                                                   
/*0x0C8*/     INT64        WaitStatus;                                                                             
/*0x0D0*/     UINT64       WaitBlockList;                                    // struct _KWAIT_BLOCK*               
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x0D8*/         struct _LIST_ENTRY WaitListEntry;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x0D8*/         struct _SINGLE_LIST_ENTRY SwapListEntry;                   // 1 elements, 0x8 bytes (sizeof)     
              };                                                                                                   
/*0x0E8*/     UINT64       Queue;                                            // struct _DISPATCHER_HEADER*         
/*0x0F0*/     UINT64       Teb;                                              // VOID*                              
/*0x0F8*/     UINT64       RelativeTimerBias;                                                                      
/*0x100*/     struct _KTIMER Timer;                                          // 6 elements, 0x40 bytes (sizeof)    
              union                                                          // 9 elements, 0xC0 bytes (sizeof)    
              {                                                                                                    
/*0x140*/         struct _KWAIT_BLOCK WaitBlock[4];                                                                
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill4[20];                                                             
/*0x154*/             ULONG32      ContextSwitches;                                                                
/*0x158*/             UINT8        _PADDING0_[0xA8];                                                               
                  };                                                                                               
                  struct                                                     // 5 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill5[68];                                                             
/*0x184*/             UINT8        State;                                                                          
/*0x185*/             CHAR         Spare13;                                                                        
/*0x186*/             UINT8        WaitIrql;                                                                       
/*0x187*/             CHAR         WaitMode;                                                                       
/*0x188*/             UINT8        _PADDING1_[0x78];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill6[116];                                                            
/*0x1B4*/             ULONG32      WaitTime;                                                                       
/*0x1B8*/             UINT8        _PADDING2_[0x48];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill7[164];                                                            
                      union                                                  // 2 elements, 0x4 bytes (sizeof)     
                      {                                                                                            
                          struct                                             // 2 elements, 0x4 bytes (sizeof)     
                          {                                                                                        
/*0x1E4*/                     INT16        KernelApcDisable;                                                       
/*0x1E6*/                     INT16        SpecialApcDisable;                                                      
                          };                                                                                       
/*0x1E4*/                 ULONG32      CombinedApcDisable;                                                         
                      };                                                                                           
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill8[40];                                                             
/*0x168*/             UINT64       ThreadCounters;                           // struct _KTHREAD_COUNTERS*          
/*0x170*/             UINT8        _PADDING3_[0x90];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill9[88];                                                             
/*0x198*/             UINT64       XStateSave;                               // struct _XSTATE_SAVE*               
/*0x1A0*/             UINT8        _PADDING4_[0x60];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill10[136];                                                           
/*0x1C8*/             UINT64       Win32Thread;                              // VOID*                              
/*0x1D0*/             UINT8        _PADDING5_[0x30];                                                               
                  };                                                                                               
                  struct                                                     // 3 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill11[176];                                                           
/*0x1F0*/             UINT64       Ucb;                                      // struct _UMS_CONTROL_BLOCK*         
/*0x1F8*/             UINT64       Uch;                                      // struct _KUMS_CONTEXT_HEADER*       
                  };                                                                                               
              };                                                                                                   
/*0x200*/     UINT64       Spare21;                                          // VOID*                              
/*0x208*/     struct _LIST_ENTRY QueueListEntry;                             // 2 elements, 0x10 bytes (sizeof)    
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x218*/         ULONG32      NextProcessor;                                                                      
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x218*/             ULONG32      NextProcessorNumber : 31;                 // 0 BitPosition                      
/*0x218*/             ULONG32      SharedReadyQueue : 1;                     // 31 BitPosition                     
                  };                                                                                               
              };                                                                                                   
/*0x21C*/     LONG32       QueuePriority;                                                                          
/*0x220*/     UINT64       Process;                                          // struct _KPROCESS*                  
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x228*/         struct _GROUP_AFFINITY UserAffinity;                       // 3 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 7 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x228*/             UINT8        UserAffinityFill[10];                                                           
/*0x232*/             CHAR         PreviousMode;                                                                   
/*0x233*/             CHAR         BasePriority;                                                                   
                      union                                                  // 2 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x234*/                 CHAR         PriorityDecrement;                                                          
                          struct                                             // 2 elements, 0x1 bytes (sizeof)     
                          {                                                                                        
/*0x234*/                     UINT8        ForegroundBoost : 4;              // 0 BitPosition                      
/*0x234*/                     UINT8        UnusualBoost : 4;                 // 4 BitPosition                      
                          };                                                                                       
                      };                                                                                           
/*0x235*/             UINT8        Preempted;                                                                      
/*0x236*/             UINT8        AdjustReason;                                                                   
/*0x237*/             CHAR         AdjustIncrement;                                                                
                  };                                                                                               
              };                                                                                                   
/*0x238*/     UINT64       AffinityVersion;                                                                        
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x240*/         struct _GROUP_AFFINITY Affinity;                           // 3 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 4 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x240*/             UINT8        AffinityFill[10];                                                               
/*0x24A*/             UINT8        ApcStateIndex;                                                                  
/*0x24B*/             UINT8        WaitBlockCount;                                                                 
/*0x24C*/             ULONG32      IdealProcessor;                                                                 
                  };                                                                                               
              };                                                                                                   
/*0x250*/     UINT64       NpxState;                                                                               
              union                                                          // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                    
/*0x258*/         struct _KAPC_STATE SavedApcState;                          // 9 elements, 0x30 bytes (sizeof)    
                  struct                                                     // 5 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x258*/             UINT8        SavedApcStateFill[43];                                                          
/*0x283*/             UINT8        WaitReason;                                                                     
/*0x284*/             CHAR         SuspendCount;                                                                   
/*0x285*/             CHAR         Saturation;                                                                     
/*0x286*/             UINT16       SListFaultCount;                                                                
                  };                                                                                               
              };                                                                                                   
              union                                                          // 7 elements, 0x58 bytes (sizeof)    
              {                                                                                                    
/*0x288*/         struct _KAPC SchedulerApc;                                 // 17 elements, 0x58 bytes (sizeof)   
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill0[1];                                                           
/*0x289*/             UINT8        ResourceIndex;                                                                  
/*0x28A*/             UINT8        _PADDING6_[0x56];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill1[3];                                                           
/*0x28B*/             UINT8        QuantumReset;                                                                   
/*0x28C*/             UINT8        _PADDING7_[0x54];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill2[4];                                                           
/*0x28C*/             ULONG32      KernelTime;                                                                     
/*0x290*/             UINT8        _PADDING8_[0x50];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill3[64];                                                          
/*0x2C8*/             UINT64       WaitPrcb;                                 // struct _KPRCB*                     
/*0x2D0*/             UINT8        _PADDING9_[0x10];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill4[72];                                                          
/*0x2D0*/             UINT64       LegoData;                                 // VOID*                              
/*0x2D8*/             UINT8        _PADDING10_[0x8];                                                               
                  };                                                                                               
                  struct                                                     // 3 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill5[83];                                                          
/*0x2DB*/             UINT8        CallbackNestingLevel;                                                           
/*0x2DC*/             ULONG32      UserTime;                                                                       
                  };                                                                                               
              };                                                                                                   
/*0x2E0*/     struct _KEVENT SuspendEvent;                                   // 1 elements, 0x18 bytes (sizeof)    
/*0x2F8*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x308*/     struct _LIST_ENTRY MutantListHead;                             // 2 elements, 0x10 bytes (sizeof)    
/*0x318*/     UINT8        AbEntrySummary;                                                                         
/*0x319*/     UINT8        AbWaitEntryCount;                                                                       
/*0x31A*/     UINT8        AbAllocationRegionCount;                                                                
/*0x31B*/     CHAR         SystemPriority;                                                                         
/*0x31C*/     ULONG32      SecureThreadCookie;                                                                     
/*0x320*/     struct _KLOCK_ENTRY LockEntries[6];                                                                  
/*0x560*/     struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;                // 1 elements, 0x8 bytes (sizeof)     
/*0x568*/     struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;                   // 1 elements, 0x8 bytes (sizeof)     
/*0x570*/     UINT8        PriorityFloorCounts[16];                                                                
/*0x580*/     ULONG32      PriorityFloorSummary;                                                                   
/*0x584*/     LONG32       AbCompletedIoBoostCount;                                                                
/*0x588*/     LONG32       AbCompletedIoQoSBoostCount;                                                             
/*0x58C*/     INT16        KeReferenceCount;                                                                       
/*0x58E*/     UINT8        AbOrphanedEntrySummary;                                                                 
/*0x58F*/     UINT8        AbOwnedEntryCount;                                                                      
/*0x590*/     ULONG32      ForegroundLossTime;                                                                     
/*0x594*/     UINT8        _PADDING11_[0x4];                                                                       
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x598*/         struct _LIST_ENTRY GlobalForegroundListEntry;              // 2 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x598*/             struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry; // 1 elements, 0x8 bytes (sizeof)     
/*0x5A0*/             UINT64       InGlobalForegroundList;                                                         
                  };                                                                                               
              };                                                                                                   
/*0x5A8*/     INT64        ReadOperationCount;                                                                     
/*0x5B0*/     INT64        WriteOperationCount;                                                                    
/*0x5B8*/     INT64        OtherOperationCount;                                                                    
/*0x5C0*/     INT64        ReadTransferCount;                                                                      
/*0x5C8*/     INT64        WriteTransferCount;                                                                     
/*0x5D0*/     INT64        OtherTransferCount;                                                                     
/*0x5D8*/     UINT64       QueuedScb;                                        // struct _KSCB*                      
/*0x5E0*/     ULONG32      ThreadTimerDelay;                                                                       
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x5E4*/         LONG32       ThreadFlags2;                                                                       
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x5E4*/             ULONG32      PpmPolicy : 2;                            // 0 BitPosition                      
/*0x5E4*/             ULONG32      ThreadFlags2Reserved : 30;                // 2 BitPosition                      
                  };                                                                                               
              };                                                                                                   
/*0x5E8*/     UINT64       SchedulerAssist;                                  // VOID*                              
          }KTHREAD, *PKTHREAD;                                                                                     
                                                                                                                   
          typedef struct _KSEMAPHORE            // 2 elements, 0x20 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     LONG32       Limit;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                         
          }KSEMAPHORE, *PKSEMAPHORE;                                                
                                                                                    
          typedef union _PS_CLIENT_SECURITY_CONTEXT    // 4 elements, 0x8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       ImpersonationData;                                            
/*0x000*/     UINT64       ImpersonationToken;         // VOID*                          
              struct                                   // 2 elements, 0x8 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       ImpersonationLevel : 2; // 0 BitPosition                  
/*0x000*/         UINT64       EffectiveOnly : 1;      // 2 BitPosition                  
              };                                                                         
          }PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT;                                  
                                                                                         
          typedef struct _ETHREAD                                            // 116 elements, 0x810 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     struct _KTHREAD Tcb;                                           // 185 elements, 0x5F0 bytes (sizeof) 
/*0x5F0*/     union _LARGE_INTEGER CreateTime;                               // 4 elements, 0x8 bytes (sizeof)     
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x5F8*/         union _LARGE_INTEGER ExitTime;                             // 4 elements, 0x8 bytes (sizeof)     
/*0x5F8*/         struct _LIST_ENTRY KeyedWaitChain;                         // 2 elements, 0x10 bytes (sizeof)    
              };                                                                                                   
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x608*/         struct _LIST_ENTRY PostBlockList;                          // 2 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x608*/             UINT64       ForwardLinkShadow;                        // VOID*                              
/*0x610*/             UINT64       StartAddress;                             // VOID*                              
                  };                                                                                               
              };                                                                                                   
              union                                                          // 3 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x618*/         UINT64       TerminationPort;                              // struct _TERMINATION_PORT*          
/*0x618*/         UINT64       ReaperLink;                                   // struct _ETHREAD*                   
/*0x618*/         UINT64       KeyedWaitValue;                               // VOID*                              
              };                                                                                                   
/*0x620*/     UINT64       ActiveTimerListLock;                                                                    
/*0x628*/     struct _LIST_ENTRY ActiveTimerListHead;                        // 2 elements, 0x10 bytes (sizeof)    
/*0x638*/     struct _CLIENT_ID Cid;                                         // 2 elements, 0x10 bytes (sizeof)    
              union                                                          // 2 elements, 0x20 bytes (sizeof)    
              {                                                                                                    
/*0x648*/         struct _KSEMAPHORE KeyedWaitSemaphore;                     // 2 elements, 0x20 bytes (sizeof)    
/*0x648*/         struct _KSEMAPHORE AlpcWaitSemaphore;                      // 2 elements, 0x20 bytes (sizeof)    
              };                                                                                                   
/*0x668*/     union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;              // 4 elements, 0x8 bytes (sizeof)     
/*0x670*/     struct _LIST_ENTRY IrpList;                                    // 2 elements, 0x10 bytes (sizeof)    
/*0x680*/     UINT64       TopLevelIrp;                                                                            
/*0x688*/     UINT64       DeviceToVerify;                                   // struct _DEVICE_OBJECT*             
/*0x690*/     UINT64       Win32StartAddress;                                // VOID*                              
/*0x698*/     UINT64       ChargeOnlySession;                                // VOID*                              
/*0x6A0*/     UINT64       LegacyPowerObject;                                // VOID*                              
/*0x6A8*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x6B8*/     struct _EX_RUNDOWN_REF RundownProtect;                         // 2 elements, 0x8 bytes (sizeof)     
/*0x6C0*/     struct _EX_PUSH_LOCK ThreadLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6C8*/     ULONG32      ReadClusterSize;                                                                        
/*0x6CC*/     LONG32       MmLockOrdering;                                                                         
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D0*/         ULONG32      CrossThreadFlags;                                                                   
                  struct                                                     // 21 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x6D0*/             ULONG32      Terminated : 1;                           // 0 BitPosition                      
/*0x6D0*/             ULONG32      ThreadInserted : 1;                       // 1 BitPosition                      
/*0x6D0*/             ULONG32      HideFromDebugger : 1;                     // 2 BitPosition                      
/*0x6D0*/             ULONG32      ActiveImpersonationInfo : 1;              // 3 BitPosition                      
/*0x6D0*/             ULONG32      HardErrorsAreDisabled : 1;                // 4 BitPosition                      
/*0x6D0*/             ULONG32      BreakOnTermination : 1;                   // 5 BitPosition                      
/*0x6D0*/             ULONG32      SkipCreationMsg : 1;                      // 6 BitPosition                      
/*0x6D0*/             ULONG32      SkipTerminationMsg : 1;                   // 7 BitPosition                      
/*0x6D0*/             ULONG32      CopyTokenOnOpen : 1;                      // 8 BitPosition                      
/*0x6D0*/             ULONG32      ThreadIoPriority : 3;                     // 9 BitPosition                      
/*0x6D0*/             ULONG32      ThreadPagePriority : 3;                   // 12 BitPosition                     
/*0x6D0*/             ULONG32      RundownFail : 1;                          // 15 BitPosition                     
/*0x6D0*/             ULONG32      UmsForceQueueTermination : 1;             // 16 BitPosition                     
/*0x6D0*/             ULONG32      IndirectCpuSets : 1;                      // 17 BitPosition                     
/*0x6D0*/             ULONG32      DisableDynamicCodeOptOut : 1;             // 18 BitPosition                     
/*0x6D0*/             ULONG32      ExplicitCaseSensitivity : 1;              // 19 BitPosition                     
/*0x6D0*/             ULONG32      PicoNotifyExit : 1;                       // 20 BitPosition                     
/*0x6D0*/             ULONG32      DbgWerUserReportActive : 1;               // 21 BitPosition                     
/*0x6D0*/             ULONG32      ForcedSelfTrimActive : 1;                 // 22 BitPosition                     
/*0x6D0*/             ULONG32      SamplingCoverage : 1;                     // 23 BitPosition                     
/*0x6D0*/             ULONG32      ReservedCrossThreadFlags : 8;             // 24 BitPosition                     
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D4*/         ULONG32      SameThreadPassiveFlags;                                                             
                  struct                                                     // 12 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x6D4*/             ULONG32      ActiveExWorker : 1;                       // 0 BitPosition                      
/*0x6D4*/             ULONG32      MemoryMaker : 1;                          // 1 BitPosition                      
/*0x6D4*/             ULONG32      StoreLockThread : 2;                      // 2 BitPosition                      
/*0x6D4*/             ULONG32      ClonedThread : 1;                         // 4 BitPosition                      
/*0x6D4*/             ULONG32      KeyedEventInUse : 1;                      // 5 BitPosition                      
/*0x6D4*/             ULONG32      SelfTerminate : 1;                        // 6 BitPosition                      
/*0x6D4*/             ULONG32      RespectIoPriority : 1;                    // 7 BitPosition                      
/*0x6D4*/             ULONG32      ActivePageLists : 1;                      // 8 BitPosition                      
/*0x6D4*/             ULONG32      SecureContext : 1;                        // 9 BitPosition                      
/*0x6D4*/             ULONG32      ZeroPageThread : 1;                       // 10 BitPosition                     
/*0x6D4*/             ULONG32      WorkloadClass : 1;                        // 11 BitPosition                     
/*0x6D4*/             ULONG32      ReservedSameThreadPassiveFlags : 20;      // 12 BitPosition                     
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D8*/         ULONG32      SameThreadApcFlags;                                                                 
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
                      struct                                                 // 8 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x6D8*/                 UINT8        OwnsProcessAddressSpaceExclusive : 1; // 0 BitPosition                      
/*0x6D8*/                 UINT8        OwnsProcessAddressSpaceShared : 1;    // 1 BitPosition                      
/*0x6D8*/                 UINT8        HardFaultBehavior : 1;                // 2 BitPosition                      
/*0x6D8*/                 UINT8        StartAddressInvalid : 1;              // 3 BitPosition                      
/*0x6D8*/                 UINT8        EtwCalloutActive : 1;                 // 4 BitPosition                      
/*0x6D8*/                 UINT8        SuppressSymbolLoad : 1;               // 5 BitPosition                      
/*0x6D8*/                 UINT8        Prefetching : 1;                      // 6 BitPosition                      
/*0x6D8*/                 UINT8        OwnsVadExclusive : 1;                 // 7 BitPosition                      
                      };                                                                                           
                      struct                                                 // 4 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x6D9*/                 UINT8        SystemPagePriorityActive : 1;         // 0 BitPosition                      
/*0x6D9*/                 UINT8        SystemPagePriority : 3;               // 1 BitPosition                      
/*0x6D9*/                 UINT8        AllowWritesToExecutableMemory : 1;    // 4 BitPosition                      
/*0x6D9*/                 UINT8        OwnsVadShared : 1;                    // 5 BitPosition                      
                      };                                                                                           
                  };                                                                                               
              };                                                                                                   
/*0x6DC*/     UINT8        CacheManagerActive;                                                                     
/*0x6DD*/     UINT8        DisablePageFaultClustering;                                                             
/*0x6DE*/     UINT8        ActiveFaultCount;                                                                       
/*0x6DF*/     UINT8        LockOrderState;                                                                         
/*0x6E0*/     UINT64       AlpcMessageId;                                                                          
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x6E8*/         UINT64       AlpcMessage;                                  // VOID*                              
/*0x6E8*/         ULONG32      AlpcReceiveAttributeSet;                                                            
              };                                                                                                   
/*0x6F0*/     struct _LIST_ENTRY AlpcWaitListEntry;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x700*/     LONG32       ExitStatus;                                                                             
/*0x704*/     ULONG32      CacheManagerCount;                                                                      
/*0x708*/     ULONG32      IoBoostCount;                                                                           
/*0x70C*/     ULONG32      IoQoSBoostCount;                                                                        
/*0x710*/     ULONG32      IoQoSThrottleCount;                                                                     
/*0x714*/     ULONG32      KernelStackReference;                                                                   
/*0x718*/     struct _LIST_ENTRY BoostList;                                  // 2 elements, 0x10 bytes (sizeof)    
/*0x728*/     struct _LIST_ENTRY DeboostList;                                // 2 elements, 0x10 bytes (sizeof)    
/*0x738*/     UINT64       BoostListLock;                                                                          
/*0x740*/     UINT64       IrpListLock;                                                                            
/*0x748*/     UINT64       ReservedForSynchTracking;                         // VOID*                              
/*0x750*/     struct _SINGLE_LIST_ENTRY CmCallbackListHead;                  // 1 elements, 0x8 bytes (sizeof)     
/*0x758*/     UINT64       ActivityId;                                       // struct _GUID*                      
/*0x760*/     struct _SINGLE_LIST_ENTRY SeLearningModeListHead;              // 1 elements, 0x8 bytes (sizeof)     
/*0x768*/     UINT64       VerifierContext;                                  // VOID*                              
/*0x770*/     UINT64       AdjustedClientToken;                              // VOID*                              
/*0x778*/     UINT64       WorkOnBehalfThread;                               // VOID*                              
/*0x780*/     struct _PS_PROPERTY_SET PropertySet;                           // 2 elements, 0x18 bytes (sizeof)    
/*0x798*/     UINT64       PicoContext;                                      // VOID*                              
/*0x7A0*/     UINT64       UserFsBase;                                                                             
/*0x7A8*/     UINT64       UserGsBase;                                                                             
/*0x7B0*/     UINT64       EnergyValues;                                     // struct _THREAD_ENERGY_VALUES*      
/*0x7B8*/     UINT64       CmDbgInfo;                                        // VOID*                              
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x7C0*/         UINT64       SelectedCpuSets;                                                                    
/*0x7C0*/         UINT64       SelectedCpuSetsIndirect;                      // UINT64*                            
              };                                                                                                   
/*0x7C8*/     UINT64       Silo;                                             // struct _EJOB*                      
/*0x7D0*/     UINT64       ThreadName;                                       // struct _UNICODE_STRING*            
/*0x7D8*/     UINT64       SetContextState;                                  // struct _CONTEXT*                   
/*0x7E0*/     ULONG32      LastExpectedRunTime;                                                                    
/*0x7E4*/     ULONG32      HeapData;                                                                               
/*0x7E8*/     struct _LIST_ENTRY OwnerEntryListHead;                         // 2 elements, 0x10 bytes (sizeof)    
/*0x7F8*/     UINT64       DisownedOwnerEntryListLock;                                                             
/*0x800*/     struct _LIST_ENTRY DisownedOwnerEntryListHead;                 // 2 elements, 0x10 bytes (sizeof)    
          }ETHREAD, *PETHREAD;                                                                                     
                                                                                                                   
          typedef struct _ETW_BUFFER_CONTEXT        // 4 elements, 0x4 bytes (sizeof) 
          {                                                                           
              union                                 // 2 elements, 0x2 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x2 bytes (sizeof) 
                  {                                                                   
/*0x000*/             UINT8        ProcessorNumber;                                   
/*0x001*/             UINT8        Alignment;                                         
                  };                                                                  
/*0x000*/         UINT16       ProcessorIndex;                                        
              };                                                                      
/*0x002*/     UINT16       LoggerId;                                                  
          }ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT;                                  
                                                                                      
typedef struct _ETW_SILODRIVERSTATE // 0 elements, 0x0 bytes (sizeof) 
{                                                                     
}ETW_SILODRIVERSTATE, *PETW_SILODRIVERSTATE;                                  
                                                                      
          typedef struct _EVENT_DATA_DESCRIPTOR // 6 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       Ptr;                                                    
/*0x008*/     ULONG32      Size;                                                   
              union                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                    
/*0x00C*/         ULONG32      Reserved;                                           
                  struct                        // 3 elements, 0x4 bytes (sizeof)  
                  {                                                                
/*0x00C*/             UINT8        Type;                                           
/*0x00D*/             UINT8        Reserved1;                                      
/*0x00E*/             UINT16       Reserved2;                                      
                  };                                                               
              };                                                                   
          }EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR;                                   
                                                                                   
          typedef struct _EVENT_DESCRIPTOR // 7 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT16       Id;                                                
/*0x002*/     UINT8        Version;                                           
/*0x003*/     UINT8        Channel;                                           
/*0x004*/     UINT8        Level;                                             
/*0x005*/     UINT8        Opcode;                                            
/*0x006*/     UINT16       Task;                                              
/*0x008*/     UINT64       Keyword;                                           
          }EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR;                                   
                                                                              
          typedef struct _EVENT_HEADER                  // 13 elements, 0x50 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT16       Size;                                                            
/*0x002*/     UINT16       HeaderType;                                                      
/*0x004*/     UINT16       Flags;                                                           
/*0x006*/     UINT16       EventProperty;                                                   
/*0x008*/     ULONG32      ThreadId;                                                        
/*0x00C*/     ULONG32      ProcessId;                                                       
/*0x010*/     union _LARGE_INTEGER TimeStamp;           // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _GUID ProviderId;                  // 4 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _EVENT_DESCRIPTOR EventDescriptor; // 7 elements, 0x10 bytes (sizeof)  
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
                  struct                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x038*/             ULONG32      KernelTime;                                              
/*0x03C*/             ULONG32      UserTime;                                                
                  };                                                                        
/*0x038*/         UINT64       ProcessorTime;                                               
              };                                                                            
/*0x040*/     struct _GUID ActivityId;                  // 4 elements, 0x10 bytes (sizeof)  
          }EVENT_HEADER, *PEVENT_HEADER;                                                    
                                                                                            
          typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Reserved1;                                                        
/*0x002*/     UINT16       ExtType;                                                          
              struct                                      // 2 elements, 0x2 bytes (sizeof)  
              {                                                                              
/*0x004*/         UINT16       Linkage : 1;               // 0 BitPosition                   
/*0x004*/         UINT16       Reserved2 : 15;            // 1 BitPosition                   
              };                                                                             
/*0x006*/     UINT16       DataSize;                                                         
/*0x008*/     UINT64       DataPtr;                                                          
          }EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM;                                   
                                                                                             
          typedef struct _EVENT_RECORD                  // 7 elements, 0x70 bytes (sizeof)          
          {                                                                                         
/*0x000*/     struct _EVENT_HEADER EventHeader;         // 13 elements, 0x50 bytes (sizeof)         
/*0x050*/     struct _ETW_BUFFER_CONTEXT BufferContext; // 4 elements, 0x4 bytes (sizeof)           
/*0x054*/     UINT16       ExtendedDataCount;                                                       
/*0x056*/     UINT16       UserDataLength;                                                          
/*0x058*/     UINT64       ExtendedData;                // struct _EVENT_HEADER_EXTENDED_DATA_ITEM* 
/*0x060*/     UINT64       UserData;                    // VOID*                                    
/*0x068*/     UINT64       UserContext;                 // VOID*                                    
          }EVENT_RECORD, *PEVENT_RECORD;                                                            
                                                                                                    
          typedef struct _EWOW64PROCESS        // 3 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       Peb;                // VOID*                           
/*0x008*/     UINT16       Machine;                                               
/*0x00A*/     UINT8        _PADDING0_[0x2];                                       
/*0x00C*/     enum _SYSTEM_DLL_TYPE NtdllType;                                    
          }EWOW64PROCESS, *PEWOW64PROCESS;                                        
                                                                                  
          typedef struct _EXCEPTION_RECORD           // 6 elements, 0x98 bytes (sizeof) 
          {                                                                             
/*0x000*/     LONG32       ExceptionCode;                                               
/*0x004*/     ULONG32      ExceptionFlags;                                              
/*0x008*/     UINT64       ExceptionRecord;          // struct _EXCEPTION_RECORD*       
/*0x010*/     UINT64       ExceptionAddress;         // VOID*                           
/*0x018*/     ULONG32      NumberParameters;                                            
/*0x01C*/     UINT8        _PADDING0_[0x4];                                             
/*0x020*/     UINT64       ExceptionInformation[15];                                    
          }EXCEPTION_RECORD, *PEXCEPTION_RECORD;                                        
                                                                                        
          typedef struct _EXCEPTION_REGISTRATION_RECORD // 2 elements, 0x10 bytes (sizeof)        
          {                                                                                       
/*0x000*/     UINT64       Next;                        // struct _EXCEPTION_REGISTRATION_RECORD* 
/*0x008*/     UINT64       Handler;                     // FUNCT_0198_0197_Handler*               
          }EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;                                          
                                                                                                  
          typedef struct _EXHANDLE                   // 4 elements, 0x8 bytes (sizeof) 
          {                                                                            
              union                                  // 3 elements, 0x8 bytes (sizeof) 
              {                                                                        
                  struct                             // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                    
/*0x000*/             ULONG32      TagBits : 2;      // 0 BitPosition                  
/*0x000*/             ULONG32      Index : 30;       // 2 BitPosition                  
                  };                                                                   
/*0x000*/         UINT64       GenericHandleOverlay; // VOID*                          
/*0x000*/         UINT64       Value;                                                  
              };                                                                       
          }EXHANDLE, *PEXHANDLE;                                                       
                                                                                       
          typedef struct _EXT_DELETE_PARAMETERS // 4 elements, 0x18 bytes (sizeof)                                                                            
          {                                                                                                                                                   
/*0x000*/     ULONG32      Version;                                                                                                                           
/*0x004*/     ULONG32      Reserved;                                                                                                                          
/*0x008*/     UINT64       DeleteCallback;      // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
/*0x010*/     UINT64       DeleteContext;       // VOID*                                                                                                      
          }EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS;                                                                                                              
                                                                                                                                                              
          typedef struct _EXT_SET_PARAMETERS_V0 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Version;                                                
/*0x004*/     ULONG32      Reserved;                                               
/*0x008*/     INT64        NoWakeTolerance;                                        
          }EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0;                                   
                                                                                   
          typedef struct _FAKE_HEAP_ENTRY // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       Size;                                             
/*0x008*/     UINT64       PreviousSize;                                     
          }FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY;                                   
                                                                             
          typedef struct _FAST_IO_DISPATCH                // 28 elements, 0xE0 bytes (sizeof)                                             
          {                                                                                                                               
/*0x000*/     ULONG32      SizeOfFastIoDispatch;                                                                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                               
/*0x008*/     UINT64       FastIoCheckIfPossible;         // FUNCT_00A9_11FE_FastIoCheckIfPossible*                                       
/*0x010*/     UINT64       FastIoRead;                    // FUNCT_00A9_1208_FastIoRead_FastIoWrite*                                      
/*0x018*/     UINT64       FastIoWrite;                   // FUNCT_00A9_1208_FastIoRead_FastIoWrite*                                      
/*0x020*/     UINT64       FastIoQueryBasicInfo;          // FUNCT_00A9_1212_FastIoQueryBasicInfo*                                        
/*0x028*/     UINT64       FastIoQueryStandardInfo;       // FUNCT_00A9_1220_FastIoQueryStandardInfo*                                     
/*0x030*/     UINT64       FastIoLock;                    // FUNCT_00A9_122E_FastIoLock*                                                  
/*0x038*/     UINT64       FastIoUnlockSingle;            // FUNCT_00A9_1239_FastIoUnlockSingle*                                          
/*0x040*/     UINT64       FastIoUnlockAll;               // FUNCT_00A9_1242_FastIoUnlockAll*                                             
/*0x048*/     UINT64       FastIoUnlockAllByKey;          // FUNCT_00A9_1248_FastIoUnlockAllByKey*                                        
/*0x050*/     UINT64       FastIoDeviceControl;           // FUNCT_00A9_124F_FastIoDeviceControl*                                         
/*0x058*/     UINT64       AcquireFileForNtCreateSection; // FUNCT_00EF_125A_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* 
/*0x060*/     UINT64       ReleaseFileForNtCreateSection; // FUNCT_00EF_125A_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* 
/*0x068*/     UINT64       FastIoDetachDevice;            // FUNCT_00EF_125D_FastIoDetachDevice*                                          
/*0x070*/     UINT64       FastIoQueryNetworkOpenInfo;    // FUNCT_00A9_1261_FastIoQueryNetworkOpenInfo*                                  
/*0x078*/     UINT64       AcquireForModWrite;            // FUNCT_00A0_1271_AcquireForModWrite*                                          
/*0x080*/     UINT64       MdlRead;                       // FUNCT_00A9_1277_MdlRead_PrepareMdlWrite*                                     
/*0x088*/     UINT64       MdlReadComplete;               // FUNCT_00A9_1281_MdlReadComplete_MdlReadCompleteCompressed*                   
/*0x090*/     UINT64       PrepareMdlWrite;               // FUNCT_00A9_1277_MdlRead_PrepareMdlWrite*                                     
/*0x098*/     UINT64       MdlWriteComplete;              // FUNCT_00A9_1286_MdlWriteComplete_MdlWriteCompleteCompressed*                 
/*0x0A0*/     UINT64       FastIoReadCompressed;          // FUNCT_00A9_128C_FastIoReadCompressed_FastIoWriteCompressed*                  
/*0x0A8*/     UINT64       FastIoWriteCompressed;         // FUNCT_00A9_128C_FastIoReadCompressed_FastIoWriteCompressed*                  
/*0x0B0*/     UINT64       MdlReadCompleteCompressed;     // FUNCT_00A9_1281_MdlReadComplete_MdlReadCompleteCompressed*                   
/*0x0B8*/     UINT64       MdlWriteCompleteCompressed;    // FUNCT_00A9_1286_MdlWriteComplete_MdlWriteCompleteCompressed*                 
/*0x0C0*/     UINT64       FastIoQueryOpen;               // FUNCT_00A9_12A1_FastIoQueryOpen*                                             
/*0x0C8*/     UINT64       ReleaseForModWrite;            // FUNCT_00A0_12A6_ReleaseForModWrite*                                          
/*0x0D0*/     UINT64       AcquireForCcFlush;             // FUNCT_00A0_12AB_AcquireForCcFlush_ReleaseForCcFlush*                         
/*0x0D8*/     UINT64       ReleaseForCcFlush;             // FUNCT_00A0_12AB_AcquireForCcFlush_ReleaseForCcFlush*                         
          }FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;                                                                                          
                                                                                                                                          
          typedef struct _FAST_MUTEX        // 5 elements, 0x38 bytes (sizeof) 
          {                                                                    
/*0x000*/     LONG32       Count;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Owner;           // VOID*                           
/*0x010*/     ULONG32      Contention;                                         
/*0x014*/     UINT8        _PADDING1_[0x4];                                    
/*0x018*/     struct _KEVENT Event;         // 1 elements, 0x18 bytes (sizeof) 
/*0x030*/     ULONG32      OldIrql;                                            
/*0x034*/     UINT8        _PADDING2_[0x4];                                    
          }FAST_MUTEX, *PFAST_MUTEX;                                           
                                                                               
          typedef struct _FILE_BASIC_INFORMATION   // 5 elements, 0x28 bytes (sizeof) 
          {                                                                           
/*0x000*/     union _LARGE_INTEGER CreationTime;   // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime; // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;  // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     ULONG32      FileAttributes;                                            
/*0x024*/     UINT8        _PADDING0_[0x4];                                           
          }FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;                                   
                                                                                      
          typedef struct _SID_IDENTIFIER_AUTHORITY // 1 elements, 0x6 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Value[6];                                                 
          }SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;                                  
                                                                                     
          typedef struct _SID                                       // 4 elements, 0xC bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT8        Revision;                                                                  
/*0x001*/     UINT8        SubAuthorityCount;                                                         
/*0x002*/     struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority; // 1 elements, 0x6 bytes (sizeof) 
/*0x008*/     ULONG32      SubAuthority[1];                                                           
          }SID, *PSID;                                                                                
                                                                                                      
          typedef struct _FILE_GET_QUOTA_INFORMATION // 3 elements, 0x14 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      NextEntryOffset;                                             
/*0x004*/     ULONG32      SidLength;                                                   
/*0x008*/     struct _SID  Sid;                      // 4 elements, 0xC bytes (sizeof)  
          }FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION;                                   
                                                                                        
          typedef struct _FILE_NETWORK_OPEN_INFORMATION // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                
/*0x000*/     union _LARGE_INTEGER CreationTime;        // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;       // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;          // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     union _LARGE_INTEGER AllocationSize;      // 4 elements, 0x8 bytes (sizeof)  
/*0x028*/     union _LARGE_INTEGER EndOfFile;           // 4 elements, 0x8 bytes (sizeof)  
/*0x030*/     ULONG32      FileAttributes;                                                 
/*0x034*/     UINT8        _PADDING0_[0x4];                                                
          }FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;                                   
                                                                                           
          typedef struct _FILE_OBJECT                 // 30 elements, 0xD8 bytes (sizeof) 
          {                                                                               
/*0x000*/     INT16        Type;                                                          
/*0x002*/     INT16        Size;                                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                               
/*0x008*/     UINT64       DeviceObject;              // struct _DEVICE_OBJECT*           
/*0x010*/     UINT64       Vpb;                       // struct _VPB*                     
/*0x018*/     UINT64       FsContext;                 // VOID*                            
/*0x020*/     UINT64       FsContext2;                // VOID*                            
/*0x028*/     UINT64       SectionObjectPointer;      // struct _SECTION_OBJECT_POINTERS* 
/*0x030*/     UINT64       PrivateCacheMap;           // VOID*                            
/*0x038*/     LONG32       FinalStatus;                                                   
/*0x03C*/     UINT8        _PADDING1_[0x4];                                               
/*0x040*/     UINT64       RelatedFileObject;         // struct _FILE_OBJECT*             
/*0x048*/     UINT8        LockOperation;                                                 
/*0x049*/     UINT8        DeletePending;                                                 
/*0x04A*/     UINT8        ReadAccess;                                                    
/*0x04B*/     UINT8        WriteAccess;                                                   
/*0x04C*/     UINT8        DeleteAccess;                                                  
/*0x04D*/     UINT8        SharedRead;                                                    
/*0x04E*/     UINT8        SharedWrite;                                                   
/*0x04F*/     UINT8        SharedDelete;                                                  
/*0x050*/     ULONG32      Flags;                                                         
/*0x054*/     UINT8        _PADDING2_[0x4];                                               
/*0x058*/     struct _UNICODE_STRING FileName;        // 3 elements, 0x10 bytes (sizeof)  
/*0x068*/     union _LARGE_INTEGER CurrentByteOffset; // 4 elements, 0x8 bytes (sizeof)   
/*0x070*/     ULONG32      Waiters;                                                       
/*0x074*/     ULONG32      Busy;                                                          
/*0x078*/     UINT64       LastLock;                  // VOID*                            
/*0x080*/     struct _KEVENT Lock;                    // 1 elements, 0x18 bytes (sizeof)  
/*0x098*/     struct _KEVENT Event;                   // 1 elements, 0x18 bytes (sizeof)  
/*0x0B0*/     UINT64       CompletionContext;         // struct _IO_COMPLETION_CONTEXT*   
/*0x0B8*/     UINT64       IrpListLock;                                                   
/*0x0C0*/     struct _LIST_ENTRY IrpList;             // 2 elements, 0x10 bytes (sizeof)  
/*0x0D0*/     UINT64       FileObjectExtension;       // VOID*                            
          }FILE_OBJECT, *PFILE_OBJECT;                                                    
                                                                                          
          typedef struct _FILE_STANDARD_INFORMATION // 5 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     union _LARGE_INTEGER AllocationSize;  // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER EndOfFile;       // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      NumberOfLinks;                                              
/*0x014*/     UINT8        DeletePending;                                              
/*0x015*/     UINT8        Directory;                                                  
/*0x016*/     UINT8        _PADDING0_[0x2];                                            
          }FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;                                   
                                                                                       
          typedef struct _FILESYSTEM_DISK_COUNTERS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       FsBytesRead;                                               
/*0x008*/     UINT64       FsBytesWritten;                                            
          }FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS;                                   
                                                                                      
typedef struct _FLS_CALLBACK_INFO // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}FLS_CALLBACK_INFO, *PFLS_CALLBACK_INFO;                                  
                                                                    
          typedef union _FS_FILTER_PARAMETERS                                   // 6 elements, 0x28 bytes (sizeof)        
          {                                                                                                               
              struct                                                            // 2 elements, 0x10 bytes (sizeof)        
              {                                                                                                           
/*0x000*/         UINT64       EndingOffset;                                    // union _LARGE_INTEGER*                  
/*0x008*/         UINT64       ResourceToRelease;                               // struct _ERESOURCE**                    
              }AcquireForModifiedPageWriter;                                                                              
              struct                                                            // 1 elements, 0x8 bytes (sizeof)         
              {                                                                                                           
/*0x000*/         UINT64       ResourceToRelease;                               // struct _ERESOURCE*                     
              }ReleaseForModifiedPageWriter;                                                                              
              struct                                                            // 3 elements, 0x10 bytes (sizeof)        
              {                                                                                                           
/*0x000*/         enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;                                                             
/*0x004*/         ULONG32      PageProtection;                                                                            
/*0x008*/         UINT64       OutputInformation;                               // struct _FS_FILTER_SECTION_SYNC_OUTPUT* 
              }AcquireForSectionSynchronization;                                                                          
              struct                                                            // 2 elements, 0x10 bytes (sizeof)        
              {                                                                                                           
/*0x000*/         enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;                                           
/*0x004*/         UINT8        _PADDING0_[0x4];                                                                           
/*0x008*/         UINT8        SafeToRecurse;                                                                             
/*0x009*/         UINT8        _PADDING1_[0x7];                                                                           
              }NotifyStreamFileObject;                                                                                    
              struct                                                            // 5 elements, 0x20 bytes (sizeof)        
              {                                                                                                           
/*0x000*/         UINT64       Irp;                                             // struct _IRP*                           
/*0x008*/         UINT64       FileInformation;                                 // VOID*                                  
/*0x010*/         UINT64       Length;                                          // ULONG32*                               
/*0x018*/         enum _FILE_INFORMATION_CLASS FileInformationClass;                                                      
/*0x01C*/         LONG32       CompletionStatus;                                                                          
              }QueryOpen;                                                                                                 
              struct                                                            // 5 elements, 0x28 bytes (sizeof)        
              {                                                                                                           
/*0x000*/         UINT64       Argument1;                                       // VOID*                                  
/*0x008*/         UINT64       Argument2;                                       // VOID*                                  
/*0x010*/         UINT64       Argument3;                                       // VOID*                                  
/*0x018*/         UINT64       Argument4;                                       // VOID*                                  
/*0x020*/         UINT64       Argument5;                                       // VOID*                                  
              }Others;                                                                                                    
          }FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS;                                                                  
                                                                                                                          
          typedef struct _FS_FILTER_CALLBACK_DATA      // 6 elements, 0x40 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      SizeOfFsFilterCallbackData;                                    
/*0x004*/     UINT8        Operation;                                                     
/*0x005*/     UINT8        Reserved;                                                      
/*0x006*/     UINT8        _PADDING0_[0x2];                                               
/*0x008*/     UINT64       DeviceObject;               // struct _DEVICE_OBJECT*          
/*0x010*/     UINT64       FileObject;                 // struct _FILE_OBJECT*            
/*0x018*/     union _FS_FILTER_PARAMETERS Parameters;  // 6 elements, 0x28 bytes (sizeof) 
          }FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA;                                   
                                                                                          
          typedef struct _FS_FILTER_CALLBACKS                    // 16 elements, 0x78 bytes (sizeof)                                                                                                                                                                                       
          {                                                                                                                                                                                                                                                                                
/*0x000*/     ULONG32      SizeOfFsFilterCallbacks;                                                                                                                                                                                                                                        
/*0x004*/     ULONG32      Reserved;                                                                                                                                                                                                                                                       
/*0x008*/     UINT64       PreAcquireForSectionSynchronization;  // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x010*/     UINT64       PostAcquireForSectionSynchronization; // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x018*/     UINT64       PreReleaseForSectionSynchronization;  // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x020*/     UINT64       PostReleaseForSectionSynchronization; // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x028*/     UINT64       PreAcquireForCcFlush;                 // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x030*/     UINT64       PostAcquireForCcFlush;                // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x038*/     UINT64       PreReleaseForCcFlush;                 // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x040*/     UINT64       PostReleaseForCcFlush;                // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x048*/     UINT64       PreAcquireForModifiedPageWriter;      // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x050*/     UINT64       PostAcquireForModifiedPageWriter;     // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x058*/     UINT64       PreReleaseForModifiedPageWriter;      // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x060*/     UINT64       PostReleaseForModifiedPageWriter;     // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
/*0x068*/     UINT64       PreQueryOpen;                         // FUNCT_00A0_0E52_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen*        
/*0x070*/     UINT64       PostQueryOpen;                        // FUNCT_00EF_11DB_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* 
          }FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS;                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                           
          typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      StructureSize;                                                  
/*0x004*/     ULONG32      SizeReturned;                                                   
/*0x008*/     ULONG32      Flags;                                                          
/*0x00C*/     ULONG32      DesiredReadAlignment;                                           
          }FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT;                                   
                                                                                           
          typedef struct _GDI_TEB_BATCH                 // 4 elements, 0x4E8 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x008*/     UINT64       HDC;                                                             
/*0x010*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH, *PGDI_TEB_BATCH;                                                  
                                                                                            
          typedef struct _GDI_TEB_BATCH32               // 4 elements, 0x4E0 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x004*/     ULONG32      HDC;                                                             
/*0x008*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH32, *PGDI_TEB_BATCH32;                                              
                                                                                            
          typedef struct _GDI_TEB_BATCH64               // 4 elements, 0x4E8 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x008*/     UINT64       HDC;                                                             
/*0x010*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH64, *PGDI_TEB_BATCH64;                                              
                                                                                            
          typedef union _SLIST_HEADER              // 3 elements, 0x10 bytes (sizeof) 
          {                                                                           
              struct                               // 2 elements, 0x10 bytes (sizeof) 
              {                                                                       
/*0x000*/         UINT64       Alignment;                                             
/*0x008*/         UINT64       Region;                                                
              };                                                                      
              struct                               // 4 elements, 0x10 bytes (sizeof) 
              {                                                                       
                  struct                           // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                   
/*0x000*/             UINT64       Depth : 16;     // 0 BitPosition                   
/*0x000*/             UINT64       Sequence : 48;  // 16 BitPosition                  
                  };                                                                  
                  struct                           // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                   
/*0x008*/             UINT64       Reserved : 4;   // 0 BitPosition                   
/*0x008*/             UINT64       NextEntry : 60; // 4 BitPosition                   
                  };                                                                  
              }HeaderX64;                                                             
          }SLIST_HEADER, *PSLIST_HEADER;                                              
                                                                                      
          typedef struct _GENERAL_LOOKASIDE                 // 22 elements, 0x80 bytes (sizeof)                                                                           
          {                                                                                                                                                               
              union                                         // 2 elements, 0x10 bytes (sizeof)                                                                            
              {                                                                                                                                                           
/*0x000*/         union _SLIST_HEADER ListHead;             // 3 elements, 0x10 bytes (sizeof)                                                                            
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead; // 1 elements, 0x8 bytes (sizeof)                                                                             
              };                                                                                                                                                          
/*0x010*/     UINT16       Depth;                                                                                                                                         
/*0x012*/     UINT16       MaximumDepth;                                                                                                                                  
/*0x014*/     ULONG32      TotalAllocates;                                                                                                                                
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x018*/         ULONG32      AllocateMisses;                                                                                                                            
/*0x018*/         ULONG32      AllocateHits;                                                                                                                              
              };                                                                                                                                                          
/*0x01C*/     ULONG32      TotalFrees;                                                                                                                                    
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x020*/         ULONG32      FreeMisses;                                                                                                                                
/*0x020*/         ULONG32      FreeHits;                                                                                                                                  
              };                                                                                                                                                          
/*0x024*/     enum _POOL_TYPE Type;                                                                                                                                       
/*0x028*/     ULONG32      Tag;                                                                                                                                           
/*0x02C*/     ULONG32      Size;                                                                                                                                          
              union                                         // 2 elements, 0x8 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x030*/         UINT64       AllocateEx;                  // FUNCT_00F2_08E3_AllocateEx*                                                                                
/*0x030*/         UINT64       Allocate;                    // FUNCT_00F2_08ED_Allocate*                                                                                  
              };                                                                                                                                                          
              union                                         // 2 elements, 0x8 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x038*/         UINT64       FreeEx;                      // FUNCT_00EF_08F2_FreeEx*                                                                                    
/*0x038*/         UINT64       Free;                        // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
              };                                                                                                                                                          
/*0x040*/     struct _LIST_ENTRY ListEntry;                 // 2 elements, 0x10 bytes (sizeof)                                                                            
/*0x050*/     ULONG32      LastTotalAllocates;                                                                                                                            
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x054*/         ULONG32      LastAllocateMisses;                                                                                                                        
/*0x054*/         ULONG32      LastAllocateHits;                                                                                                                          
              };                                                                                                                                                          
/*0x058*/     ULONG32      Future[2];                                                                                                                                     
/*0x060*/     UINT8        _PADDING0_[0x20];                                                                                                                              
          }GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;                                                                                                                        
                                                                                                                                                                          
          typedef struct _GENERAL_LOOKASIDE_POOL            // 22 elements, 0x60 bytes (sizeof)                                                                           
          {                                                                                                                                                               
              union                                         // 2 elements, 0x10 bytes (sizeof)                                                                            
              {                                                                                                                                                           
/*0x000*/         union _SLIST_HEADER ListHead;             // 3 elements, 0x10 bytes (sizeof)                                                                            
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead; // 1 elements, 0x8 bytes (sizeof)                                                                             
              };                                                                                                                                                          
/*0x010*/     UINT16       Depth;                                                                                                                                         
/*0x012*/     UINT16       MaximumDepth;                                                                                                                                  
/*0x014*/     ULONG32      TotalAllocates;                                                                                                                                
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x018*/         ULONG32      AllocateMisses;                                                                                                                            
/*0x018*/         ULONG32      AllocateHits;                                                                                                                              
              };                                                                                                                                                          
/*0x01C*/     ULONG32      TotalFrees;                                                                                                                                    
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x020*/         ULONG32      FreeMisses;                                                                                                                                
/*0x020*/         ULONG32      FreeHits;                                                                                                                                  
              };                                                                                                                                                          
/*0x024*/     enum _POOL_TYPE Type;                                                                                                                                       
/*0x028*/     ULONG32      Tag;                                                                                                                                           
/*0x02C*/     ULONG32      Size;                                                                                                                                          
              union                                         // 2 elements, 0x8 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x030*/         UINT64       AllocateEx;                  // FUNCT_00F2_08E3_AllocateEx*                                                                                
/*0x030*/         UINT64       Allocate;                    // FUNCT_00F2_08ED_Allocate*                                                                                  
              };                                                                                                                                                          
              union                                         // 2 elements, 0x8 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x038*/         UINT64       FreeEx;                      // FUNCT_00EF_08F2_FreeEx*                                                                                    
/*0x038*/         UINT64       Free;                        // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
              };                                                                                                                                                          
/*0x040*/     struct _LIST_ENTRY ListEntry;                 // 2 elements, 0x10 bytes (sizeof)                                                                            
/*0x050*/     ULONG32      LastTotalAllocates;                                                                                                                            
              union                                         // 2 elements, 0x4 bytes (sizeof)                                                                             
              {                                                                                                                                                           
/*0x054*/         ULONG32      LastAllocateMisses;                                                                                                                        
/*0x054*/         ULONG32      LastAllocateHits;                                                                                                                          
              };                                                                                                                                                          
/*0x058*/     ULONG32      Future[2];                                                                                                                                     
          }GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;                                                                                                              
                                                                                                                                                                          
          typedef struct _HANDLE_TABLE_FREE_LIST // 5 elements, 0x40 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _EX_PUSH_LOCK FreeListLock; // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       FirstFreeHandleEntry; // union _HANDLE_TABLE_ENTRY*      
/*0x010*/     UINT64       LastFreeHandleEntry;  // union _HANDLE_TABLE_ENTRY*      
/*0x018*/     LONG32       HandleCount;                                             
/*0x01C*/     ULONG32      HighWaterMark;                                           
/*0x020*/     UINT8        _PADDING0_[0x20];                                        
          }HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST;                                   
                                                                                    
          typedef struct _HANDLE_TABLE                                       // 17 elements, 0x80 bytes (sizeof) 
          {                                                                                                      
/*0x000*/     ULONG32      NextHandleNeedingPool;                                                                
/*0x004*/     LONG32       ExtraInfoPages;                                                                       
/*0x008*/     UINT64       TableCode;                                                                            
/*0x010*/     UINT64       QuotaProcess;                                     // struct _EPROCESS*                
/*0x018*/     struct _LIST_ENTRY HandleTableList;                            // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     ULONG32      UniqueProcessId;                                                                      
              union                                                          // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                  
/*0x02C*/         ULONG32      Flags;                                                                            
                  struct                                                     // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                                              
/*0x02C*/             UINT8        StrictFIFO : 1;                           // 0 BitPosition                    
/*0x02C*/             UINT8        EnableHandleExceptions : 1;               // 1 BitPosition                    
/*0x02C*/             UINT8        Rundown : 1;                              // 2 BitPosition                    
/*0x02C*/             UINT8        Duplicated : 1;                           // 3 BitPosition                    
/*0x02C*/             UINT8        RaiseUMExceptionOnInvalidHandleClose : 1; // 4 BitPosition                    
                  };                                                                                             
              };                                                                                                 
/*0x030*/     struct _EX_PUSH_LOCK HandleContentionEvent;                    // 7 elements, 0x8 bytes (sizeof)   
/*0x038*/     struct _EX_PUSH_LOCK HandleTableLock;                          // 7 elements, 0x8 bytes (sizeof)   
              union                                                          // 2 elements, 0x40 bytes (sizeof)  
              {                                                                                                  
/*0x040*/         struct _HANDLE_TABLE_FREE_LIST FreeLists[1];                                                   
                  struct                                                     // 2 elements, 0x40 bytes (sizeof)  
                  {                                                                                              
/*0x040*/             UINT8        ActualEntry[32];                                                              
/*0x060*/             UINT64       DebugInfo;                                // struct _HANDLE_TRACE_DEBUG_INFO* 
/*0x068*/             UINT8        _PADDING0_[0x18];                                                             
                  };                                                                                             
              };                                                                                                 
          }HANDLE_TABLE, *PHANDLE_TABLE;                                                                         
                                                                                                                 
          typedef union _HANDLE_TABLE_ENTRY             // 15 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     INT64        VolatileLowValue;                                                
/*0x000*/     INT64        LowValue;                                                        
              struct                                    // 2 elements, 0x10 bytes (sizeof)  
              {                                                                             
/*0x000*/         UINT64       InfoTable;               // struct _HANDLE_TABLE_ENTRY_INFO* 
                  union                                 // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x008*/             INT64        HighValue;                                               
/*0x008*/             UINT64       NextFreeHandleEntry; // union _HANDLE_TABLE_ENTRY*       
/*0x008*/             struct _EXHANDLE LeafHandleValue; // 4 elements, 0x8 bytes (sizeof)   
                  };                                                                        
              };                                                                            
/*0x000*/     INT64        RefCountField;                                                   
              struct                                    // 4 elements, 0x8 bytes (sizeof)   
              {                                                                             
/*0x000*/         UINT64       Unlocked : 1;            // 0 BitPosition                    
/*0x000*/         UINT64       RefCnt : 16;             // 1 BitPosition                    
/*0x000*/         UINT64       Attributes : 3;          // 17 BitPosition                   
/*0x000*/         UINT64       ObjectPointerBits : 44;  // 20 BitPosition                   
              };                                                                            
              struct                                    // 3 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x008*/         ULONG32      GrantedAccessBits : 25;  // 0 BitPosition                    
/*0x008*/         ULONG32      NoRightsUpgrade : 1;     // 25 BitPosition                   
/*0x008*/         ULONG32      Spare1 : 6;              // 26 BitPosition                   
              };                                                                            
/*0x00C*/     ULONG32      Spare2;                                                          
          }HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY;                                        
                                                                                            
          typedef struct _HANDLE_TABLE_ENTRY_INFO // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      AuditMask;                                               
/*0x004*/     ULONG32      MaxRelativeAccessMask;                                   
          }HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO;                                  
                                                                                    
          typedef struct _HANDLE_TRACE_DB_ENTRY // 4 elements, 0xA0 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _CLIENT_ID ClientId;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Handle;              // VOID*                           
/*0x018*/     ULONG32      Type;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                        
/*0x020*/     UINT64       StackTrace[16];      // VOID*                           
          }HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY;                                   
                                                                                   
          typedef struct _HANDLE_TRACE_DEBUG_INFO       // 6 elements, 0xF0 bytes (sizeof) 
          {                                                                                
/*0x000*/     LONG32       RefCount;                                                       
/*0x004*/     ULONG32      TableSize;                                                      
/*0x008*/     ULONG32      BitMaskFlags;                                                   
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                
/*0x010*/     struct _FAST_MUTEX CloseCompactionLock;   // 5 elements, 0x38 bytes (sizeof) 
/*0x048*/     ULONG32      CurrentStackIndex;                                              
/*0x04C*/     UINT8        _PADDING1_[0x4];                                                
/*0x050*/     struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];                                    
          }HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO;                                   
                                                                                           
          typedef struct _HEAP_UNPACKED_ENTRY         // 10 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       PreviousBlockPrivateData;  // VOID*                            
              union                                   // 3 elements, 0x8 bytes (sizeof)   
              {                                                                           
                  struct                              // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                       
/*0x008*/             UINT16       Size;                                                  
/*0x00A*/             UINT8        Flags;                                                 
/*0x00B*/             UINT8        SmallTagIndex;                                         
/*0x00C*/             UINT8        _PADDING0_[0x4];                                       
                  };                                                                      
                  struct                              // 4 elements, 0x8 bytes (sizeof)   
                  {                                                                       
/*0x008*/             ULONG32      SubSegmentCode;                                        
/*0x00C*/             UINT16       PreviousSize;                                          
                      union                           // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                   
/*0x00E*/                 UINT8        SegmentOffset;                                     
/*0x00E*/                 UINT8        LFHFlags;                                          
                      };                                                                  
/*0x00F*/             UINT8        UnusedBytes;                                           
                  };                                                                      
/*0x008*/         UINT64       CompactHeader;                                             
              };                                                                          
          }HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY;                                    
                                                                                          
          typedef struct _HEAP_EXTENDED_ENTRY      // 7 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       Reserved;               // VOID*                           
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x008*/             UINT16       FunctionIndex;                                     
/*0x00A*/             UINT16       ContextValue;                                      
                  };                                                                  
/*0x008*/         ULONG32      InterceptorValue;                                      
              };                                                                      
/*0x00C*/     UINT16       UnusedBytesLength;                                         
/*0x00E*/     UINT8        EntryOffset;                                               
/*0x00F*/     UINT8        ExtendedBlockSignature;                                    
          }HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY;                                   
                                                                                      
          typedef struct _HEAP_ENTRY                          // 26 elements, 0x10 bytes (sizeof) 
          {                                                                                       
              union                                           // 5 elements, 0x10 bytes (sizeof)  
              {                                                                                   
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry;  // 10 elements, 0x10 bytes (sizeof) 
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       PreviousBlockPrivateData;  // VOID*                            
                      union                                   // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 3 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       Size;                                                  
/*0x00A*/                     UINT8        Flags;                                                 
/*0x00B*/                     UINT8        SmallTagIndex;                                         
/*0x00C*/                     UINT8        _PADDING0_[0x4];                                       
                          };                                                                      
                          struct                              // 4 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      SubSegmentCode;                                        
/*0x00C*/                     UINT16       PreviousSize;                                          
                              union                           // 2 elements, 0x1 bytes (sizeof)   
                              {                                                                   
/*0x00E*/                         UINT8        SegmentOffset;                                     
/*0x00E*/                         UINT8        LFHFlags;                                          
                              };                                                                  
/*0x00F*/                     UINT8        UnusedBytes;                                           
                          };                                                                      
/*0x008*/                 UINT64       CompactHeader;                                             
                      };                                                                          
                  };                                                                              
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry;  // 7 elements, 0x10 bytes (sizeof)  
                  struct                                      // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       Reserved;                  // VOID*                            
                      union                                   // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       FunctionIndex;                                         
/*0x00A*/                     UINT16       ContextValue;                                          
                          };                                                                      
/*0x008*/                 ULONG32      InterceptorValue;                                          
                      };                                                                          
/*0x00C*/             UINT16       UnusedBytesLength;                                             
/*0x00E*/             UINT8        EntryOffset;                                                   
/*0x00F*/             UINT8        ExtendedBlockSignature;                                        
                  };                                                                              
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       ReservedForAlignment;      // VOID*                            
                      union                                   // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      Code1;                                                 
                              union                           // 2 elements, 0x4 bytes (sizeof)   
                              {                                                                   
                                  struct                      // 3 elements, 0x4 bytes (sizeof)   
                                  {                                                               
/*0x00C*/                             UINT16       Code2;                                         
/*0x00E*/                             UINT8        Code3;                                         
/*0x00F*/                             UINT8        Code4;                                         
                                  };                                                              
/*0x00C*/                         ULONG32      Code234;                                           
                              };                                                                  
                          };                                                                      
/*0x008*/                 UINT64       AgregateCode;                                              
                      };                                                                          
                  };                                                                              
              };                                                                                  
          }HEAP_ENTRY, *PHEAP_ENTRY;                                                              
                                                                                                  
          typedef struct _HEAP_SEGMENT                     // 14 elements, 0x70 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _HEAP_ENTRY Entry;                    // 26 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SegmentSignature;                                                   
/*0x014*/     ULONG32      SegmentFlags;                                                       
/*0x018*/     struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     UINT64       Heap;                           // struct _HEAP*                    
/*0x030*/     UINT64       BaseAddress;                    // VOID*                            
/*0x038*/     ULONG32      NumberOfPages;                                                      
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                    
/*0x040*/     UINT64       FirstEntry;                     // struct _HEAP_ENTRY*              
/*0x048*/     UINT64       LastValidEntry;                 // struct _HEAP_ENTRY*              
/*0x050*/     ULONG32      NumberOfUnCommittedPages;                                           
/*0x054*/     ULONG32      NumberOfUnCommittedRanges;                                          
/*0x058*/     UINT16       SegmentAllocatorBackTraceIndex;                                     
/*0x05A*/     UINT16       Reserved;                                                           
/*0x05C*/     UINT8        _PADDING1_[0x4];                                                    
/*0x060*/     struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x10 bytes (sizeof)  
          }HEAP_SEGMENT, *PHEAP_SEGMENT;                                                       
                                                                                               
          typedef union _RTL_RUN_ONCE // 3 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     UINT64       Ptr;       // VOID*                          
/*0x000*/     UINT64       Value;                                       
/*0x000*/     UINT64       State : 2; // 0 BitPosition                  
          }RTL_RUN_ONCE, *PRTL_RUN_ONCE;                                  
                                                                        
          typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA   // 4 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       CommitLimitBytes;                                              
/*0x008*/     UINT64       CommitLimitFailureCode;                                        
/*0x010*/     UINT64       MaxAllocationSizeBytes;                                        
/*0x018*/     UINT64       AllocationLimitFailureCode;                                    
          }RTL_HEAP_MEMORY_LIMIT_DATA, *PRTL_HEAP_MEMORY_LIMIT_DATA;                                   
                                                                                          
          typedef struct _HEAP_COUNTERS              // 23 elements, 0x78 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       TotalMemoryReserved;                                          
/*0x008*/     UINT64       TotalMemoryCommitted;                                         
/*0x010*/     UINT64       TotalMemoryLargeUCR;                                          
/*0x018*/     UINT64       TotalSizeInVirtualBlocks;                                     
/*0x020*/     ULONG32      TotalSegments;                                                
/*0x024*/     ULONG32      TotalUCRs;                                                    
/*0x028*/     ULONG32      CommittOps;                                                   
/*0x02C*/     ULONG32      DeCommitOps;                                                  
/*0x030*/     ULONG32      LockAcquires;                                                 
/*0x034*/     ULONG32      LockCollisions;                                               
/*0x038*/     ULONG32      CommitRate;                                                   
/*0x03C*/     ULONG32      DecommittRate;                                                
/*0x040*/     ULONG32      CommitFailures;                                               
/*0x044*/     ULONG32      InBlockCommitFailures;                                        
/*0x048*/     ULONG32      PollIntervalCounter;                                          
/*0x04C*/     ULONG32      DecommitsSinceLastCheck;                                      
/*0x050*/     ULONG32      HeapPollInterval;                                             
/*0x054*/     ULONG32      AllocAndFreeOps;                                              
/*0x058*/     ULONG32      AllocationIndicesActive;                                      
/*0x05C*/     ULONG32      InBlockDeccommits;                                            
/*0x060*/     UINT64       InBlockDeccomitSize;                                          
/*0x068*/     UINT64       HighWatermarkSize;                                            
/*0x070*/     UINT64       LastPolledSize;                                               
          }HEAP_COUNTERS, *PHEAP_COUNTERS;                                               
                                                                                         
          typedef struct _HEAP_TUNING_PARAMETERS   // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      CommittThresholdShift;                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     UINT64       MaxPreCommittThreshold;                                    
          }HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS;                                   
                                                                                      
          typedef struct _HEAP                                     // 59 elements, 0x2C0 bytes (sizeof) 
          {                                                                                             
              union                                                // 2 elements, 0x70 bytes (sizeof)   
              {                                                                                         
/*0x000*/         struct _HEAP_SEGMENT Segment;                    // 14 elements, 0x70 bytes (sizeof)  
                  struct                                           // 14 elements, 0x70 bytes (sizeof)  
                  {                                                                                     
/*0x000*/             struct _HEAP_ENTRY Entry;                    // 26 elements, 0x10 bytes (sizeof)  
/*0x010*/             ULONG32      SegmentSignature;                                                    
/*0x014*/             ULONG32      SegmentFlags;                                                        
/*0x018*/             struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x10 bytes (sizeof)   
/*0x028*/             UINT64       Heap;                           // struct _HEAP*                     
/*0x030*/             UINT64       BaseAddress;                    // VOID*                             
/*0x038*/             ULONG32      NumberOfPages;                                                       
/*0x03C*/             UINT8        _PADDING0_[0x4];                                                     
/*0x040*/             UINT64       FirstEntry;                     // struct _HEAP_ENTRY*               
/*0x048*/             UINT64       LastValidEntry;                 // struct _HEAP_ENTRY*               
/*0x050*/             ULONG32      NumberOfUnCommittedPages;                                            
/*0x054*/             ULONG32      NumberOfUnCommittedRanges;                                           
/*0x058*/             UINT16       SegmentAllocatorBackTraceIndex;                                      
/*0x05A*/             UINT16       Reserved;                                                            
/*0x05C*/             UINT8        _PADDING1_[0x4];                                                     
/*0x060*/             struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x10 bytes (sizeof)   
                  };                                                                                    
              };                                                                                        
/*0x070*/     ULONG32      Flags;                                                                       
/*0x074*/     ULONG32      ForceFlags;                                                                  
/*0x078*/     ULONG32      CompatibilityFlags;                                                          
/*0x07C*/     ULONG32      EncodeFlagMask;                                                              
/*0x080*/     struct _HEAP_ENTRY Encoding;                         // 26 elements, 0x10 bytes (sizeof)  
/*0x090*/     ULONG32      Interceptor;                                                                 
/*0x094*/     ULONG32      VirtualMemoryThreshold;                                                      
/*0x098*/     ULONG32      Signature;                                                                   
/*0x09C*/     UINT8        _PADDING2_[0x4];                                                             
/*0x0A0*/     UINT64       SegmentReserve;                                                              
/*0x0A8*/     UINT64       SegmentCommit;                                                               
/*0x0B0*/     UINT64       DeCommitFreeBlockThreshold;                                                  
/*0x0B8*/     UINT64       DeCommitTotalFreeThreshold;                                                  
/*0x0C0*/     UINT64       TotalFreeSize;                                                               
/*0x0C8*/     UINT64       MaximumAllocationSize;                                                       
/*0x0D0*/     UINT16       ProcessHeapsListIndex;                                                       
/*0x0D2*/     UINT16       HeaderValidateLength;                                                        
/*0x0D4*/     UINT8        _PADDING3_[0x4];                                                             
/*0x0D8*/     UINT64       HeaderValidateCopy;                     // VOID*                             
/*0x0E0*/     UINT16       NextAvailableTagIndex;                                                       
/*0x0E2*/     UINT16       MaximumTagIndex;                                                             
/*0x0E4*/     UINT8        _PADDING4_[0x4];                                                             
/*0x0E8*/     UINT64       TagEntries;                             // struct _HEAP_TAG_ENTRY*           
/*0x0F0*/     struct _LIST_ENTRY UCRList;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x100*/     UINT64       AlignRound;                                                                  
/*0x108*/     UINT64       AlignMask;                                                                   
/*0x110*/     struct _LIST_ENTRY VirtualAllocdBlocks;              // 2 elements, 0x10 bytes (sizeof)   
/*0x120*/     struct _LIST_ENTRY SegmentList;                      // 2 elements, 0x10 bytes (sizeof)   
/*0x130*/     UINT16       AllocatorBackTraceIndex;                                                     
/*0x132*/     UINT8        _PADDING5_[0x2];                                                             
/*0x134*/     ULONG32      NonDedicatedListLength;                                                      
/*0x138*/     UINT64       BlocksIndex;                            // VOID*                             
/*0x140*/     UINT64       UCRIndex;                               // VOID*                             
/*0x148*/     UINT64       PseudoTagEntries;                       // struct _HEAP_PSEUDO_TAG_ENTRY*    
/*0x150*/     struct _LIST_ENTRY FreeLists;                        // 2 elements, 0x10 bytes (sizeof)   
/*0x160*/     UINT64       LockVariable;                           // struct _HEAP_LOCK*                
/*0x168*/     UINT64       CommitRoutine;                          // FUNCT_00A0_1969_CommitRoutine*    
/*0x170*/     union _RTL_RUN_ONCE StackTraceInitVar;               // 3 elements, 0x8 bytes (sizeof)    
/*0x178*/     struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;  // 4 elements, 0x20 bytes (sizeof)   
/*0x198*/     UINT64       FrontEndHeap;                           // VOID*                             
/*0x1A0*/     UINT16       FrontHeapLockCount;                                                          
/*0x1A2*/     UINT8        FrontEndHeapType;                                                            
/*0x1A3*/     UINT8        RequestedFrontEndHeapType;                                                   
/*0x1A4*/     UINT8        _PADDING6_[0x4];                                                             
/*0x1A8*/     UINT64       FrontEndHeapUsageData;                  // WCHAR*                            
/*0x1B0*/     UINT16       FrontEndHeapMaximumIndex;                                                    
/*0x1B2*/     UINT8        FrontEndHeapStatusBitmap[129];                                               
/*0x233*/     UINT8        _PADDING7_[0x5];                                                             
/*0x238*/     struct _HEAP_COUNTERS Counters;                      // 23 elements, 0x78 bytes (sizeof)  
/*0x2B0*/     struct _HEAP_TUNING_PARAMETERS TuningParameters;     // 2 elements, 0x10 bytes (sizeof)   
          }HEAP, *PHEAP;                                                                                
                                                                                                        
          typedef struct _HEAP_BUCKET               // 5 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT16       BlockUnits;                                                
/*0x002*/     UINT8        SizeIndex;                                                 
              union                                 // 2 elements, 0x1 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x1 bytes (sizeof) 
                  {                                                                   
/*0x003*/             UINT8        UseAffinity : 1; // 0 BitPosition                  
/*0x003*/             UINT8        DebugFlags : 2;  // 1 BitPosition                  
                  };                                                                  
/*0x003*/         UINT8        Flags;                                                 
              };                                                                      
          }HEAP_BUCKET, *PHEAP_BUCKET;                                                
                                                                                      
          typedef union _HEAP_BUCKET_COUNTERS    // 3 elements, 0x8 bytes (sizeof) 
          {                                                                        
              struct                             // 2 elements, 0x8 bytes (sizeof) 
              {                                                                    
/*0x000*/         ULONG32      TotalBlocks;                                        
/*0x004*/         ULONG32      SubSegmentCounts;                                   
              };                                                                   
/*0x000*/     INT64        Aggregate64;                                            
          }HEAP_BUCKET_COUNTERS, *PHEAP_BUCKET_COUNTERS;                                  
                                                                                   
          typedef union _HEAP_BUCKET_RUN_INFO // 3 elements, 0x8 bytes (sizeof) 
          {                                                                     
              struct                          // 2 elements, 0x8 bytes (sizeof) 
              {                                                                 
/*0x000*/         ULONG32      Bucket;                                          
/*0x004*/         ULONG32      RunLength;                                       
              };                                                                
/*0x000*/     INT64        Aggregate64;                                         
          }HEAP_BUCKET_RUN_INFO, *PHEAP_BUCKET_RUN_INFO;                                  
                                                                                
          typedef struct _HEAP_DESCRIPTOR_KEY                      // 4 elements, 0x4 bytes (sizeof) 
          {                                                                                          
              union                                                // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                      
/*0x000*/         ULONG32      Key;                                                                  
                  struct                                           // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                                  
/*0x000*/             ULONG32      EncodedCommittedPageCount : 16; // 0 BitPosition                  
/*0x000*/             ULONG32      LargePageCost : 8;              // 16 BitPosition                 
/*0x000*/             ULONG32      UnitCount : 8;                  // 24 BitPosition                 
                  };                                                                                 
              };                                                                                     
          }HEAP_DESCRIPTOR_KEY, *PHEAP_DESCRIPTOR_KEY;                                               
                                                                                                     
          typedef struct _HEAP_ENTRY_EXTRA                  // 5 elements, 0x10 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                
                  struct                                    // 3 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x000*/             UINT16       AllocatorBackTraceIndex;                                    
/*0x002*/             UINT16       TagIndex;                                                   
/*0x004*/             UINT8        _PADDING0_[0x4];                                            
/*0x008*/             UINT64       Settable;                                                   
                  };                                                                           
                  struct                                    // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x000*/             UINT64       ZeroInit;                                                   
/*0x008*/             UINT64       ZeroInit1;                                                  
                  };                                                                           
              };                                                                               
          }HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA;                                               
                                                                                               
          typedef struct _HEAP_FAILURE_INFORMATION          // 16 elements, 0x6D0 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Version;                                                              
/*0x004*/     ULONG32      StructureSize;                                                        
/*0x008*/     enum _HEAP_FAILURE_TYPE FailureType;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x010*/     UINT64       HeapAddress;                     // VOID*                             
/*0x018*/     UINT64       Address;                         // VOID*                             
/*0x020*/     UINT64       Param1;                          // VOID*                             
/*0x028*/     UINT64       Param2;                          // VOID*                             
/*0x030*/     UINT64       Param3;                          // VOID*                             
/*0x038*/     UINT64       PreviousBlock;                   // VOID*                             
/*0x040*/     UINT64       NextBlock;                       // VOID*                             
/*0x048*/     struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry; // 2 elements, 0x10 bytes (sizeof)   
/*0x058*/     UINT64       StackTrace[32];                  // VOID*                             
/*0x158*/     UINT8        HeapMajorVersion;                                                     
/*0x159*/     UINT8        HeapMinorVersion;                                                     
/*0x15A*/     UINT8        _PADDING1_[0x6];                                                      
/*0x160*/     struct _EXCEPTION_RECORD ExceptionRecord;     // 6 elements, 0x98 bytes (sizeof)   
/*0x1F8*/     UINT8        _PADDING2_[0x8];                                                      
/*0x200*/     struct _CONTEXT ContextRecord;                // 64 elements, 0x4D0 bytes (sizeof) 
          }HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION;                                     
                                                                                                 
          typedef struct _HEAP_FREE_ENTRY                     // 28 elements, 0x20 bytes (sizeof) 
          {                                                                                       
              union                                           // 6 elements, 0x10 bytes (sizeof)  
              {                                                                                   
/*0x000*/         struct _HEAP_ENTRY HeapEntry;               // 26 elements, 0x10 bytes (sizeof) 
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry;  // 10 elements, 0x10 bytes (sizeof) 
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       PreviousBlockPrivateData;  // VOID*                            
                      union                                   // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 3 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       Size;                                                  
/*0x00A*/                     UINT8        Flags;                                                 
/*0x00B*/                     UINT8        SmallTagIndex;                                         
/*0x00C*/                     UINT8        _PADDING0_[0x4];                                       
                          };                                                                      
                          struct                              // 4 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      SubSegmentCode;                                        
/*0x00C*/                     UINT16       PreviousSize;                                          
                              union                           // 2 elements, 0x1 bytes (sizeof)   
                              {                                                                   
/*0x00E*/                         UINT8        SegmentOffset;                                     
/*0x00E*/                         UINT8        LFHFlags;                                          
                              };                                                                  
/*0x00F*/                     UINT8        UnusedBytes;                                           
                          };                                                                      
/*0x008*/                 UINT64       CompactHeader;                                             
                      };                                                                          
                  };                                                                              
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry;  // 7 elements, 0x10 bytes (sizeof)  
                  struct                                      // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       Reserved;                  // VOID*                            
                      union                                   // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       FunctionIndex;                                         
/*0x00A*/                     UINT16       ContextValue;                                          
                          };                                                                      
/*0x008*/                 ULONG32      InterceptorValue;                                          
                      };                                                                          
/*0x00C*/             UINT16       UnusedBytesLength;                                             
/*0x00E*/             UINT8        EntryOffset;                                                   
/*0x00F*/             UINT8        ExtendedBlockSignature;                                        
                  };                                                                              
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT64       ReservedForAlignment;      // VOID*                            
                      union                                   // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      Code1;                                                 
                              union                           // 2 elements, 0x4 bytes (sizeof)   
                              {                                                                   
                                  struct                      // 3 elements, 0x4 bytes (sizeof)   
                                  {                                                               
/*0x00C*/                             UINT16       Code2;                                         
/*0x00E*/                             UINT8        Code3;                                         
/*0x00F*/                             UINT8        Code4;                                         
                                  };                                                              
/*0x00C*/                         ULONG32      Code234;                                           
                              };                                                                  
                          };                                                                      
/*0x008*/                 UINT64       AgregateCode;                                              
                      };                                                                          
                  };                                                                              
              };                                                                                  
/*0x010*/     struct _LIST_ENTRY FreeList;                    // 2 elements, 0x10 bytes (sizeof)  
          }HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY;                                                    
                                                                                                  
          typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS // 4 elements, 0x4 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      SafeInputValidation : 1;   // 0 BitPosition                  
/*0x000*/     ULONG32      Padding : 1;               // 1 BitPosition                  
/*0x000*/     ULONG32      CommitLFHSubsegments : 1;  // 2 BitPosition                  
/*0x000*/     ULONG32      AllocateHeapFromEnv : 1;   // 3 BitPosition                  
          }HEAP_GLOBAL_APPCOMPAT_FLAGS, *PHEAP_GLOBAL_APPCOMPAT_FLAGS;                                  
                                                                                        
          typedef struct _HEAP_LARGE_ALLOC_DATA        // 8 elements, 0x28 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _RTL_BALANCED_NODE TreeNode;      // 6 elements, 0x18 bytes (sizeof) 
              union                                    // 2 elements, 0x8 bytes (sizeof)  
              {                                                                           
/*0x018*/         UINT64       VirtualAddress;                                            
/*0x018*/         UINT64       UnusedBytes : 16;       // 0 BitPosition                   
              };                                                                          
              struct                                   // 5 elements, 0x8 bytes (sizeof)  
              {                                                                           
/*0x020*/         UINT64       ExtraPresent : 1;       // 0 BitPosition                   
/*0x020*/         UINT64       GuardPageCount : 1;     // 1 BitPosition                   
/*0x020*/         UINT64       GuardPageAlignment : 6; // 2 BitPosition                   
/*0x020*/         UINT64       Spare : 4;              // 8 BitPosition                   
/*0x020*/         UINT64       AllocatedPages : 52;    // 12 BitPosition                  
              };                                                                          
          }HEAP_LARGE_ALLOC_DATA, *PHEAP_LARGE_ALLOC_DATA;                                   
                                                                                          
          typedef struct _HEAP_LFH_SUBSEGMENT_OWNER       // 10 elements, 0x38 bytes (sizeof) 
          {                                                                                   
              struct                                      // 2 elements, 0x1 bytes (sizeof)   
              {                                                                               
/*0x000*/         UINT8        IsBucket : 1;              // 0 BitPosition                    
/*0x000*/         UINT8        Spare0 : 7;                // 1 BitPosition                    
              };                                                                              
/*0x001*/     UINT8        BucketIndex;                                                       
              union                                       // 2 elements, 0x1 bytes (sizeof)   
              {                                                                               
/*0x002*/         UINT8        SlotCount;                                                     
/*0x002*/         UINT8        SlotIndex;                                                     
              };                                                                              
/*0x003*/     UINT8        Spare1;                                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                                   
/*0x008*/     UINT64       AvailableSubsegmentCount;                                          
/*0x010*/     UINT64       Lock;                                                              
/*0x018*/     struct _LIST_ENTRY AvailableSubsegmentList; // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _LIST_ENTRY FullSubsegmentList;      // 2 elements, 0x10 bytes (sizeof)  
          }HEAP_LFH_SUBSEGMENT_OWNER, *PHEAP_LFH_SUBSEGMENT_OWNER;                                    
                                                                                              
          typedef struct _HEAP_LFH_FAST_REF   // 3 elements, 0x8 bytes (sizeof) 
          {                                                                     
              union                           // 3 elements, 0x8 bytes (sizeof) 
              {                                                                 
/*0x000*/         UINT64       Target;        // VOID*                          
/*0x000*/         UINT64       Value;                                           
/*0x000*/         UINT64       RefCount : 12; // 0 BitPosition                  
              };                                                                
          }HEAP_LFH_FAST_REF, *PHEAP_LFH_FAST_REF;                                  
                                                                                
          typedef struct _HEAP_LFH_AFFINITY_SLOT          // 2 elements, 0x40 bytes (sizeof)  
          {                                                                                   
/*0x000*/     struct _HEAP_LFH_SUBSEGMENT_OWNER State;    // 10 elements, 0x38 bytes (sizeof) 
/*0x038*/     struct _HEAP_LFH_FAST_REF ActiveSubsegment; // 3 elements, 0x8 bytes (sizeof)   
          }HEAP_LFH_AFFINITY_SLOT, *PHEAP_LFH_AFFINITY_SLOT;                                    
                                                                                              
          typedef struct _HEAP_LFH_BUCKET              // 9 elements, 0x68 bytes (sizeof)  
          {                                                                                
/*0x000*/     struct _HEAP_LFH_SUBSEGMENT_OWNER State; // 10 elements, 0x38 bytes (sizeof) 
/*0x038*/     UINT64       TotalBlockCount;                                                
/*0x040*/     UINT64       TotalSubsegmentCount;                                           
/*0x048*/     ULONG32      ReciprocalBlockSize;                                            
/*0x04C*/     UINT8        Shift;                                                          
/*0x04D*/     UINT8        ContentionCount;                                                
/*0x04E*/     UINT8        _PADDING0_[0x2];                                                
/*0x050*/     UINT64       AffinityMappingLock;                                            
/*0x058*/     UINT64       ProcAffinityMapping;        // UINT8*                           
/*0x060*/     UINT64       AffinitySlots;              // struct _HEAP_LFH_AFFINITY_SLOT** 
          }HEAP_LFH_BUCKET, *PHEAP_LFH_BUCKET;                                             
                                                                                           
          typedef struct _HEAP_SUBALLOCATOR_CALLBACKS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       Allocate;                                                     
/*0x008*/     UINT64       Free;                                                         
/*0x010*/     UINT64       Commit;                                                       
/*0x018*/     UINT64       Decommit;                                                     
/*0x020*/     UINT64       ExtendContext;                                                
          }HEAP_SUBALLOCATOR_CALLBACKS, *PHEAP_SUBALLOCATOR_CALLBACKS;                                   
                                                                                         
          typedef struct _RTL_HP_LFH_CONFIG    // 2 elements, 0x4 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT16       MaxBlockSize;                                         
/*0x002*/     UINT16       MaxSubsegmentPages;                                   
          }RTL_HP_LFH_CONFIG, *PRTL_HP_LFH_CONFIG;                                  
                                                                                 
          typedef struct _HEAP_LFH_SUBSEGMENT_STAT // 2 elements, 0x2 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Index;                                                    
/*0x001*/     UINT8        Count;                                                    
          }HEAP_LFH_SUBSEGMENT_STAT, *PHEAP_LFH_SUBSEGMENT_STAT;                                  
                                                                                     
          typedef union _HEAP_LFH_SUBSEGMENT_STATS         // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _HEAP_LFH_SUBSEGMENT_STAT Buckets[4];                                   
/*0x000*/     UINT64       AllStats;                       // VOID*                          
          }HEAP_LFH_SUBSEGMENT_STATS, *PHEAP_LFH_SUBSEGMENT_STATS;                                  
                                                                                             
          typedef struct _HEAP_LFH_CONTEXT                   // 10 elements, 0x4C0 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       BackendCtx;                       // VOID*                             
/*0x008*/     struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks; // 5 elements, 0x28 bytes (sizeof)   
/*0x030*/     UINT64       AffinityModArray;                 // UINT8*                            
/*0x038*/     UINT8        MaxAffinity;                                                           
/*0x039*/     UINT8        LockType;                                                              
/*0x03A*/     INT16        MemStatsOffset;                                                        
/*0x03C*/     struct _RTL_HP_LFH_CONFIG Config;              // 2 elements, 0x4 bytes (sizeof)    
/*0x040*/     union _HEAP_LFH_SUBSEGMENT_STATS BucketStats;  // 2 elements, 0x8 bytes (sizeof)    
/*0x048*/     UINT64       SubsegmentCreationLock;                                                
/*0x050*/     UINT8        _PADDING0_[0x30];                                                      
/*0x080*/     UINT64       Buckets[129];                     // struct _HEAP_LFH_BUCKET*          
/*0x488*/     UINT8        _PADDING1_[0x38];                                                      
          }HEAP_LFH_CONTEXT, *PHEAP_LFH_CONTEXT;                                                  
                                                                                                  
          typedef struct _HEAP_LFH_MEM_POLICIES              // 4 elements, 0x4 bytes (sizeof) 
          {                                                                                    
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x000*/             ULONG32      DisableAffinity : 1;      // 0 BitPosition                  
/*0x000*/             ULONG32      SlowSubsegmentGrowth : 1; // 1 BitPosition                  
/*0x000*/             ULONG32      Spare : 30;               // 2 BitPosition                  
                  };                                                                           
/*0x000*/         ULONG32      AllPolicies;                                                    
              };                                                                               
          }HEAP_LFH_MEM_POLICIES, *PHEAP_LFH_MEM_POLICIES;                                     
                                                                                               
          typedef union _HEAP_LFH_ONDEMAND_POINTER       // 5 elements, 0x8 bytes (sizeof) 
          {                                                                                
              struct                                     // 3 elements, 0x2 bytes (sizeof) 
              {                                                                            
/*0x000*/         UINT16       Invalid : 1;              // 0 BitPosition                  
/*0x000*/         UINT16       AllocationInProgress : 1; // 1 BitPosition                  
/*0x000*/         UINT16       Spare0 : 14;              // 2 BitPosition                  
              };                                                                           
/*0x002*/     UINT16       UsageData;                                                      
/*0x000*/     UINT64       AllBits;                      // VOID*                          
          }HEAP_LFH_ONDEMAND_POINTER, *PHEAP_LFH_ONDEMAND_POINTER;                                  
                                                                                           
          typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE // 3 elements, 0x8 bytes (sizeof) 
          {                                                                               
              struct                                    // 2 elements, 0x8 bytes (sizeof) 
              {                                                                           
/*0x000*/         UINT64       DelayFree : 1;           // 0 BitPosition                  
/*0x000*/         UINT64       Count : 63;              // 1 BitPosition                  
              };                                                                          
/*0x000*/     UINT64       AllBits;                     // VOID*                          
          }HEAP_LFH_SUBSEGMENT_DELAY_FREE, *PHEAP_LFH_SUBSEGMENT_DELAY_FREE;                                  
                                                                                          
          typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS // 3 elements, 0x4 bytes (sizeof) 
          {                                                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                 
                  struct                                      // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                             
/*0x000*/             UINT16       BlockSize;                                                   
/*0x002*/             UINT16       FirstBlockOffset;                                            
                  };                                                                            
/*0x000*/         ULONG32      EncodedData;                                                     
              };                                                                                
          }HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, *PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;                                  
                                                                                                
          typedef struct _HEAP_LFH_SUBSEGMENT                           // 17 elements, 0x40 bytes (sizeof)   
          {                                                                                                   
              union                                                     // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                               
/*0x000*/         struct _LIST_ENTRY ListEntry;                         // 2 elements, 0x10 bytes (sizeof)    
/*0x000*/         struct _SLIST_ENTRY Link;                             // 1 elements, 0x10 bytes (sizeof)    
              };                                                                                              
              union                                                     // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                               
/*0x010*/         UINT64       Owner;                                   // struct _HEAP_LFH_SUBSEGMENT_OWNER* 
/*0x010*/         union _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;      // 3 elements, 0x8 bytes (sizeof)     
              };                                                                                              
/*0x018*/     UINT64       CommitLock;                                                                        
              union                                                     // 3 elements, 0x4 bytes (sizeof)     
              {                                                                                               
                  struct                                                // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                           
/*0x020*/             UINT16       FreeCount;                                                                 
/*0x022*/             UINT16       BlockCount;                                                                
                  };                                                                                          
/*0x020*/         INT16        InterlockedShort;                                                              
/*0x020*/         LONG32       InterlockedLong;                                                               
              };                                                                                              
/*0x024*/     UINT16       FreeHint;                                                                          
/*0x026*/     UINT8        Location;                                                                          
/*0x027*/     UINT8        Spare;                                                                             
/*0x028*/     struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets; // 3 elements, 0x4 bytes (sizeof)     
/*0x02C*/     UINT8        CommitUnitShift;                                                                   
/*0x02D*/     UINT8        CommitUnitCount;                                                                   
/*0x02E*/     UINT16       CommitStateOffset;                                                                 
/*0x030*/     UINT64       BlockBitmap[1];                                                                    
/*0x038*/     UINT8        _PADDING0_[0x8];                                                                   
          }HEAP_LFH_SUBSEGMENT, *PHEAP_LFH_SUBSEGMENT;                                                        
                                                                                                              
          typedef struct _HEAP_LFH_UNUSED_BYTES_INFO  // 4 elements, 0x2 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x2 bytes (sizeof) 
              {                                                                         
                  struct                              // 3 elements, 0x2 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       UnusedBytes : 14;  // 0 BitPosition                  
/*0x000*/             UINT16       ExtraPresent : 1;  // 14 BitPosition                 
/*0x000*/             UINT16       OneByteUnused : 1; // 15 BitPosition                 
                  };                                                                    
/*0x000*/         UINT8        Bytes[2];                                                
              };                                                                        
          }HEAP_LFH_UNUSED_BYTES_INFO, *PHEAP_LFH_UNUSED_BYTES_INFO;                                  
                                                                                        
          typedef struct _HEAP_LIST_LOOKUP  // 9 elements, 0x38 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       ExtendedLookup;  // struct _HEAP_LIST_LOOKUP*       
/*0x008*/     ULONG32      ArraySize;                                          
/*0x00C*/     ULONG32      ExtraItem;                                          
/*0x010*/     ULONG32      ItemCount;                                          
/*0x014*/     ULONG32      OutOfRangeItems;                                    
/*0x018*/     ULONG32      BaseIndex;                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                    
/*0x020*/     UINT64       ListHead;        // struct _LIST_ENTRY*             
/*0x028*/     UINT64       ListsInUseUlong; // ULONG32*                        
/*0x030*/     UINT64       ListHints;       // struct _LIST_ENTRY**            
          }HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP;                                   
                                                                               
          typedef struct _HEAP_LOCAL_DATA             // 5 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     union _SLIST_HEADER DeletedSubSegments; // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       CrtZone;                   // struct _LFH_BLOCK_ZONE*         
/*0x018*/     UINT64       LowFragHeap;               // struct _LFH_HEAP*               
/*0x020*/     ULONG32      Sequence;                                                     
/*0x024*/     ULONG32      DeleteRateThreshold;                                          
/*0x028*/     UINT8        _PADDING0_[0x8];                                              
          }HEAP_LOCAL_DATA, *PHEAP_LOCAL_DATA;                                           
                                                                                         
          typedef struct _HEAP_LOCAL_SEGMENT_INFO   // 9 elements, 0xC0 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       LocalData;               // struct _HEAP_LOCAL_DATA*        
/*0x008*/     UINT64       ActiveSubsegment;        // struct _HEAP_SUBSEGMENT*        
/*0x010*/     UINT64       CachedItems[16];         // struct _HEAP_SUBSEGMENT*        
/*0x090*/     union _SLIST_HEADER SListHeader;      // 3 elements, 0x10 bytes (sizeof) 
/*0x0A0*/     union _HEAP_BUCKET_COUNTERS Counters; // 3 elements, 0x8 bytes (sizeof)  
/*0x0A8*/     ULONG32      LastOpSequence;                                             
/*0x0AC*/     UINT16       BucketIndex;                                                
/*0x0AE*/     UINT16       LastUsed;                                                   
/*0x0B0*/     UINT16       NoThrashCount;                                              
/*0x0B2*/     UINT8        _PADDING0_[0xE];                                            
          }HEAP_LOCAL_SEGMENT_INFO, *PHEAP_LOCAL_SEGMENT_INFO;                                   
                                                                                       
          typedef struct _RTL_CRITICAL_SECTION // 6 elements, 0x28 bytes (sizeof)     
          {                                                                           
/*0x000*/     UINT64       DebugInfo;          // struct _RTL_CRITICAL_SECTION_DEBUG* 
/*0x008*/     LONG32       LockCount;                                                 
/*0x00C*/     LONG32       RecursionCount;                                            
/*0x010*/     UINT64       OwningThread;       // VOID*                               
/*0x018*/     UINT64       LockSemaphore;      // VOID*                               
/*0x020*/     UINT64       SpinCount;                                                 
          }RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;                                       
                                                                                      
          typedef struct _HEAP_LOCK                             // 1 elements, 0x28 bytes (sizeof) 
          {                                                                                        
              union                                             // 1 elements, 0x28 bytes (sizeof) 
              {                                                                                    
/*0x000*/         struct _RTL_CRITICAL_SECTION CriticalSection; // 6 elements, 0x28 bytes (sizeof) 
              }Lock;                                                                               
          }HEAP_LOCK, *PHEAP_LOCK;                                                                 
                                                                                                   
          typedef struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT64       SmallPagesInUseWithinLarge;                                           
/*0x008*/     UINT64       OpportunisticLargePageCount;                                          
          }HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS, *PHEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;                                   
                                                                                                 
          typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR     // 12 elements, 0x20 bytes (sizeof) 
          {                                                                                  
              union                                      // 2 elements, 0x18 bytes (sizeof)  
              {                                                                              
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;    // 6 elements, 0x18 bytes (sizeof)  
                  struct                                 // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                          
/*0x000*/             ULONG32      TreeSignature;                                            
/*0x004*/             ULONG32      UnusedBytes;                                              
                      struct                             // 2 elements, 0x2 bytes (sizeof)   
                      {                                                                      
/*0x008*/                 UINT16       ExtraPresent : 1; // 0 BitPosition                    
/*0x008*/                 UINT16       Spare0 : 15;      // 1 BitPosition                    
                      };                                                                     
                  };                                                                         
              };                                                                             
/*0x018*/     UINT8        RangeFlags;                                                       
/*0x019*/     UINT8        CommittedPageCount;                                               
/*0x01A*/     UINT16       Spare;                                                            
              union                                      // 2 elements, 0x4 bytes (sizeof)   
              {                                                                              
/*0x01C*/         struct _HEAP_DESCRIPTOR_KEY Key;       // 4 elements, 0x4 bytes (sizeof)   
                  struct                                 // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                          
/*0x01C*/             UINT8        Align[3];                                                 
                      union                              // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                      
/*0x01F*/                 UINT8        UnitOffset;                                           
/*0x01F*/                 UINT8        UnitSize;                                             
                      };                                                                     
                  };                                                                         
              };                                                                             
          }HEAP_PAGE_RANGE_DESCRIPTOR, *PHEAP_PAGE_RANGE_DESCRIPTOR;                                    
                                                                                             
          typedef union _HEAP_PAGE_SEGMENT                       // 5 elements, 0x2000 bytes (sizeof)     
          {                                                                                               
              struct                                             // 4 elements, 0x2000 bytes (sizeof)     
              {                                                                                           
/*0x000*/         struct _LIST_ENTRY ListEntry;                  // 2 elements, 0x10 bytes (sizeof)       
/*0x010*/         UINT64       Signature;                                                                 
/*0x018*/         UINT64       SegmentCommitState;               // union _HEAP_SEGMENT_MGR_COMMIT_STATE* 
/*0x020*/         UINT8        UnusedWatermark;                                                           
/*0x021*/         UINT8        _PADDING0_[0x1FDF];                                                        
              };                                                                                          
/*0x000*/     struct _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];                                          
          }HEAP_PAGE_SEGMENT, *PHEAP_PAGE_SEGMENT;                                                        
                                                                                                          
          typedef struct _HEAP_PSEUDO_TAG_ENTRY // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Allocs;                                                 
/*0x004*/     ULONG32      Frees;                                                  
/*0x008*/     UINT64       Size;                                                   
          }HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY;                                   
                                                                                   
          typedef struct _RTL_HP_SEG_ALLOC_POLICY // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       MinLargePages;                                            
/*0x008*/     UINT64       MaxLargePages;                                            
/*0x010*/     UINT8        MinUtilization;                                           
/*0x011*/     UINT8        _PADDING0_[0x7];                                          
          }RTL_HP_SEG_ALLOC_POLICY, *PRTL_HP_SEG_ALLOC_POLICY;                                   
                                                                                     
          typedef struct _HEAP_RUNTIME_MEMORY_STATS                          // 6 elements, 0x58 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     UINT64       TotalReservedPages;                                                                  
/*0x008*/     UINT64       TotalCommittedPages;                                                                 
/*0x010*/     UINT64       FreeCommittedPages;                                                                  
/*0x018*/     UINT64       LfhFreeCommittedPages;                                                               
/*0x020*/     struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS LargePageStats[2];                                    
/*0x040*/     struct _RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy;    // 3 elements, 0x18 bytes (sizeof) 
          }HEAP_RUNTIME_MEMORY_STATS, *PHEAP_RUNTIME_MEMORY_STATS;                                              
                                                                                                                
          typedef struct _RTL_HP_ENV_HANDLE // 1 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       h[2];            // VOID*                           
          }RTL_HP_ENV_HANDLE, *PRTL_HP_ENV_HANDLE;                                   
                                                                               
          typedef struct _HEAP_SEG_CONTEXT                   // 20 elements, 0xC0 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT64       SegmentMask;                                                          
/*0x008*/     UINT8        UnitShift;                                                            
/*0x009*/     UINT8        PagesPerUnitShift;                                                    
/*0x00A*/     UINT8        FirstDescriptorIndex;                                                 
/*0x00B*/     UINT8        CachedCommitSoftShift;                                                
/*0x00C*/     UINT8        CachedCommitHighShift;                                                
              union                                          // 4 elements, 0x1 bytes (sizeof)   
              {                                                                                  
                  struct                                     // 3 elements, 0x1 bytes (sizeof)   
                  {                                                                              
/*0x00D*/             UINT8        LargePagePolicy : 3;      // 0 BitPosition                    
/*0x00D*/             UINT8        FullDecommit : 1;         // 3 BitPosition                    
/*0x00D*/             UINT8        ReleaseEmptySegments : 1; // 4 BitPosition                    
                  };                                                                             
/*0x00D*/         UINT8        AllFlags;                                                         
              }Flags;                                                                            
/*0x010*/     ULONG32      MaxAllocationSize;                                                    
/*0x014*/     INT16        OlpStatsOffset;                                                       
/*0x016*/     INT16        MemStatsOffset;                                                       
/*0x018*/     UINT64       LfhContext;                       // VOID*                            
/*0x020*/     UINT64       VsContext;                        // VOID*                            
/*0x028*/     struct _RTL_HP_ENV_HANDLE EnvHandle;           // 1 elements, 0x10 bytes (sizeof)  
/*0x038*/     UINT64       Heap;                             // VOID*                            
/*0x040*/     UINT64       SegmentLock;                                                          
/*0x048*/     struct _LIST_ENTRY SegmentListHead;            // 2 elements, 0x10 bytes (sizeof)  
/*0x058*/     UINT64       SegmentCount;                                                         
/*0x060*/     struct _RTL_RB_TREE FreePageRanges;            // 3 elements, 0x10 bytes (sizeof)  
/*0x070*/     UINT64       FreeSegmentListLock;                                                  
/*0x078*/     struct _SINGLE_LIST_ENTRY FreeSegmentList[2];                                      
/*0x088*/     UINT8        _PADDING0_[0x38];                                                     
          }HEAP_SEG_CONTEXT, *PHEAP_SEG_CONTEXT;                                                 
                                                                                                 
          typedef union _HEAP_SEGMENT_MGR_COMMIT_STATE           // 6 elements, 0x2 bytes (sizeof) 
          {                                                                                        
              struct                                             // 4 elements, 0x2 bytes (sizeof) 
              {                                                                                    
/*0x000*/         UINT16       CommittedPageCount : 11;          // 0 BitPosition                  
/*0x000*/         UINT16       Spare : 3;                        // 11 BitPosition                 
/*0x000*/         UINT16       LargePageOperationInProgress : 1; // 14 BitPosition                 
/*0x000*/         UINT16       LargePageCommit : 1;              // 15 BitPosition                 
              };                                                                                   
/*0x000*/     UINT16       EntireUShortV;                                                          
/*0x000*/     UINT16       EntireUShort;                                                           
          }HEAP_SEGMENT_MGR_COMMIT_STATE, *PHEAP_SEGMENT_MGR_COMMIT_STATE;                                  
                                                                                                   
          typedef struct _INTERLOCK_SEQ               // 5 elements, 0x4 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x4 bytes (sizeof) 
              {                                                                         
                  struct                              // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       Depth;                                               
                      union                           // 2 elements, 0x2 bytes (sizeof) 
                      {                                                                 
                          struct                      // 2 elements, 0x2 bytes (sizeof) 
                          {                                                             
/*0x002*/                     UINT16       Hint : 15; // 0 BitPosition                  
/*0x002*/                     UINT16       Lock : 1;  // 15 BitPosition                 
                          };                                                            
/*0x002*/                 UINT16       Hint16;                                          
                      };                                                                
                  };                                                                    
/*0x000*/         LONG32       Exchg;                                                   
              };                                                                        
          }INTERLOCK_SEQ, *PINTERLOCK_SEQ;                                              
                                                                                        
          typedef struct _HEAP_SUBSEGMENT               // 12 elements, 0x40 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT64       LocalInfo;                   // struct _HEAP_LOCAL_SEGMENT_INFO* 
/*0x008*/     UINT64       UserBlocks;                  // struct _HEAP_USERDATA_HEADER*    
/*0x010*/     union _SLIST_HEADER DelayFreeList;        // 3 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _INTERLOCK_SEQ AggregateExchg;     // 5 elements, 0x4 bytes (sizeof)   
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
                  struct                                // 5 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x024*/             UINT16       BlockSize;                                               
/*0x026*/             UINT16       Flags;                                                   
/*0x028*/             UINT16       BlockCount;                                              
/*0x02A*/             UINT8        SizeIndex;                                               
/*0x02B*/             UINT8        AffinityIndex;                                           
                  };                                                                        
/*0x024*/         ULONG32      Alignment[2];                                                
              };                                                                            
/*0x02C*/     ULONG32      Lock;                                                            
/*0x030*/     struct _SINGLE_LIST_ENTRY SFreeListEntry; // 1 elements, 0x8 bytes (sizeof)   
/*0x038*/     UINT8        _PADDING0_[0x8];                                                 
          }HEAP_SUBSEGMENT, *PHEAP_SUBSEGMENT;                                              
                                                                                            
          typedef struct _HEAP_TAG_ENTRY          // 6 elements, 0x48 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Allocs;                                                   
/*0x004*/     ULONG32      Frees;                                                    
/*0x008*/     UINT64       Size;                                                     
/*0x010*/     UINT16       TagIndex;                                                 
/*0x012*/     UINT16       CreatorBackTraceIndex;                                    
/*0x014*/     WCHAR        TagName[24];                                              
/*0x044*/     UINT8        _PADDING0_[0x4];                                          
          }HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY;                                         
                                                                                     
          typedef struct _HEAP_UCR_DESCRIPTOR  // 4 elements, 0x30 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY SegmentEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     UINT64       Address;            // VOID*                           
/*0x028*/     UINT64       Size;                                                  
          }HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR;                                   
                                                                                  
          typedef struct _HEAP_USERDATA_OFFSETS           // 3 elements, 0x4 bytes (sizeof) 
          {                                                                                 
              union                                       // 2 elements, 0x4 bytes (sizeof) 
              {                                                                             
                  struct                                  // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                         
/*0x000*/             UINT16       FirstAllocationOffset;                                   
/*0x002*/             UINT16       BlockStride;                                             
                  };                                                                        
/*0x000*/         ULONG32      StrideAndOffset;                                             
              };                                                                            
          }HEAP_USERDATA_OFFSETS, *PHEAP_USERDATA_OFFSETS;                                  
                                                                                            
          typedef struct _RTL_BITMAP_EX  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       SizeOfBitMap;                                    
/*0x008*/     UINT64       Buffer;       // UINT64*                         
          }RTL_BITMAP_EX, *PRTL_BITMAP_EX;                                   
                                                                            
          typedef struct _HEAP_USERDATA_HEADER              // 11 elements, 0x38 bytes (sizeof) 
          {                                                                                     
              union                                         // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                 
/*0x000*/         struct _SINGLE_LIST_ENTRY SFreeListEntry; // 1 elements, 0x8 bytes (sizeof)   
/*0x000*/         UINT64       SubSegment;                  // struct _HEAP_SUBSEGMENT*         
              };                                                                                
/*0x008*/     UINT64       Reserved;                        // VOID*                            
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x010*/         ULONG32      SizeIndexAndPadding;                                             
                  struct                                    // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                             
/*0x010*/             UINT8        SizeIndex;                                                   
/*0x011*/             UINT8        GuardPagePresent;                                            
/*0x012*/             UINT16       PaddingBytes;                                                
                  };                                                                            
              };                                                                                
/*0x014*/     ULONG32      Signature;                                                           
/*0x018*/     struct _HEAP_USERDATA_OFFSETS EncodedOffsets; // 3 elements, 0x4 bytes (sizeof)   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                     
/*0x020*/     struct _RTL_BITMAP_EX BusyBitmap;             // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       BitmapData[1];                                                       
          }HEAP_USERDATA_HEADER, *PHEAP_USERDATA_HEADER;                                        
                                                                                                
          typedef struct _HEAP_VAMGR_ALLOCATOR    // 14 elements, 0x30 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       TreeLock;                                                  
/*0x008*/     struct _RTL_RB_TREE FreeRanges;     // 3 elements, 0x10 bytes (sizeof)  
/*0x018*/     UINT64       VaSpace;               // struct _HEAP_VAMGR_VASPACE*      
/*0x020*/     UINT64       PartitionHandle;       // VOID*                            
/*0x028*/     UINT16       ChunksPerRegion;                                           
/*0x02A*/     UINT16       RefCount;                                                  
/*0x02C*/     UINT8        AllocatorIndex;                                            
/*0x02D*/     UINT8        NumaNode;                                                  
              struct                              // 5 elements, 0x1 bytes (sizeof)   
              {                                                                       
/*0x02E*/         UINT8        LockType : 1;      // 0 BitPosition                    
/*0x02E*/         UINT8        MemoryType : 2;    // 1 BitPosition                    
/*0x02E*/         UINT8        ConstrainedVA : 1; // 3 BitPosition                    
/*0x02E*/         UINT8        AllowFreeHead : 1; // 4 BitPosition                    
/*0x02E*/         UINT8        Spare0 : 3;        // 5 BitPosition                    
              };                                                                      
/*0x02F*/     UINT8        Spare1;                                                    
          }HEAP_VAMGR_ALLOCATOR, *PHEAP_VAMGR_ALLOCATOR;                                    
                                                                                      
          typedef struct _RTL_CSPARSE_BITMAP          // 11 elements, 0x40 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       CommitDirectory;                                               
/*0x008*/     UINT64       CommitBitmap;              // UINT64*                          
/*0x010*/     UINT64       UserBitmap;                // UINT64*                          
/*0x018*/     INT64        BitCount;                                                      
/*0x020*/     UINT64       BitmapLock;                                                    
/*0x028*/     UINT64       DecommitPageIndex;                                             
/*0x030*/     UINT64       RtlpCSparseBitmapWakeLock;                                     
/*0x038*/     UINT8        LockType;                                                      
/*0x039*/     UINT8        AddressSpace;                                                  
/*0x03A*/     UINT8        MemType;                                                       
/*0x03B*/     UINT8        AllocAlignment;                                                
/*0x03C*/     UINT8        _PADDING0_[0x4];                                               
          }RTL_CSPARSE_BITMAP, *PRTL_CSPARSE_BITMAP;                                      
                                                                                          
          typedef struct _RTL_SPARSE_ARRAY       // 3 elements, 0x50 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _RTL_CSPARSE_BITMAP Bitmap; // 11 elements, 0x40 bytes (sizeof) 
/*0x040*/     UINT64       ElementCount;                                             
/*0x048*/     ULONG32      ElementSizeShift;                                         
/*0x04C*/     UINT8        _PADDING0_[0x4];                                          
          }RTL_SPARSE_ARRAY, *PRTL_SPARSE_ARRAY;                                     
                                                                                     
          typedef struct _HEAP_VAMGR_VASPACE                     // 3 elements, 0x60 bytes (sizeof) 
          {                                                                                         
/*0x000*/     enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                         
/*0x008*/     UINT64       BaseAddress;                                                             
/*0x010*/     struct _RTL_SPARSE_ARRAY VaRangeArray;             // 3 elements, 0x50 bytes (sizeof) 
          }HEAP_VAMGR_VASPACE, *PHEAP_VAMGR_VASPACE;                                                
                                                                                                    
          typedef struct _HEAP_VAMGR_CTX                    // 4 elements, 0x3040 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _HEAP_VAMGR_VASPACE VaSpace;           // 3 elements, 0x60 bytes (sizeof)   
/*0x060*/     UINT64       AllocatorLock;                                                        
/*0x068*/     ULONG32      AllocatorCount;                                                       
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x070*/     struct _HEAP_VAMGR_ALLOCATOR Allocators[255];                                      
          }HEAP_VAMGR_CTX, *PHEAP_VAMGR_CTX;                                                     
                                                                                                 
          typedef struct _HEAP_VAMGR_RANGE          // 12 elements, 0x20 bytes (sizeof) 
          {                                                                             
              union                                 // 5 elements, 0x18 bytes (sizeof)  
              {                                                                         
/*0x000*/         struct _RTL_BALANCED_NODE RbNode; // 6 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY Next;   // 1 elements, 0x8 bytes (sizeof)   
                  struct                            // 4 elements, 0x1 bytes (sizeof)   
                  {                                                                     
/*0x000*/             UINT8        Allocated : 1;   // 0 BitPosition                    
/*0x000*/             UINT8        Internal : 1;    // 1 BitPosition                    
/*0x000*/             UINT8        Standalone : 1;  // 2 BitPosition                    
/*0x000*/             UINT8        Spare0 : 5;      // 3 BitPosition                    
                  };                                                                    
/*0x001*/         UINT8        AllocatorIndex;                                          
/*0x008*/         UINT64       OwnerCtx[2];                                             
              };                                                                        
              union                                 // 3 elements, 0x8 bytes (sizeof)   
              {                                                                         
/*0x018*/         UINT64       SizeInChunks;                                            
                  struct                            // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                     
/*0x018*/             UINT16       ChunkCount;                                          
/*0x01A*/             UINT16       PrevChunkCount;                                      
/*0x01C*/             UINT8        _PADDING0_[0x4];                                     
                  };                                                                    
/*0x018*/         UINT64       Signature;                                               
              };                                                                        
          }HEAP_VAMGR_RANGE, *PHEAP_VAMGR_RANGE;                                        
                                                                                        
          typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY // 5 elements, 0x40 bytes (sizeof)  
          {                                                                            
/*0x000*/     struct _LIST_ENTRY Entry;            // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _HEAP_ENTRY_EXTRA ExtraStuff; // 5 elements, 0x10 bytes (sizeof)  
/*0x020*/     UINT64       CommitSize;                                                 
/*0x028*/     UINT64       ReserveSize;                                                
/*0x030*/     struct _HEAP_ENTRY BusyBlock;        // 26 elements, 0x10 bytes (sizeof) 
          }HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY;                                    
                                                                                       
          typedef union _HEAP_VS_CHUNK_HEADER_SIZE      // 7 elements, 0x8 bytes (sizeof) 
          {                                                                               
              struct                                    // 2 elements, 0x8 bytes (sizeof) 
              {                                                                           
                  struct                                // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                       
/*0x000*/             ULONG32      MemoryCost : 16;     // 0 BitPosition                  
/*0x000*/             ULONG32      UnsafeSize : 16;     // 16 BitPosition                 
                  };                                                                      
                  struct                                // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                       
/*0x004*/             ULONG32      UnsafePrevSize : 16; // 0 BitPosition                  
/*0x004*/             ULONG32      Allocated : 8;       // 16 BitPosition                 
                  };                                                                      
              };                                                                          
/*0x000*/     UINT16       KeyUShort;                                                     
/*0x000*/     ULONG32      KeyULong;                                                      
/*0x000*/     UINT64       HeaderBits;                                                    
          }HEAP_VS_CHUNK_HEADER_SIZE, *PHEAP_VS_CHUNK_HEADER_SIZE;                                  
                                                                                          
          typedef struct _HEAP_VS_CHUNK_HEADER                   // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                         
/*0x000*/     union _HEAP_VS_CHUNK_HEADER_SIZE Sizes;            // 7 elements, 0x8 bytes (sizeof)  
              union                                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                     
                  struct                                         // 4 elements, 0x4 bytes (sizeof)  
                  {                                                                                 
/*0x008*/             ULONG32      EncodedSegmentPageOffset : 8; // 0 BitPosition                   
/*0x008*/             ULONG32      UnusedBytes : 1;              // 8 BitPosition                   
/*0x008*/             ULONG32      SkipDuringWalk : 1;           // 9 BitPosition                   
/*0x008*/             ULONG32      Spare : 22;                   // 10 BitPosition                  
                  };                                                                                
/*0x008*/         ULONG32      AllocatedChunkBits;                                                  
              };                                                                                    
          }HEAP_VS_CHUNK_HEADER, *PHEAP_VS_CHUNK_HEADER;                                            
                                                                                                    
          typedef struct _HEAP_VS_CHUNK_FREE_HEADER    // 3 elements, 0x20 bytes (sizeof) 
          {                                                                               
              union                                    // 3 elements, 0x10 bytes (sizeof) 
              {                                                                           
/*0x000*/         struct _HEAP_VS_CHUNK_HEADER Header; // 6 elements, 0x10 bytes (sizeof) 
/*0x000*/         UINT64       OverlapsHeader;                                            
/*0x008*/         struct _RTL_BALANCED_NODE Node;      // 6 elements, 0x18 bytes (sizeof) 
              };                                                                          
          }HEAP_VS_CHUNK_FREE_HEADER, *PHEAP_VS_CHUNK_FREE_HEADER;                                   
                                                                                          
          typedef struct _RTL_HP_VS_CONFIG               // 1 elements, 0x4 bytes (sizeof) 
          {                                                                                
              struct                                     // 2 elements, 0x4 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      PageAlignLargeAllocs : 1; // 0 BitPosition                  
/*0x000*/         ULONG32      FullDecommit : 1;         // 1 BitPosition                  
              }Flags;                                                                      
          }RTL_HP_VS_CONFIG, *PRTL_HP_VS_CONFIG;                                           
                                                                                           
          typedef struct _HEAP_VS_CONTEXT                    // 10 elements, 0x78 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT64       Lock;                                                                 
/*0x008*/     enum _RTLP_HP_LOCK_TYPE LockType;                                                  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x010*/     struct _RTL_RB_TREE FreeChunkTree;             // 3 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _LIST_ENTRY SubsegmentList;             // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       TotalCommittedUnits;                                                  
/*0x038*/     UINT64       FreeCommittedUnits;                                                   
/*0x040*/     UINT64       BackendCtx;                       // VOID*                            
/*0x048*/     struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks; // 5 elements, 0x28 bytes (sizeof)  
/*0x070*/     struct _RTL_HP_VS_CONFIG Config;               // 1 elements, 0x4 bytes (sizeof)   
/*0x074*/     ULONG32      Flags;                                                                
          }HEAP_VS_CONTEXT, *PHEAP_VS_CONTEXT;                                                   
                                                                                                 
          typedef struct _HEAP_VS_SUBSEGMENT   // 6 elements, 0x28 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       CommitBitmap;                                          
/*0x018*/     UINT64       CommitLock;                                            
/*0x020*/     UINT16       Size;                                                  
              struct                           // 2 elements, 0x2 bytes (sizeof)  
              {                                                                   
/*0x022*/         UINT16       Signature : 15; // 0 BitPosition                   
/*0x022*/         UINT16       FullCommit : 1; // 15 BitPosition                  
              };                                                                  
          }HEAP_VS_SUBSEGMENT, *PHEAP_VS_SUBSEGMENT;                                   
                                                                                  
          typedef struct _HEAP_VS_UNUSED_BYTES_INFO   // 5 elements, 0x2 bytes (sizeof) 
          {                                                                             
              union                                   // 2 elements, 0x2 bytes (sizeof) 
              {                                                                         
                  struct                              // 4 elements, 0x2 bytes (sizeof) 
                  {                                                                     
/*0x000*/             UINT16       UnusedBytes : 13;  // 0 BitPosition                  
/*0x000*/             UINT16       LfhSubsegment : 1; // 13 BitPosition                 
/*0x000*/             UINT16       ExtraPresent : 1;  // 14 BitPosition                 
/*0x000*/             UINT16       OneByteUnused : 1; // 15 BitPosition                 
                  };                                                                    
/*0x000*/         UINT8        Bytes[2];                                                
              };                                                                        
          }HEAP_VS_UNUSED_BYTES_INFO, *PHEAP_VS_UNUSED_BYTES_INFO;                                  
                                                                                        
          typedef struct _IMAGE_DATA_DIRECTORY // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      VirtualAddress;                                       
/*0x004*/     ULONG32      Size;                                                 
          }IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;                                  
                                                                                 
          typedef struct _IMAGE_DOS_HEADER // 19 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       e_magic;                                            
/*0x002*/     UINT16       e_cblp;                                             
/*0x004*/     UINT16       e_cp;                                               
/*0x006*/     UINT16       e_crlc;                                             
/*0x008*/     UINT16       e_cparhdr;                                          
/*0x00A*/     UINT16       e_minalloc;                                         
/*0x00C*/     UINT16       e_maxalloc;                                         
/*0x00E*/     UINT16       e_ss;                                               
/*0x010*/     UINT16       e_sp;                                               
/*0x012*/     UINT16       e_csum;                                             
/*0x014*/     UINT16       e_ip;                                               
/*0x016*/     UINT16       e_cs;                                               
/*0x018*/     UINT16       e_lfarlc;                                           
/*0x01A*/     UINT16       e_ovno;                                             
/*0x01C*/     UINT16       e_res[4];                                           
/*0x024*/     UINT16       e_oemid;                                            
/*0x026*/     UINT16       e_oeminfo;                                          
/*0x028*/     UINT16       e_res2[10];                                         
/*0x03C*/     LONG32       e_lfanew;                                           
          }IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;                                    
                                                                               
          typedef struct _IMAGE_FILE_HEADER      // 7 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Machine;                                                 
/*0x002*/     UINT16       NumberOfSections;                                        
/*0x004*/     ULONG32      TimeDateStamp;                                           
/*0x008*/     ULONG32      PointerToSymbolTable;                                    
/*0x00C*/     ULONG32      NumberOfSymbols;                                         
/*0x010*/     UINT16       SizeOfOptionalHeader;                                    
/*0x012*/     UINT16       Characteristics;                                         
          }IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;                                   
                                                                                    
          typedef struct _IMAGE_OPTIONAL_HEADER64             // 30 elements, 0xF0 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT16       Magic;                                                                 
/*0x002*/     UINT8        MajorLinkerVersion;                                                    
/*0x003*/     UINT8        MinorLinkerVersion;                                                    
/*0x004*/     ULONG32      SizeOfCode;                                                            
/*0x008*/     ULONG32      SizeOfInitializedData;                                                 
/*0x00C*/     ULONG32      SizeOfUninitializedData;                                               
/*0x010*/     ULONG32      AddressOfEntryPoint;                                                   
/*0x014*/     ULONG32      BaseOfCode;                                                            
/*0x018*/     UINT64       ImageBase;                                                             
/*0x020*/     ULONG32      SectionAlignment;                                                      
/*0x024*/     ULONG32      FileAlignment;                                                         
/*0x028*/     UINT16       MajorOperatingSystemVersion;                                           
/*0x02A*/     UINT16       MinorOperatingSystemVersion;                                           
/*0x02C*/     UINT16       MajorImageVersion;                                                     
/*0x02E*/     UINT16       MinorImageVersion;                                                     
/*0x030*/     UINT16       MajorSubsystemVersion;                                                 
/*0x032*/     UINT16       MinorSubsystemVersion;                                                 
/*0x034*/     ULONG32      Win32VersionValue;                                                     
/*0x038*/     ULONG32      SizeOfImage;                                                           
/*0x03C*/     ULONG32      SizeOfHeaders;                                                         
/*0x040*/     ULONG32      CheckSum;                                                              
/*0x044*/     UINT16       Subsystem;                                                             
/*0x046*/     UINT16       DllCharacteristics;                                                    
/*0x048*/     UINT64       SizeOfStackReserve;                                                    
/*0x050*/     UINT64       SizeOfStackCommit;                                                     
/*0x058*/     UINT64       SizeOfHeapReserve;                                                     
/*0x060*/     UINT64       SizeOfHeapCommit;                                                      
/*0x068*/     ULONG32      LoaderFlags;                                                           
/*0x06C*/     ULONG32      NumberOfRvaAndSizes;                                                   
/*0x070*/     struct _IMAGE_DATA_DIRECTORY DataDirectory[16];                                     
          }IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;                                    
                                                                                                  
          typedef struct _IMAGE_NT_HEADERS64                  // 3 elements, 0x108 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Signature;                                                             
/*0x004*/     struct _IMAGE_FILE_HEADER FileHeader;           // 7 elements, 0x14 bytes (sizeof)  
/*0x018*/     struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader; // 30 elements, 0xF0 bytes (sizeof) 
          }IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;                                              
                                                                                                  
          typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY // 4 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      BeginAddress;                                                 
/*0x004*/     ULONG32      EndAddress;                                                   
              union                                    // 2 elements, 0x4 bytes (sizeof) 
              {                                                                          
/*0x008*/         ULONG32      UnwindInfoAddress;                                        
/*0x008*/         ULONG32      UnwindData;                                               
              };                                                                         
          }IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY;                                  
                                                                                         
          typedef struct _INTERFACE              // 5 elements, 0x20 bytes (sizeof)                                                                            
          {                                                                                                                                                    
/*0x000*/     UINT16       Size;                                                                                                                               
/*0x002*/     UINT16       Version;                                                                                                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                    
/*0x008*/     UINT64       Context;              // VOID*                                                                                                      
/*0x010*/     UINT64       InterfaceReference;   // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
/*0x018*/     UINT64       InterfaceDereference; // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
          }INTERFACE, *PINTERFACE;                                                                                                                             
                                                                                                                                                               
          typedef struct _INVERTED_FUNCTION_TABLE_ENTRY // 5 elements, 0x18 bytes (sizeof)       
          {                                                                                      
              union                                     // 2 elements, 0x8 bytes (sizeof)        
              {                                                                                  
/*0x000*/         UINT64       FunctionTable;           // struct _IMAGE_RUNTIME_FUNCTION_ENTRY* 
/*0x000*/         UINT64       DynamicTable;            // struct _DYNAMIC_FUNCTION_TABLE*       
              };                                                                                 
/*0x008*/     UINT64       ImageBase;                   // VOID*                                 
/*0x010*/     ULONG32      SizeOfImage;                                                          
/*0x014*/     ULONG32      SizeOfTable;                                                          
          }INVERTED_FUNCTION_TABLE_ENTRY, *PINVERTED_FUNCTION_TABLE_ENTRY;                                         
                                                                                                 
          typedef struct _INVERTED_FUNCTION_TABLE                    // 5 elements, 0x3010 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      CurrentSize;                                                                   
/*0x004*/     ULONG32      MaximumSize;                                                                   
/*0x008*/     ULONG32      Epoch;                                                                         
/*0x00C*/     UINT8        Overflow;                                                                      
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                               
/*0x010*/     struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[512];                                      
          }INVERTED_FUNCTION_TABLE, *PINVERTED_FUNCTION_TABLE;                                            
                                                                                                          
          typedef union _INVPCID_DESCRIPTOR           // 4 elements, 0x10 bytes (sizeof) 
          {                                                                              
              struct                                  // 4 elements, 0x10 bytes (sizeof) 
              {                                                                          
                  union                               // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                      
                      struct                          // 2 elements, 0x8 bytes (sizeof)  
                      {                                                                  
/*0x000*/                 UINT64       Pcid : 12;     // 0 BitPosition                   
/*0x000*/                 UINT64       Reserved : 52; // 12 BitPosition                  
                      };                                                                 
/*0x000*/             UINT64       EntirePcid;                                           
                  };                                                                     
/*0x008*/         UINT64       Virtual;                                                  
              }IndividualAddress;                                                        
              struct                                  // 4 elements, 0x10 bytes (sizeof) 
              {                                                                          
                  union                               // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                      
                      struct                          // 2 elements, 0x8 bytes (sizeof)  
                      {                                                                  
/*0x000*/                 UINT64       Pcid : 12;     // 0 BitPosition                   
/*0x000*/                 UINT64       Reserved : 52; // 12 BitPosition                  
                      };                                                                 
/*0x000*/             UINT64       EntirePcid;                                           
                  };                                                                     
/*0x008*/         UINT64       Reserved2;                                                
              }SingleContext;                                                            
              struct                                  // 1 elements, 0x10 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       Reserved[2];                                              
              }AllContextAndGlobals;                                                     
              struct                                  // 1 elements, 0x10 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       Reserved[2];                                              
              }AllContext;                                                               
          }INVPCID_DESCRIPTOR, *PINVPCID_DESCRIPTOR;                                     
                                                                                         
          typedef struct _IO_CLIENT_EXTENSION           // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       NextExtension;               // struct _IO_CLIENT_EXTENSION*    
/*0x008*/     UINT64       ClientIdentificationAddress; // VOID*                           
          }IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION;                                     
                                                                                           
          typedef struct _IO_COMPLETION_CONTEXT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       Port;                // VOID*                           
/*0x008*/     UINT64       Key;                 // VOID*                           
          }IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;                                   
                                                                                   
          typedef struct _IO_DRIVER_CREATE_CONTEXT // 5 elements, 0x28 bytes (sizeof) 
          {                                                                           
/*0x000*/     INT16        Size;                                                      
/*0x002*/     UINT8        _PADDING0_[0x6];                                           
/*0x008*/     UINT64       ExtraCreateParameter;   // struct _ECP_LIST*               
/*0x010*/     UINT64       DeviceObjectHint;       // VOID*                           
/*0x018*/     UINT64       TxnParameters;          // struct _TXN_PARAMETER_BLOCK*    
/*0x020*/     UINT64       SiloContext;            // struct _EJOB*                   
          }IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;                                   
                                                                                      
          typedef struct _IO_MINI_COMPLETION_PACKET_USER // 9 elements, 0x50 bytes (sizeof)     
          {                                                                                     
/*0x000*/     struct _LIST_ENTRY ListEntry;              // 2 elements, 0x10 bytes (sizeof)     
/*0x010*/     ULONG32      PacketType;                                                          
/*0x014*/     UINT8        _PADDING0_[0x4];                                                     
/*0x018*/     UINT64       KeyContext;                   // VOID*                               
/*0x020*/     UINT64       ApcContext;                   // VOID*                               
/*0x028*/     LONG32       IoStatus;                                                            
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                     
/*0x030*/     UINT64       IoStatusInformation;                                                 
/*0x038*/     UINT64       MiniPacketCallback;           // FUNCT_00EF_13C2_MiniPacketCallback* 
/*0x040*/     UINT64       Context;                      // VOID*                               
/*0x048*/     UINT8        Allocated;                                                           
/*0x049*/     UINT8        _PADDING2_[0x7];                                                     
          }IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER;                                       
                                                                                                
          typedef struct _IO_PRIORITY_INFO       // 4 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Size;                                                    
/*0x004*/     ULONG32      ThreadPriority;                                          
/*0x008*/     ULONG32      PagePriority;                                            
/*0x00C*/     enum _IO_PRIORITY_HINT IoPriority;                                    
          }IO_PRIORITY_INFO, *PIO_PRIORITY_INFO;                                    
                                                                                    
          typedef struct _IO_RESOURCE_DESCRIPTOR           // 7 elements, 0x20 bytes (sizeof)  
          {                                                                                    
/*0x000*/     UINT8        Option;                                                             
/*0x001*/     UINT8        Type;                                                               
/*0x002*/     UINT8        ShareDisposition;                                                   
/*0x003*/     UINT8        Spare1;                                                             
/*0x004*/     UINT16       Flags;                                                              
/*0x006*/     UINT16       Spare2;                                                             
              union                                        // 13 elements, 0x18 bytes (sizeof) 
              {                                                                                
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Port;                                                                       
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory;                                                                     
                  struct                                   // 6 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      MinimumVector;                                              
/*0x00C*/             ULONG32      MaximumVector;                                              
/*0x010*/             UINT16       AffinityPolicy;                                             
/*0x012*/             UINT16       Group;                                                      
/*0x014*/             enum _IRQ_PRIORITY PriorityPolicy;                                       
/*0x018*/             UINT64       TargetedProcessors;                                         
                  }Interrupt;                                                                  
                  struct                                   // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      MinimumChannel;                                             
/*0x00C*/             ULONG32      MaximumChannel;                                             
                  }Dma;                                                                        
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      RequestLine;                                                
/*0x00C*/             ULONG32      Reserved;                                                   
/*0x010*/             ULONG32      Channel;                                                    
/*0x014*/             ULONG32      TransferWidth;                                              
                  }DmaV3;                                                                      
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Generic;                                                                    
                  struct                                   // 1 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Data[3];                                                    
                  }DevicePrivate;                                                              
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      MinBusNumber;                                               
/*0x010*/             ULONG32      MaxBusNumber;                                               
/*0x014*/             ULONG32      Reserved;                                                   
                  }BusNumber;                                                                  
                  struct                                   // 3 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Priority;                                                   
/*0x00C*/             ULONG32      Reserved1;                                                  
/*0x010*/             ULONG32      Reserved2;                                                  
                  }ConfigData;                                                                 
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length40;                                                   
/*0x00C*/             ULONG32      Alignment40;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory40;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length48;                                                   
/*0x00C*/             ULONG32      Alignment48;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory48;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length64;                                                   
/*0x00C*/             ULONG32      Alignment64;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory64;                                                                   
                  struct                                   // 6 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             UINT8        Class;                                                      
/*0x009*/             UINT8        Type;                                                       
/*0x00A*/             UINT8        Reserved1;                                                  
/*0x00B*/             UINT8        Reserved2;                                                  
/*0x00C*/             ULONG32      IdLowPart;                                                  
/*0x010*/             ULONG32      IdHighPart;                                                 
                  }Connection;                                                                 
              }u;                                                                              
          }IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;                                    
                                                                                               
          typedef struct _IO_RESOURCE_LIST                   // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Version;                                                             
/*0x002*/     UINT16       Revision;                                                            
/*0x004*/     ULONG32      Count;                                                               
/*0x008*/     struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];                                    
          }IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;                                                
                                                                                                
          typedef struct _IO_RESOURCE_REQUIREMENTS_LIST // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      ListSize;                                                       
/*0x004*/     enum _INTERFACE_TYPE InterfaceType;                                          
/*0x008*/     ULONG32      BusNumber;                                                      
/*0x00C*/     ULONG32      SlotNumber;                                                     
/*0x010*/     ULONG32      Reserved[3];                                                    
/*0x01C*/     ULONG32      AlternativeLists;                                               
/*0x020*/     struct _IO_RESOURCE_LIST List[1];                                            
          }IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;                                   
                                                                                           
          typedef struct _IO_SECURITY_CONTEXT // 4 elements, 0x18 bytes (sizeof)      
          {                                                                           
/*0x000*/     UINT64       SecurityQos;       // struct _SECURITY_QUALITY_OF_SERVICE* 
/*0x008*/     UINT64       AccessState;       // struct _ACCESS_STATE*                
/*0x010*/     ULONG32      DesiredAccess;                                             
/*0x014*/     ULONG32      FullCreateOptions;                                         
          }IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;                                        
                                                                                      
          typedef struct _SYSTEM_POWER_STATE_CONTEXT            // 10 elements, 0x4 bytes (sizeof) 
          {                                                                                        
              union                                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                    
                  struct                                        // 9 elements, 0x4 bytes (sizeof)  
                  {                                                                                
/*0x000*/             ULONG32      Reserved1 : 8;               // 0 BitPosition                   
/*0x000*/             ULONG32      TargetSystemState : 4;       // 8 BitPosition                   
/*0x000*/             ULONG32      EffectiveSystemState : 4;    // 12 BitPosition                  
/*0x000*/             ULONG32      CurrentSystemState : 4;      // 16 BitPosition                  
/*0x000*/             ULONG32      IgnoreHibernationPath : 1;   // 20 BitPosition                  
/*0x000*/             ULONG32      PseudoTransition : 1;        // 21 BitPosition                  
/*0x000*/             ULONG32      KernelSoftReboot : 1;        // 22 BitPosition                  
/*0x000*/             ULONG32      DirectedDripsTransition : 1; // 23 BitPosition                  
/*0x000*/             ULONG32      Reserved2 : 8;               // 24 BitPosition                  
                  };                                                                               
/*0x000*/         ULONG32      ContextAsUlong;                                                     
              };                                                                                   
          }SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT;                                   
                                                                                                   
          typedef union _POWER_STATE                // 2 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     enum _SYSTEM_POWER_STATE SystemState;                                   
/*0x000*/     enum _DEVICE_POWER_STATE DeviceState;                                   
          }POWER_STATE, *PPOWER_STATE;                                                
                                                                                      
          typedef struct _IO_STACK_LOCATION                                                     // 9 elements, 0x48 bytes (sizeof)        
          {                                                                                                                               
/*0x000*/     UINT8        MajorFunction;                                                                                                 
/*0x001*/     UINT8        MinorFunction;                                                                                                 
/*0x002*/     UINT8        Flags;                                                                                                         
/*0x003*/     UINT8        Control;                                                                                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                               
              union                                                                             // 39 elements, 0x20 bytes (sizeof)       
              {                                                                                                                           
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       SecurityContext;                                             // struct _IO_SECURITY_CONTEXT*           
/*0x010*/             ULONG32      Options;                                                                                               
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             UINT16       FileAttributes;                                                                                        
/*0x01A*/             UINT16       ShareAccess;                                                                                           
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             ULONG32      EaLength;                                                                                              
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }Create;                                                                                                                
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       SecurityContext;                                             // struct _IO_SECURITY_CONTEXT*           
/*0x010*/             ULONG32      Options;                                                                                               
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             UINT16       Reserved;                                                                                              
/*0x01A*/             UINT16       ShareAccess;                                                                                           
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             UINT64       Parameters;                                                  // struct _NAMED_PIPE_CREATE_PARAMETERS*  
                  }CreatePipe;                                                                                                            
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       SecurityContext;                                             // struct _IO_SECURITY_CONTEXT*           
/*0x010*/             ULONG32      Options;                                                                                               
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             UINT16       Reserved;                                                                                              
/*0x01A*/             UINT16       ShareAccess;                                                                                           
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             UINT64       Parameters;                                                  // struct _MAILSLOT_CREATE_PARAMETERS*    
                  }CreateMailslot;                                                                                                        
                  struct                                                                        // 4 elements, 0x18 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      Key;                                                                                                   
/*0x014*/             ULONG32      Flags;                                                                                                 
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)         
                  }Read;                                                                                                                  
                  struct                                                                        // 4 elements, 0x18 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      Key;                                                                                                   
/*0x014*/             ULONG32      Flags;                                                                                                 
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)         
                  }Write;                                                                                                                 
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             UINT64       FileName;                                                    // struct _UNICODE_STRING*                
/*0x018*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                                  
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             ULONG32      FileIndex;                                                                                             
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }QueryDirectory;                                                                                                        
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      CompletionFilter;                                                                                      
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }NotifyDirectory;                                                                                                       
                  struct                                                                        // 3 elements, 0x18 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      CompletionFilter;                                                                                      
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x018*/             enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;                                           
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }NotifyDirectoryEx;                                                                                                     
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                                  
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }QueryFile;                                                                                                             
                  struct                                                                        // 7 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                                  
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x018*/             UINT64       FileObject;                                                  // struct _FILE_OBJECT*                   
                      union                                                                     // 3 elements, 0x8 bytes (sizeof)         
                      {                                                                                                                   
                          struct                                                                // 2 elements, 0x8 bytes (sizeof)         
                          {                                                                                                               
/*0x020*/                     UINT8        ReplaceIfExists;                                                                               
/*0x021*/                     UINT8        AdvanceOnly;                                                                                   
/*0x022*/                     UINT8        _PADDING3_[0x6];                                                                               
                          };                                                                                                              
/*0x020*/                 ULONG32      ClusterCount;                                                                                      
/*0x020*/                 UINT64       DeleteHandle;                                            // VOID*                                  
                      };                                                                                                                  
                  }SetFile;                                                                                                               
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             UINT64       EaList;                                                      // VOID*                                  
/*0x018*/             ULONG32      EaListLength;                                                                                          
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             ULONG32      EaIndex;                                                                                               
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }QueryEa;                                                                                                               
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
                  }SetEa;                                                                                                                 
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             enum _FSINFOCLASS FsInformationClass;                                                                               
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }QueryVolume;                                                                                                           
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             enum _FSINFOCLASS FsInformationClass;                                                                               
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }SetVolume;                                                                                                             
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      OutputBufferLength;                                                                                    
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      InputBufferLength;                                                                                     
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x018*/             ULONG32      FsControlCode;                                                                                         
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                       
/*0x020*/             UINT64       Type3InputBuffer;                                            // VOID*                                  
                  }FileSystemControl;                                                                                                     
                  struct                                                                        // 3 elements, 0x18 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       Length;                                                      // union _LARGE_INTEGER*                  
/*0x010*/             ULONG32      Key;                                                                                                   
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)         
                  }LockControl;                                                                                                           
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      OutputBufferLength;                                                                                    
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      InputBufferLength;                                                                                     
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x018*/             ULONG32      IoControlCode;                                                                                         
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                       
/*0x020*/             UINT64       Type3InputBuffer;                                            // VOID*                                  
                  }DeviceIoControl;                                                                                                       
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      SecurityInformation;                                                                                   
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      Length;                                                                                                
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }QuerySecurity;                                                                                                         
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      SecurityInformation;                                                                                   
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             UINT64       SecurityDescriptor;                                          // VOID*                                  
                  }SetSecurity;                                                                                                           
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       Vpb;                                                         // struct _VPB*                           
/*0x010*/             UINT64       DeviceObject;                                                // struct _DEVICE_OBJECT*                 
                  }MountVolume;                                                                                                           
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       Vpb;                                                         // struct _VPB*                           
/*0x010*/             UINT64       DeviceObject;                                                // struct _DEVICE_OBJECT*                 
                  }VerifyVolume;                                                                                                          
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             UINT64       Srb;                                                         // struct _SCSI_REQUEST_BLOCK*            
                  }Scsi;                                                                                                                  
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             UINT64       StartSid;                                                    // VOID*                                  
/*0x018*/             UINT64       SidList;                                                     // struct _FILE_GET_QUOTA_INFORMATION*    
/*0x020*/             ULONG32      SidListLength;                                                                                         
/*0x024*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }QueryQuota;                                                                                                            
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             ULONG32      Length;                                                                                                
                  }SetQuota;                                                                                                              
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             enum _DEVICE_RELATION_TYPE Type;                                                                                    
                  }QueryDeviceRelations;                                                                                                  
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       InterfaceType;                                               // struct _GUID*                          
/*0x010*/             UINT16       Size;                                                                                                  
/*0x012*/             UINT16       Version;                                                                                               
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             UINT64       Interface;                                                   // struct _INTERFACE*                     
/*0x020*/             UINT64       InterfaceSpecificData;                                       // VOID*                                  
                  }QueryInterface;                                                                                                        
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             UINT64       Capabilities;                                                // struct _DEVICE_CAPABILITIES*           
                  }DeviceCapabilities;                                                                                                    
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             UINT64       IoResourceRequirementList;                                   // struct _IO_RESOURCE_REQUIREMENTS_LIST* 
                  }FilterResourceRequirements;                                                                                            
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             ULONG32      WhichSpace;                                                                                            
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             UINT64       Buffer;                                                      // VOID*                                  
/*0x018*/             ULONG32      Offset;                                                                                                
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             ULONG32      Length;                                                                                                
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }ReadWriteConfig;                                                                                                       
                  struct                                                                        // 1 elements, 0x1 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             UINT8        Lock;                                                                                                  
                  }SetLock;                                                                                                               
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             enum _BUS_QUERY_ID_TYPE IdType;                                                                                     
                  }QueryId;                                                                                                               
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             enum _DEVICE_TEXT_TYPE DeviceTextType;                                                                              
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             ULONG32      LocaleId;                                                                                              
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }QueryDeviceText;                                                                                                       
                  struct                                                                        // 3 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT8        InPath;                                                                                                
/*0x009*/             UINT8        Reserved[3];                                                                                           
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x010*/             enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;                                                                          
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                       
                  }UsageNotification;                                                                                                     
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             enum _SYSTEM_POWER_STATE PowerState;                                                                                
                  }WaitWake;                                                                                                              
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)         
                  {                                                                                                                       
/*0x008*/             UINT64       PowerSequence;                                               // struct _POWER_SEQUENCE*                
                  }PowerSequence;                                                                                                         
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
                      union                                                                     // 2 elements, 0x8 bytes (sizeof)         
                      {                                                                                                                   
/*0x008*/                 ULONG32      SystemContext;                                                                                     
/*0x008*/                 struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;           // 10 elements, 0x4 bytes (sizeof)        
                      };                                                                                                                  
/*0x010*/             enum _POWER_STATE_TYPE Type;                                                                                        
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x018*/             union _POWER_STATE State;                                                 // 2 elements, 0x4 bytes (sizeof)         
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                       
/*0x020*/             enum _POWER_ACTION ShutdownType;                                                                                    
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                       
                  }Power;                                                                                                                 
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       AllocatedResources;                                          // struct _CM_RESOURCE_LIST*              
/*0x010*/             UINT64       AllocatedResourcesTranslated;                                // struct _CM_RESOURCE_LIST*              
                  }StartDevice;                                                                                                           
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       ProviderId;                                                                                            
/*0x010*/             UINT64       DataPath;                                                    // VOID*                                  
/*0x018*/             ULONG32      BufferSize;                                                                                            
/*0x01C*/             UINT8        _PADDING1_[0x4];                                                                                       
/*0x020*/             UINT64       Buffer;                                                      // VOID*                                  
                  }WMI;                                                                                                                   
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)        
                  {                                                                                                                       
/*0x008*/             UINT64       Argument1;                                                   // VOID*                                  
/*0x010*/             UINT64       Argument2;                                                   // VOID*                                  
/*0x018*/             UINT64       Argument3;                                                   // VOID*                                  
/*0x020*/             UINT64       Argument4;                                                   // VOID*                                  
                  }Others;                                                                                                                
              }Parameters;                                                                                                                
/*0x028*/     UINT64       DeviceObject;                                                        // struct _DEVICE_OBJECT*                 
/*0x030*/     UINT64       FileObject;                                                          // struct _FILE_OBJECT*                   
/*0x038*/     UINT64       CompletionRoutine;                                                   // FUNCT_00A0_11D0_CompletionRoutine*     
/*0x040*/     UINT64       Context;                                                             // VOID*                                  
          }IO_STACK_LOCATION, *PIO_STACK_LOCATION;                                                                                        
                                                                                                                                          
          typedef struct _IO_STATUS_BLOCK // 3 elements, 0x10 bytes (sizeof) 
          {                                                                  
              union                       // 2 elements, 0x8 bytes (sizeof)  
              {                                                              
/*0x000*/         LONG32       Status;                                       
/*0x000*/         UINT64       Pointer;   // VOID*                           
              };                                                             
/*0x008*/     UINT64       Information;                                      
          }IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;                                   
                                                                             
          typedef struct _IO_TIMER          // 6 elements, 0x30 bytes (sizeof) 
          {                                                                    
/*0x000*/     INT16        Type;                                               
/*0x002*/     INT16        TimerFlag;                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     struct _LIST_ENTRY TimerList; // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       TimerRoutine;    // FUNCT_00EF_12C1_TimerRoutine*   
/*0x020*/     UINT64       Context;         // VOID*                           
/*0x028*/     UINT64       DeviceObject;    // struct _DEVICE_OBJECT*          
          }IO_TIMER, *PIO_TIMER;                                               
                                                                               
          typedef struct _IOP_IRP_STACK_PROFILER // 2 elements, 0x54 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Profile[20];                                             
/*0x050*/     ULONG32      TotalIrps;                                               
          }IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER;                                   
                                                                                    
          typedef struct _IRP                                           // 23 elements, 0xD0 bytes (sizeof)             
          {                                                                                                             
/*0x000*/     INT16        Type;                                                                                        
/*0x002*/     UINT16       Size;                                                                                        
/*0x004*/     UINT16       AllocationProcessorNumber;                                                                   
/*0x006*/     UINT16       Reserved;                                                                                    
/*0x008*/     UINT64       MdlAddress;                                  // struct _MDL*                                 
/*0x010*/     ULONG32      Flags;                                                                                       
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                             
              union                                                     // 3 elements, 0x8 bytes (sizeof)               
              {                                                                                                         
/*0x018*/         UINT64       MasterIrp;                               // struct _IRP*                                 
/*0x018*/         LONG32       IrpCount;                                                                                
/*0x018*/         UINT64       SystemBuffer;                            // VOID*                                        
              }AssociatedIrp;                                                                                           
/*0x020*/     struct _LIST_ENTRY ThreadListEntry;                       // 2 elements, 0x10 bytes (sizeof)              
/*0x030*/     struct _IO_STATUS_BLOCK IoStatus;                         // 3 elements, 0x10 bytes (sizeof)              
/*0x040*/     CHAR         RequestorMode;                                                                               
/*0x041*/     UINT8        PendingReturned;                                                                             
/*0x042*/     CHAR         StackCount;                                                                                  
/*0x043*/     CHAR         CurrentLocation;                                                                             
/*0x044*/     UINT8        Cancel;                                                                                      
/*0x045*/     UINT8        CancelIrql;                                                                                  
/*0x046*/     CHAR         ApcEnvironment;                                                                              
/*0x047*/     UINT8        AllocationFlags;                                                                             
/*0x048*/     UINT64       UserIosb;                                    // struct _IO_STATUS_BLOCK*                     
/*0x050*/     UINT64       UserEvent;                                   // struct _KEVENT*                              
              union                                                     // 2 elements, 0x10 bytes (sizeof)              
              {                                                                                                         
                  struct                                                // 3 elements, 0x10 bytes (sizeof)              
                  {                                                                                                     
                      union                                             // 2 elements, 0x8 bytes (sizeof)               
                      {                                                                                                 
/*0x058*/                 UINT64       UserApcRoutine;                  // FUNCT_00EF_0F06_UserApcRoutine*              
/*0x058*/                 UINT64       IssuingProcess;                  // VOID*                                        
                      };                                                                                                
/*0x060*/             UINT64       UserApcContext;                      // VOID*                                        
                  }AsynchronousParameters;                                                                              
/*0x058*/         union _LARGE_INTEGER AllocationSize;                  // 4 elements, 0x8 bytes (sizeof)               
              }Overlay;                                                                                                 
/*0x068*/     UINT64       CancelRoutine;                               // FUNCT_00EF_0F0B_DriverStartIo_CancelRoutine* 
/*0x070*/     UINT64       UserBuffer;                                  // VOID*                                        
              union                                                     // 3 elements, 0x58 bytes (sizeof)              
              {                                                                                                         
                  struct                                                // 9 elements, 0x58 bytes (sizeof)              
                  {                                                                                                     
                      union                                             // 2 elements, 0x20 bytes (sizeof)              
                      {                                                                                                 
/*0x078*/                 struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry; // 3 elements, 0x18 bytes (sizeof)              
/*0x078*/                 UINT64       DriverContext[4];                // VOID*                                        
                      };                                                                                                
/*0x098*/             UINT64       Thread;                              // struct _ETHREAD*                             
/*0x0A0*/             UINT64       AuxiliaryBuffer;                     // CHAR*                                        
/*0x0A8*/             struct _LIST_ENTRY ListEntry;                     // 2 elements, 0x10 bytes (sizeof)              
                      union                                             // 2 elements, 0x8 bytes (sizeof)               
                      {                                                                                                 
/*0x0B8*/                 UINT64       CurrentStackLocation;            // struct _IO_STACK_LOCATION*                   
/*0x0B8*/                 ULONG32      PacketType;                                                                      
                      };                                                                                                
/*0x0C0*/             UINT64       OriginalFileObject;                  // struct _FILE_OBJECT*                         
/*0x0C8*/             UINT64       IrpExtension;                        // VOID*                                        
                  }Overlay;                                                                                             
/*0x078*/         struct _KAPC Apc;                                     // 17 elements, 0x58 bytes (sizeof)             
/*0x078*/         UINT64       CompletionKey;                           // VOID*                                        
              }Tail;                                                                                                    
          }IRP, *PIRP;                                                                                                  
                                                                                                                        
typedef struct _JOB_ACCESS_STATE // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}JOB_ACCESS_STATE, *PJOB_ACCESS_STATE;                                  
                                                                   
typedef struct _JOB_CPU_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_CPU_RATE_CONTROL, *PJOB_CPU_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_NET_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_NET_RATE_CONTROL, *PJOB_NET_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_NOTIFICATION_INFORMATION // 0 elements, 0x0 bytes (sizeof) 
{                                                                              
}JOB_NOTIFICATION_INFORMATION, *PJOB_NOTIFICATION_INFORMATION;                                  
                                                                               
          typedef struct _KDESCRIPTOR // 3 elements, 0x10 bytes (sizeof) 
          {                                                              
/*0x000*/     UINT16       Pad[3];                                       
/*0x006*/     UINT16       Limit;                                        
/*0x008*/     UINT64       Base;      // VOID*                           
          }KDESCRIPTOR, *PKDESCRIPTOR;                                   
                                                                         
          typedef struct _KDPC_LIST               // 2 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _SINGLE_LIST_ENTRY ListHead; // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       LastEntry;             // struct _SINGLE_LIST_ENTRY*      
          }KDPC_LIST, *PKDPC_LIST;                                                   
                                                                                     
          typedef struct _KDPC_DATA       // 5 elements, 0x28 bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _KDPC_LIST DpcList;  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       DpcLock;                                          
/*0x018*/     LONG32       DpcQueueDepth;                                    
/*0x01C*/     ULONG32      DpcCount;                                         
/*0x020*/     UINT64       ActiveDpc;     // struct _KDPC*                   
          }KDPC_DATA, *PKDPC_DATA;                                           
                                                                             
          typedef struct _KENTROPY_TIMING_STATE // 4 elements, 0x150 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      EntropyCount;                                            
/*0x004*/     ULONG32      Buffer[64];                                              
/*0x104*/     UINT8        _PADDING0_[0x4];                                         
/*0x108*/     struct _KDPC Dpc;                 // 11 elements, 0x40 bytes (sizeof) 
/*0x148*/     ULONG32      LastDeliveredBuffer;                                     
/*0x14C*/     UINT8        _PADDING1_[0x4];                                         
          }KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE;                                    
                                                                                    
          typedef struct _KERNEL_STACK_SEGMENT // 4 elements, 0x20 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       StackBase;                                             
/*0x008*/     UINT64       StackLimit;                                            
/*0x010*/     UINT64       KernelStack;                                           
/*0x018*/     UINT64       InitialStack;                                          
          }KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT;                                   
                                                                                  
          typedef struct _KEXCEPTION_FRAME // 30 elements, 0x140 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       P1Home;                                              
/*0x008*/     UINT64       P2Home;                                              
/*0x010*/     UINT64       P3Home;                                              
/*0x018*/     UINT64       P4Home;                                              
/*0x020*/     UINT64       P5;                                                  
/*0x028*/     UINT64       Spare1;                                              
/*0x030*/     struct _M128A Xmm6;          // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     struct _M128A Xmm7;          // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/     struct _M128A Xmm8;          // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _M128A Xmm9;          // 2 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _M128A Xmm10;         // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     struct _M128A Xmm11;         // 2 elements, 0x10 bytes (sizeof)   
/*0x090*/     struct _M128A Xmm12;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _M128A Xmm13;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _M128A Xmm14;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _M128A Xmm15;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     UINT64       TrapFrame;                                           
/*0x0D8*/     UINT64       OutputBuffer;                                        
/*0x0E0*/     UINT64       OutputLength;                                        
/*0x0E8*/     UINT64       Spare2;                                              
/*0x0F0*/     UINT64       MxCsr;                                               
/*0x0F8*/     UINT64       Rbp;                                                 
/*0x100*/     UINT64       Rbx;                                                 
/*0x108*/     UINT64       Rdi;                                                 
/*0x110*/     UINT64       Rsi;                                                 
/*0x118*/     UINT64       R12;                                                 
/*0x120*/     UINT64       R13;                                                 
/*0x128*/     UINT64       R14;                                                 
/*0x130*/     UINT64       R15;                                                 
/*0x138*/     UINT64       Return;                                              
          }KEXCEPTION_FRAME, *PKEXCEPTION_FRAME;                                     
                                                                                
          typedef struct _KFLOATING_SAVE // 1 elements, 0x4 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Dummy;                                          
          }KFLOATING_SAVE, *PKFLOATING_SAVE;                                  
                                                                           
          typedef struct _KGATE                 // 1 elements, 0x18 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
          }KGATE, *PKGATE;                                                          
                                                                                    
          typedef union _KGDTENTRY64                    // 8 elements, 0x10 bytes (sizeof) 
          {                                                                                
              struct                                    // 5 elements, 0x10 bytes (sizeof) 
              {                                                                            
/*0x000*/         UINT16       LimitLow;                                                   
/*0x002*/         UINT16       BaseLow;                                                    
                  union                                 // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                        
                      struct                            // 4 elements, 0x4 bytes (sizeof)  
                      {                                                                    
/*0x004*/                 UINT8        BaseMiddle;                                         
/*0x005*/                 UINT8        Flags1;                                             
/*0x006*/                 UINT8        Flags2;                                             
/*0x007*/                 UINT8        BaseHigh;                                           
                      }Bytes;                                                              
                      struct                            // 10 elements, 0x4 bytes (sizeof) 
                      {                                                                    
/*0x004*/                 ULONG32      BaseMiddle : 8;  // 0 BitPosition                   
/*0x004*/                 ULONG32      Type : 5;        // 8 BitPosition                   
/*0x004*/                 ULONG32      Dpl : 2;         // 13 BitPosition                  
/*0x004*/                 ULONG32      Present : 1;     // 15 BitPosition                  
/*0x004*/                 ULONG32      LimitHigh : 4;   // 16 BitPosition                  
/*0x004*/                 ULONG32      System : 1;      // 20 BitPosition                  
/*0x004*/                 ULONG32      LongMode : 1;    // 21 BitPosition                  
/*0x004*/                 ULONG32      DefaultBig : 1;  // 22 BitPosition                  
/*0x004*/                 ULONG32      Granularity : 1; // 23 BitPosition                  
/*0x004*/                 ULONG32      BaseHigh : 8;    // 24 BitPosition                  
                      }Bits;                                                               
                  };                                                                       
/*0x008*/         ULONG32      BaseUpper;                                                  
/*0x00C*/         ULONG32      MustBeZero;                                                 
              };                                                                           
              struct                                    // 2 elements, 0x10 bytes (sizeof) 
              {                                                                            
/*0x000*/         INT64        DataLow;                                                    
/*0x008*/         INT64        DataHigh;                                                   
              };                                                                           
          }KGDTENTRY64, *PKGDTENTRY64;                                                     
                                                                                           
          typedef union _KIDTENTRY64              // 11 elements, 0x10 bytes (sizeof) 
          {                                                                           
              struct                              // 6 elements, 0x10 bytes (sizeof)  
              {                                                                       
/*0x000*/         UINT16       OffsetLow;                                             
/*0x002*/         UINT16       Selector;                                              
                  struct                          // 5 elements, 0x2 bytes (sizeof)   
                  {                                                                   
/*0x004*/             UINT16       IstIndex : 3;  // 0 BitPosition                    
/*0x004*/             UINT16       Reserved0 : 5; // 3 BitPosition                    
/*0x004*/             UINT16       Type : 5;      // 8 BitPosition                    
/*0x004*/             UINT16       Dpl : 2;       // 13 BitPosition                   
/*0x004*/             UINT16       Present : 1;   // 15 BitPosition                   
                  };                                                                  
/*0x006*/         UINT16       OffsetMiddle;                                          
/*0x008*/         ULONG32      OffsetHigh;                                            
/*0x00C*/         ULONG32      Reserved1;                                             
              };                                                                      
/*0x000*/     UINT64       Alignment;                                                 
          }KIDTENTRY64, *PKIDTENTRY64;                                                
                                                                                      
          typedef struct _KSPIN_LOCK_QUEUE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Next;           // struct _KSPIN_LOCK_QUEUE*       
/*0x008*/     UINT64       Lock;           // UINT64*                         
          }KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;                                   
                                                                              
          typedef struct _KLOCK_QUEUE_HANDLE      // 2 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _KSPIN_LOCK_QUEUE LockQueue; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        OldIrql;                                                  
/*0x011*/     UINT8        _PADDING0_[0x7];                                          
          }KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE;                                   
                                                                                     
          typedef struct _NT_TIB                 // 8 elements, 0x38 bytes (sizeof)        
          {                                                                                
/*0x000*/     UINT64       ExceptionList;        // struct _EXCEPTION_REGISTRATION_RECORD* 
/*0x008*/     UINT64       StackBase;            // VOID*                                  
/*0x010*/     UINT64       StackLimit;           // VOID*                                  
/*0x018*/     UINT64       SubSystemTib;         // VOID*                                  
              union                              // 2 elements, 0x8 bytes (sizeof)         
              {                                                                            
/*0x020*/         UINT64       FiberData;        // VOID*                                  
/*0x020*/         ULONG32      Version;                                                    
              };                                                                           
/*0x028*/     UINT64       ArbitraryUserPointer; // VOID*                                  
/*0x030*/     UINT64       Self;                 // struct _NT_TIB*                        
          }NT_TIB, *PNT_TIB;                                                               
                                                                                           
          typedef union _KPRCBFLAG                        // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     LONG32       PrcbFlags;                                                       
              struct                                      // 4 elements, 0x4 bytes (sizeof) 
              {                                                                             
/*0x000*/         ULONG32      BamQosLevel : 2;           // 0 BitPosition                  
/*0x000*/         ULONG32      PendingQosUpdate : 2;      // 2 BitPosition                  
/*0x000*/         ULONG32      CacheIsolationEnabled : 1; // 4 BitPosition                  
/*0x000*/         ULONG32      PrcbFlagsReserved : 27;    // 5 BitPosition                  
              };                                                                            
          }KPRCBFLAG, *PKPRCBFLAG;                                                          
                                                                                            
          typedef struct _KSPECIAL_REGISTERS     // 30 elements, 0xF0 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Cr0;                                                      
/*0x008*/     UINT64       Cr2;                                                      
/*0x010*/     UINT64       Cr3;                                                      
/*0x018*/     UINT64       Cr4;                                                      
/*0x020*/     UINT64       KernelDr0;                                                
/*0x028*/     UINT64       KernelDr1;                                                
/*0x030*/     UINT64       KernelDr2;                                                
/*0x038*/     UINT64       KernelDr3;                                                
/*0x040*/     UINT64       KernelDr6;                                                
/*0x048*/     UINT64       KernelDr7;                                                
/*0x050*/     struct _KDESCRIPTOR Gdtr;          // 3 elements, 0x10 bytes (sizeof)  
/*0x060*/     struct _KDESCRIPTOR Idtr;          // 3 elements, 0x10 bytes (sizeof)  
/*0x070*/     UINT16       Tr;                                                       
/*0x072*/     UINT16       Ldtr;                                                     
/*0x074*/     ULONG32      MxCsr;                                                    
/*0x078*/     UINT64       DebugControl;                                             
/*0x080*/     UINT64       LastBranchToRip;                                          
/*0x088*/     UINT64       LastBranchFromRip;                                        
/*0x090*/     UINT64       LastExceptionToRip;                                       
/*0x098*/     UINT64       LastExceptionFromRip;                                     
/*0x0A0*/     UINT64       Cr8;                                                      
/*0x0A8*/     UINT64       MsrGsBase;                                                
/*0x0B0*/     UINT64       MsrGsSwap;                                                
/*0x0B8*/     UINT64       MsrStar;                                                  
/*0x0C0*/     UINT64       MsrLStar;                                                 
/*0x0C8*/     UINT64       MsrCStar;                                                 
/*0x0D0*/     UINT64       MsrSyscallMask;                                           
/*0x0D8*/     UINT64       Xcr0;                                                     
/*0x0E0*/     UINT64       MsrFsBase;                                                
/*0x0E8*/     UINT64       SpecialPadding0;                                          
          }KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS;                                    
                                                                                     
          typedef struct _KPROCESSOR_STATE                 // 2 elements, 0x5C0 bytes (sizeof)  
          {                                                                                     
/*0x000*/     struct _KSPECIAL_REGISTERS SpecialRegisters; // 30 elements, 0xF0 bytes (sizeof)  
/*0x0F0*/     struct _CONTEXT ContextFrame;                // 64 elements, 0x4D0 bytes (sizeof) 
          }KPROCESSOR_STATE, *PKPROCESSOR_STATE;                                                
                                                                                                
          typedef struct _PP_LOOKASIDE_LIST // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       P;               // struct _GENERAL_LOOKASIDE*      
/*0x008*/     UINT64       L;               // struct _GENERAL_LOOKASIDE*      
          }PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST;                                   
                                                                               
          typedef struct _KTIMER_TABLE_ENTRY // 3 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       Lock;                                                
/*0x008*/     struct _LIST_ENTRY Entry;      // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     union _ULARGE_INTEGER Time;    // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY;                                   
                                                                                
          typedef struct _KTIMER_TABLE                      // 2 elements, 0x2200 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT64       TimerExpiry[64];                 // struct _KTIMER*                   
/*0x200*/     struct _KTIMER_TABLE_ENTRY TimerEntries[256];                                      
          }KTIMER_TABLE, *PKTIMER_TABLE;                                                         
                                                                                                 
          typedef struct _PROC_IDLE_POLICY     // 6 elements, 0x6 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        PromotePercent;                                       
/*0x001*/     UINT8        DemotePercent;                                        
/*0x002*/     UINT8        PromotePercentBase;                                   
/*0x003*/     UINT8        DemotePercentBase;                                    
/*0x004*/     UINT8        AllowScaling;                                         
/*0x005*/     UINT8        ForceLightIdle;                                       
          }PROC_IDLE_POLICY, *PPROC_IDLE_POLICY;                                  
                                                                                 
          typedef union _PPM_IDLE_SYNCHRONIZATION_STATE // 3 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       AsLong;                                                        
/*0x000*/     LONG32       RefCount : 24;               // 0 BitPosition                  
/*0x000*/     ULONG32      State : 8;                   // 24 BitPosition                 
          }PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE;                                  
                                                                                          
          typedef struct _PROC_FEEDBACK                 // 18 elements, 0x90 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT64       Lock;                                                            
/*0x008*/     UINT64       CyclesLast;                                                      
/*0x010*/     UINT64       CyclesActive;                                                    
/*0x018*/     UINT64       Counters[2];                 // struct _PROC_FEEDBACK_COUNTER*   
/*0x028*/     UINT64       LastUpdateTime;                                                  
/*0x030*/     UINT64       UnscaledTime;                                                    
/*0x038*/     INT64        UnaccountedTime;                                                 
/*0x040*/     UINT64       ScaledTime[2];                                                   
/*0x050*/     UINT64       UnaccountedKernelTime;                                           
/*0x058*/     UINT64       PerformanceScaledKernelTime;                                     
/*0x060*/     ULONG32      UserTimeLast;                                                    
/*0x064*/     ULONG32      KernelTimeLast;                                                  
/*0x068*/     UINT64       IdleGenerationNumberLast;                                        
/*0x070*/     UINT64       HvActiveTimeLast;                                                
/*0x078*/     UINT64       StallCyclesLast;                                                 
/*0x080*/     UINT64       StallTime;                                                       
/*0x088*/     UINT8        KernelTimesIndex;                                                
/*0x089*/     UINT8        CounterDiscardsIdleTime;                                         
/*0x08A*/     UINT8        _PADDING0_[0x6];                                                 
          }PROC_FEEDBACK, *PPROC_FEEDBACK;                                                  
                                                                                            
          typedef struct _PPM_FFH_THROTTLE_STATE_INFO // 5 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT8        EnableLogging;                                                
/*0x001*/     UINT8        _PADDING0_[0x3];                                              
/*0x004*/     ULONG32      MismatchCount;                                                
/*0x008*/     UINT8        Initialized;                                                  
/*0x009*/     UINT8        _PADDING1_[0x7];                                              
/*0x010*/     UINT64       LastValue;                                                    
/*0x018*/     union _LARGE_INTEGER LastLogTickCount;  // 4 elements, 0x8 bytes (sizeof)  
          }PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO;                                   
                                                                                         
          typedef struct _PROC_IDLE_SNAP // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Time;                                            
/*0x008*/     UINT64       Idle;                                            
          }PROC_IDLE_SNAP, *PPROC_IDLE_SNAP;                                   
                                                                            
          typedef struct _PROCESSOR_POWER_STATE                         // 56 elements, 0x200 bytes (sizeof)   
          {                                                                                                    
/*0x000*/     UINT64       IdleStates;                                  // struct _PPM_IDLE_STATES*            
/*0x008*/     UINT64       IdleAccounting;                              // struct _PROC_IDLE_ACCOUNTING*       
/*0x010*/     UINT64       IdleTimeLast;                                                                       
/*0x018*/     UINT64       IdleTimeTotal;                                                                      
/*0x020*/     UINT64       IdleTimeEntry;                                                                      
/*0x028*/     UINT64       IdleTimeExpiration;                                                                 
/*0x030*/     UINT8        NonInterruptibleTransition;                                                         
/*0x031*/     UINT8        PepWokenTransition;                                                                 
/*0x032*/     UINT8        HvTargetState;                                                                      
/*0x033*/     UINT8        Reserved;                                                                           
/*0x034*/     ULONG32      TargetIdleState;                                                                    
/*0x038*/     struct _PROC_IDLE_POLICY IdlePolicy;                      // 6 elements, 0x6 bytes (sizeof)      
/*0x03E*/     UINT8        _PADDING0_[0x2];                                                                    
/*0x040*/     union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;    // 3 elements, 0x4 bytes (sizeof)      
/*0x044*/     UINT8        _PADDING1_[0x4];                                                                    
/*0x048*/     struct _PROC_FEEDBACK PerfFeedback;                       // 18 elements, 0x90 bytes (sizeof)    
/*0x0D8*/     enum _PROC_HYPERVISOR_STATE Hypervisor;                                                          
/*0x0DC*/     ULONG32      LastSysTime;                                                                        
/*0x0E0*/     UINT64       WmiDispatchPtr;                                                                     
/*0x0E8*/     LONG32       WmiInterfaceEnabled;                                                                
/*0x0EC*/     UINT8        _PADDING2_[0x4];                                                                    
/*0x0F0*/     struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo; // 5 elements, 0x20 bytes (sizeof)     
/*0x110*/     struct _KDPC PerfActionDpc;                               // 11 elements, 0x40 bytes (sizeof)    
/*0x150*/     LONG32       PerfActionMask;                                                                     
/*0x154*/     UINT8        _PADDING3_[0x4];                                                                    
/*0x158*/     struct _PROC_IDLE_SNAP HvIdleCheck;                       // 2 elements, 0x10 bytes (sizeof)     
/*0x168*/     UINT64       PerfCheck;                                   // struct _PROC_PERF_CHECK*            
/*0x170*/     UINT64       Domain;                                      // struct _PROC_PERF_DOMAIN*           
/*0x178*/     UINT64       PerfConstraint;                              // struct _PROC_PERF_CONSTRAINT*       
/*0x180*/     UINT64       Concurrency;                                 // struct _PPM_CONCURRENCY_ACCOUNTING* 
/*0x188*/     UINT64       ClassConcurrency;                            // struct _PPM_CONCURRENCY_ACCOUNTING* 
/*0x190*/     UINT64       Load;                                        // struct _PROC_PERF_LOAD*             
/*0x198*/     UINT64       PerfHistory;                                 // struct _PROC_PERF_HISTORY*          
/*0x1A0*/     UINT8        ArchitecturalEfficiencyClass;                                                       
/*0x1A1*/     UINT8        PerformanceSchedulingClass;                                                         
/*0x1A2*/     UINT8        EfficiencySchedulingClass;                                                          
/*0x1A3*/     UINT8        GuaranteedPerformancePercent;                                                       
/*0x1A4*/     UINT8        Parked;                                                                             
/*0x1A5*/     UINT8        LongPriorQosPeriod;                                                                 
/*0x1A6*/     UINT16       LatestAffinitizedPercent;                                                           
/*0x1A8*/     ULONG32      LatestPerformancePercent;                                                           
/*0x1AC*/     ULONG32      AveragePerformancePercent;                                                          
/*0x1B0*/     ULONG32      RelativePerformance;                                                                
/*0x1B4*/     ULONG32      Utility;                                                                            
/*0x1B8*/     ULONG32      AffinitizedUtility;                                                                 
/*0x1BC*/     UINT8        _PADDING4_[0x4];                                                                    
              union                                                     // 2 elements, 0x8 bytes (sizeof)      
              {                                                                                                
/*0x1C0*/         UINT64       SnapTimeLast;                                                                   
/*0x1C0*/         UINT64       EnergyConsumed;                                                                 
              };                                                                                               
/*0x1C8*/     UINT64       ActiveTime;                                                                         
/*0x1D0*/     UINT64       TotalTime;                                                                          
/*0x1D8*/     UINT64       FxDevice;                                    // struct _POP_FX_DEVICE*              
/*0x1E0*/     UINT64       LastQosTranstionTsc;                                                                
/*0x1E8*/     UINT64       QosTransitionHysteresis;                                                            
/*0x1F0*/     enum _KHETERO_CPU_QOS RequestedQosClass;                                                         
/*0x1F4*/     enum _KHETERO_CPU_QOS ResolvedQosClass;                                                          
/*0x1F8*/     UINT16       QosEquivalencyMask;                                                                 
/*0x1FA*/     UINT16       HwFeedbackTableIndex;                                                               
/*0x1FC*/     UINT8        HwFeedbackParkHint;                                                                 
/*0x1FD*/     UINT8        HwFeedbackPerformanceClass;                                                         
/*0x1FE*/     UINT8        HwFeedbackEfficiencyClass;                                                          
/*0x1FF*/     UINT8        HeteroCoreType;                                                                     
          }PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE;                                                     
                                                                                                               
          typedef struct _SYNCH_COUNTERS                                          // 46 elements, 0xB8 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     ULONG32      SpinLockAcquireCount;                                                                      
/*0x004*/     ULONG32      SpinLockContentionCount;                                                                   
/*0x008*/     ULONG32      SpinLockSpinCount;                                                                         
/*0x00C*/     ULONG32      IpiSendRequestBroadcastCount;                                                              
/*0x010*/     ULONG32      IpiSendRequestRoutineCount;                                                                
/*0x014*/     ULONG32      IpiSendSoftwareInterruptCount;                                                             
/*0x018*/     ULONG32      ExInitializeResourceCount;                                                                 
/*0x01C*/     ULONG32      ExReInitializeResourceCount;                                                               
/*0x020*/     ULONG32      ExDeleteResourceCount;                                                                     
/*0x024*/     ULONG32      ExecutiveResourceAcquiresCount;                                                            
/*0x028*/     ULONG32      ExecutiveResourceContentionsCount;                                                         
/*0x02C*/     ULONG32      ExecutiveResourceReleaseExclusiveCount;                                                    
/*0x030*/     ULONG32      ExecutiveResourceReleaseSharedCount;                                                       
/*0x034*/     ULONG32      ExecutiveResourceConvertsCount;                                                            
/*0x038*/     ULONG32      ExAcqResExclusiveAttempts;                                                                 
/*0x03C*/     ULONG32      ExAcqResExclusiveAcquiresExclusive;                                                        
/*0x040*/     ULONG32      ExAcqResExclusiveAcquiresExclusiveRecursive;                                               
/*0x044*/     ULONG32      ExAcqResExclusiveWaits;                                                                    
/*0x048*/     ULONG32      ExAcqResExclusiveNotAcquires;                                                              
/*0x04C*/     ULONG32      ExAcqResSharedAttempts;                                                                    
/*0x050*/     ULONG32      ExAcqResSharedAcquiresExclusive;                                                           
/*0x054*/     ULONG32      ExAcqResSharedAcquiresShared;                                                              
/*0x058*/     ULONG32      ExAcqResSharedAcquiresSharedRecursive;                                                     
/*0x05C*/     ULONG32      ExAcqResSharedWaits;                                                                       
/*0x060*/     ULONG32      ExAcqResSharedNotAcquires;                                                                 
/*0x064*/     ULONG32      ExAcqResSharedStarveExclusiveAttempts;                                                     
/*0x068*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresExclusive;                                            
/*0x06C*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresShared;                                               
/*0x070*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;                                      
/*0x074*/     ULONG32      ExAcqResSharedStarveExclusiveWaits;                                                        
/*0x078*/     ULONG32      ExAcqResSharedStarveExclusiveNotAcquires;                                                  
/*0x07C*/     ULONG32      ExAcqResSharedWaitForExclusiveAttempts;                                                    
/*0x080*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresExclusive;                                           
/*0x084*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresShared;                                              
/*0x088*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;                                     
/*0x08C*/     ULONG32      ExAcqResSharedWaitForExclusiveWaits;                                                       
/*0x090*/     ULONG32      ExAcqResSharedWaitForExclusiveNotAcquires;                                                 
/*0x094*/     ULONG32      ExSetResOwnerPointerExclusive;                                                             
/*0x098*/     ULONG32      ExSetResOwnerPointerSharedNew;                                                             
/*0x09C*/     ULONG32      ExSetResOwnerPointerSharedOld;                                                             
/*0x0A0*/     ULONG32      ExTryToAcqExclusiveAttempts;                                                               
/*0x0A4*/     ULONG32      ExTryToAcqExclusiveAcquires;                                                               
/*0x0A8*/     ULONG32      ExBoostExclusiveOwner;                                                                     
/*0x0AC*/     ULONG32      ExBoostSharedOwners;                                                                       
/*0x0B0*/     ULONG32      ExEtwSynchTrackingNotificationsCount;                                                      
/*0x0B4*/     ULONG32      ExEtwSynchTrackingNotificationsAccountedCount;                                             
          }SYNCH_COUNTERS, *PSYNCH_COUNTERS;                                                                          
                                                                                                                      
          typedef struct _KSECURE_FAULT_INFORMATION // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       FaultCode;                                                  
/*0x008*/     UINT64       FaultVa;                                                    
          }KSECURE_FAULT_INFORMATION, *PKSECURE_FAULT_INFORMATION;                                   
                                                                                       
          typedef struct _KSHARED_READY_QUEUE         // 13 elements, 0x270 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       Lock;                                                           
/*0x008*/     ULONG32      ReadySummary;                                                   
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                
/*0x010*/     struct _LIST_ENTRY ReadyListHead[32];                                        
/*0x210*/     CHAR         RunningSummary[64];                                             
/*0x250*/     UINT8        Span;                                                           
/*0x251*/     UINT8        LowProcIndex;                                                   
/*0x252*/     UINT8        QueueIndex;                                                     
/*0x253*/     UINT8        ProcCount;                                                      
/*0x254*/     UINT8        ScanOwner;                                                      
/*0x255*/     UINT8        Spare[3];                                                       
/*0x258*/     UINT64       Affinity;                                                       
/*0x260*/     ULONG32      ReadyThreadCount;                                               
/*0x264*/     UINT8        _PADDING1_[0x4];                                                
/*0x268*/     UINT64       ReadyQueueExpectedRunTime;                                      
          }KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE;                                     
                                                                                           
          typedef struct _KTIMER_EXPIRATION_TRACE      // 2 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       InterruptTime;                                                 
/*0x008*/     union _LARGE_INTEGER PerformanceCounter; // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE;                                   
                                                                                          
          typedef struct _MACHINE_FRAME // 8 elements, 0x28 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT64       Rip;                                            
/*0x008*/     UINT16       SegCs;                                          
/*0x00A*/     UINT16       Fill1[3];                                       
/*0x010*/     ULONG32      EFlags;                                         
/*0x014*/     ULONG32      Fill2;                                          
/*0x018*/     UINT64       Rsp;                                            
/*0x020*/     UINT16       SegSs;                                          
/*0x022*/     UINT16       Fill3[3];                                       
          }MACHINE_FRAME, *PMACHINE_FRAME;                                   
                                                                           
          typedef struct _MACHINE_CHECK_CONTEXT   // 6 elements, 0x50 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _MACHINE_FRAME MachineFrame; // 8 elements, 0x28 bytes (sizeof) 
/*0x028*/     UINT64       Rax;                                                      
/*0x030*/     UINT64       Rcx;                                                      
/*0x038*/     UINT64       Rdx;                                                      
/*0x040*/     UINT64       GsBase;                                                   
/*0x048*/     UINT64       Cr3;                                                      
          }MACHINE_CHECK_CONTEXT, *PMACHINE_CHECK_CONTEXT;                                   
                                                                                     
          typedef struct _KREQUEST_PACKET    // 2 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       CurrentPacket[3]; // VOID*                           
/*0x018*/     UINT64       WorkerRoutine;    // FUNCT_00EF_0BB5_WorkerRoutine*  
          }KREQUEST_PACKET, *PKREQUEST_PACKET;                                   
                                                                                
          typedef struct _REQUEST_MAILBOX            // 5 elements, 0x40 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Next;                     // struct _REQUEST_MAILBOX*        
/*0x008*/     UINT64       RequestSummary;                                              
/*0x010*/     struct _KREQUEST_PACKET RequestPacket; // 2 elements, 0x20 bytes (sizeof) 
/*0x030*/     UINT64       NodeTargetCountAddr;      // LONG32*                         
/*0x038*/     LONG32       NodeTargetCount;                                             
/*0x03C*/     UINT8        _PADDING0_[0x4];                                             
          }REQUEST_MAILBOX, *PREQUEST_MAILBOX;                                          
                                                                                        
           typedef struct _KPRCB                                               // 329 elements, 0x7EC0 bytes (sizeof)     
           {                                                                                                              
/*0x000*/      ULONG32      MxCsr;                                                                                        
/*0x004*/      UINT8        LegacyNumber;                                                                                 
/*0x005*/      UINT8        ReservedMustBeZero;                                                                           
/*0x006*/      UINT8        InterruptRequest;                                                                             
/*0x007*/      UINT8        IdleHalt;                                                                                     
/*0x008*/      UINT64       CurrentThread;                                     // struct _KTHREAD*                        
/*0x010*/      UINT64       NextThread;                                        // struct _KTHREAD*                        
/*0x018*/      UINT64       IdleThread;                                        // struct _KTHREAD*                        
/*0x020*/      UINT8        NestingLevel;                                                                                 
/*0x021*/      UINT8        ClockOwner;                                                                                   
               union                                                           // 2 elements, 0x1 bytes (sizeof)          
               {                                                                                                          
/*0x022*/          UINT8        PendingTickFlags;                                                                         
                   struct                                                      // 2 elements, 0x1 bytes (sizeof)          
                   {                                                                                                      
/*0x022*/              UINT8        PendingTick : 1;                           // 0 BitPosition                           
/*0x022*/              UINT8        PendingBackupTick : 1;                     // 1 BitPosition                           
                   };                                                                                                     
               };                                                                                                         
/*0x023*/      UINT8        IdleState;                                                                                    
/*0x024*/      ULONG32      Number;                                                                                       
/*0x028*/      UINT64       RspBase;                                                                                      
/*0x030*/      UINT64       PrcbLock;                                                                                     
/*0x038*/      UINT64       PriorityState;                                     // CHAR*                                   
/*0x040*/      CHAR         CpuType;                                                                                      
/*0x041*/      CHAR         CpuID;                                                                                        
               union                                                           // 2 elements, 0x2 bytes (sizeof)          
               {                                                                                                          
/*0x042*/          UINT16       CpuStep;                                                                                  
                   struct                                                      // 2 elements, 0x2 bytes (sizeof)          
                   {                                                                                                      
/*0x042*/              UINT8        CpuStepping;                                                                          
/*0x043*/              UINT8        CpuModel;                                                                             
                   };                                                                                                     
               };                                                                                                         
/*0x044*/      ULONG32      MHz;                                                                                          
/*0x048*/      UINT64       HalReserved[8];                                                                               
/*0x088*/      UINT16       MinorVersion;                                                                                 
/*0x08A*/      UINT16       MajorVersion;                                                                                 
/*0x08C*/      UINT8        BuildType;                                                                                    
/*0x08D*/      UINT8        CpuVendor;                                                                                    
/*0x08E*/      UINT8        CoresPerPhysicalProcessor;                                                                    
/*0x08F*/      UINT8        LogicalProcessorsPerCore;                                                                     
/*0x090*/      UINT64       PrcbPad04[6];                                                                                 
/*0x0C0*/      UINT64       ParentNode;                                        // struct _KNODE*                          
/*0x0C8*/      UINT64       GroupSetMember;                                                                               
/*0x0D0*/      UINT8        Group;                                                                                        
/*0x0D1*/      UINT8        GroupIndex;                                                                                   
/*0x0D2*/      UINT8        PrcbPad05[2];                                                                                 
/*0x0D4*/      ULONG32      InitialApicId;                                                                                
/*0x0D8*/      ULONG32      ScbOffset;                                                                                    
/*0x0DC*/      ULONG32      ApicMask;                                                                                     
/*0x0E0*/      UINT64       AcpiReserved;                                      // VOID*                                   
/*0x0E8*/      ULONG32      CFlushSize;                                                                                   
/*0x0EC*/      union _KPRCBFLAG PrcbFlags;                                     // 5 elements, 0x4 bytes (sizeof)          
               union                                                           // 2 elements, 0x10 bytes (sizeof)         
               {                                                                                                          
                   struct                                                      // 8 elements, 0x10 bytes (sizeof)         
                   {                                                                                                      
/*0x0F0*/              UINT64       TrappedSecurityDomain;                                                                
                       union                                                   // 2 elements, 0x1 bytes (sizeof)          
                       {                                                                                                  
/*0x0F8*/                  UINT8        BpbState;                                                                         
                           struct                                              // 6 elements, 0x1 bytes (sizeof)          
                           {                                                                                              
/*0x0F8*/                      UINT8        BpbCpuIdle : 1;                    // 0 BitPosition                           
/*0x0F8*/                      UINT8        BpbFlushRsbOnTrap : 1;             // 1 BitPosition                           
/*0x0F8*/                      UINT8        BpbIbpbOnReturn : 1;               // 2 BitPosition                           
/*0x0F8*/                      UINT8        BpbIbpbOnTrap : 1;                 // 3 BitPosition                           
/*0x0F8*/                      UINT8        BpbIbpbOnRetpolineExit : 1;        // 4 BitPosition                           
/*0x0F8*/                      UINT8        BpbStateReserved : 3;              // 5 BitPosition                           
                           };                                                                                             
                       };                                                                                                 
                       union                                                   // 2 elements, 0x1 bytes (sizeof)          
                       {                                                                                                  
/*0x0F9*/                  UINT8        BpbFeatures;                                                                      
                           struct                                              // 4 elements, 0x1 bytes (sizeof)          
                           {                                                                                              
/*0x0F9*/                      UINT8        BpbClearOnIdle : 1;                // 0 BitPosition                           
/*0x0F9*/                      UINT8        BpbEnabled : 1;                    // 1 BitPosition                           
/*0x0F9*/                      UINT8        BpbSmep : 1;                       // 2 BitPosition                           
/*0x0F9*/                      UINT8        BpbFeaturesReserved : 5;           // 3 BitPosition                           
                           };                                                                                             
                       };                                                                                                 
/*0x0FA*/              UINT8        BpbCurrentSpecCtrl;                                                                   
/*0x0FB*/              UINT8        BpbKernelSpecCtrl;                                                                    
/*0x0FC*/              UINT8        BpbNmiSpecCtrl;                                                                       
/*0x0FD*/              UINT8        BpbUserSpecCtrl;                                                                      
/*0x0FE*/              INT16        PairRegister;                                                                         
                   };                                                                                                     
/*0x0F0*/          UINT64       PrcbPad11[2];                                                                             
               };                                                                                                         
/*0x100*/      struct _KPROCESSOR_STATE ProcessorState;                        // 2 elements, 0x5C0 bytes (sizeof)        
/*0x6C0*/      UINT64       ExtendedSupervisorState;                           // struct _XSAVE_AREA_HEADER*              
/*0x6C8*/      ULONG32      ProcessorSignature;                                                                           
/*0x6CC*/      ULONG32      ProcessorFlags;                                                                               
               union                                                           // 2 elements, 0x8 bytes (sizeof)          
               {                                                                                                          
                   struct                                                      // 5 elements, 0x8 bytes (sizeof)          
                   {                                                                                                      
/*0x6D0*/              UINT8        BpbRetpolineExitSpecCtrl;                                                             
/*0x6D1*/              UINT8        BpbTrappedRetpolineExitSpecCtrl;                                                      
                       union                                                   // 2 elements, 0x1 bytes (sizeof)          
                       {                                                                                                  
/*0x6D2*/                  UINT8        BpbTrappedBpbState;                                                               
                           struct                                              // 6 elements, 0x1 bytes (sizeof)          
                           {                                                                                              
/*0x6D2*/                      UINT8        BpbTrappedCpuIdle : 1;             // 0 BitPosition                           
/*0x6D2*/                      UINT8        BpbTrappedFlushRsbOnTrap : 1;      // 1 BitPosition                           
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnReturn : 1;        // 2 BitPosition                           
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnTrap : 1;          // 3 BitPosition                           
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnRetpolineExit : 1; // 4 BitPosition                           
/*0x6D2*/                      UINT8        BpbtrappedBpbStateReserved : 3;    // 5 BitPosition                           
                           };                                                                                             
                       };                                                                                                 
                       union                                                   // 2 elements, 0x1 bytes (sizeof)          
                       {                                                                                                  
/*0x6D3*/                  UINT8        BpbRetpolineState;                                                                
                           struct                                              // 4 elements, 0x1 bytes (sizeof)          
                           {                                                                                              
/*0x6D3*/                      UINT8        BpbRunningNonRetpolineCode : 1;    // 0 BitPosition                           
/*0x6D3*/                      UINT8        BpbIndirectCallsSafe : 1;          // 1 BitPosition                           
/*0x6D3*/                      UINT8        BpbRetpolineEnabled : 1;           // 2 BitPosition                           
/*0x6D3*/                      UINT8        BpbRetpolineStateReserved : 5;     // 3 BitPosition                           
                           };                                                                                             
                       };                                                                                                 
/*0x6D4*/              ULONG32      PrcbPad12b;                                                                           
                   };                                                                                                     
/*0x6D0*/          UINT64       PrcbPad12a;                                                                               
               };                                                                                                         
/*0x6D8*/      UINT64       PrcbPad12[3];                                                                                 
/*0x6F0*/      struct _KSPIN_LOCK_QUEUE LockQueue[17];                                                                    
/*0x800*/      struct _PP_LOOKASIDE_LIST PPLookasideList[16];                                                             
/*0x900*/      struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];                                                 
/*0x1500*/     struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];                                                  
/*0x2100*/     struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                                                   
/*0x2D00*/     UINT64       PrcbPad20;                                                                                    
/*0x2D08*/     struct _SINGLE_LIST_ENTRY DeferredReadyListHead;                // 1 elements, 0x8 bytes (sizeof)          
/*0x2D10*/     LONG32       MmPageFaultCount;                                                                             
/*0x2D14*/     LONG32       MmCopyOnWriteCount;                                                                           
/*0x2D18*/     LONG32       MmTransitionCount;                                                                            
/*0x2D1C*/     LONG32       MmDemandZeroCount;                                                                            
/*0x2D20*/     LONG32       MmPageReadCount;                                                                              
/*0x2D24*/     LONG32       MmPageReadIoCount;                                                                            
/*0x2D28*/     LONG32       MmDirtyPagesWriteCount;                                                                       
/*0x2D2C*/     LONG32       MmDirtyWriteIoCount;                                                                          
/*0x2D30*/     LONG32       MmMappedPagesWriteCount;                                                                      
/*0x2D34*/     LONG32       MmMappedWriteIoCount;                                                                         
/*0x2D38*/     ULONG32      KeSystemCalls;                                                                                
/*0x2D3C*/     ULONG32      KeContextSwitches;                                                                            
/*0x2D40*/     ULONG32      PrcbPad40;                                                                                    
/*0x2D44*/     ULONG32      CcFastReadNoWait;                                                                             
/*0x2D48*/     ULONG32      CcFastReadWait;                                                                               
/*0x2D4C*/     ULONG32      CcFastReadNotPossible;                                                                        
/*0x2D50*/     ULONG32      CcCopyReadNoWait;                                                                             
/*0x2D54*/     ULONG32      CcCopyReadWait;                                                                               
/*0x2D58*/     ULONG32      CcCopyReadNoWaitMiss;                                                                         
/*0x2D5C*/     LONG32       IoReadOperationCount;                                                                         
/*0x2D60*/     LONG32       IoWriteOperationCount;                                                                        
/*0x2D64*/     LONG32       IoOtherOperationCount;                                                                        
/*0x2D68*/     union _LARGE_INTEGER IoReadTransferCount;                       // 4 elements, 0x8 bytes (sizeof)          
/*0x2D70*/     union _LARGE_INTEGER IoWriteTransferCount;                      // 4 elements, 0x8 bytes (sizeof)          
/*0x2D78*/     union _LARGE_INTEGER IoOtherTransferCount;                      // 4 elements, 0x8 bytes (sizeof)          
/*0x2D80*/     LONG32       PacketBarrier;                                                                                
/*0x2D84*/     LONG32       TargetCount;                                                                                  
/*0x2D88*/     ULONG32      IpiFrozen;                                                                                    
/*0x2D8C*/     ULONG32      PrcbPad30;                                                                                    
/*0x2D90*/     UINT64       IsrDpcStats;                                       // VOID*                                   
/*0x2D98*/     ULONG32      DeviceInterrupts;                                                                             
/*0x2D9C*/     LONG32       LookasideIrpFloat;                                                                            
/*0x2DA0*/     ULONG32      InterruptLastCount;                                                                           
/*0x2DA4*/     ULONG32      InterruptRate;                                                                                
/*0x2DA8*/     UINT64       LastNonHrTimerExpiration;                                                                     
/*0x2DB0*/     UINT64       PairPrcb;                                          // struct _KPRCB*                          
/*0x2DB8*/     UINT64       PrcbPad35[1];                                                                                 
/*0x2DC0*/     union _SLIST_HEADER InterruptObjectPool;                        // 3 elements, 0x10 bytes (sizeof)         
/*0x2DD0*/     UINT64       PrcbPad41[6];                                                                                 
/*0x2E00*/     struct _KDPC_DATA DpcData[2];                                                                              
/*0x2E50*/     UINT64       DpcStack;                                          // VOID*                                   
/*0x2E58*/     LONG32       MaximumDpcQueueDepth;                                                                         
/*0x2E5C*/     ULONG32      DpcRequestRate;                                                                               
/*0x2E60*/     ULONG32      MinimumDpcRate;                                                                               
/*0x2E64*/     ULONG32      DpcLastCount;                                                                                 
/*0x2E68*/     UINT8        ThreadDpcEnable;                                                                              
/*0x2E69*/     UINT8        QuantumEnd;                                                                                   
/*0x2E6A*/     UINT8        DpcRoutineActive;                                                                             
/*0x2E6B*/     UINT8        IdleSchedule;                                                                                 
               union                                                           // 4 elements, 0x4 bytes (sizeof)          
               {                                                                                                          
/*0x2E6C*/         LONG32       DpcRequestSummary;                                                                        
/*0x2E6C*/         INT16        DpcRequestSlot[2];                                                                        
                   struct                                                      // 2 elements, 0x4 bytes (sizeof)          
                   {                                                                                                      
/*0x2E6C*/             INT16        NormalDpcState;                                                                       
/*0x2E6E*/             INT16        ThreadDpcState;                                                                       
                   };                                                                                                     
                   struct                                                      // 10 elements, 0x4 bytes (sizeof)         
                   {                                                                                                      
/*0x2E6C*/             ULONG32      DpcNormalProcessingActive : 1;             // 0 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalProcessingRequested : 1;          // 1 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalThreadSignal : 1;                 // 2 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalTimerExpiration : 1;              // 3 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalDpcPresent : 1;                   // 4 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalLocalInterrupt : 1;               // 5 BitPosition                           
/*0x2E6C*/             ULONG32      DpcNormalSpare : 10;                       // 6 BitPosition                           
/*0x2E6C*/             ULONG32      DpcThreadActive : 1;                       // 16 BitPosition                          
/*0x2E6C*/             ULONG32      DpcThreadRequested : 1;                    // 17 BitPosition                          
/*0x2E6C*/             ULONG32      DpcThreadSpare : 14;                       // 18 BitPosition                          
                   };                                                                                                     
               };                                                                                                         
/*0x2E70*/     ULONG32      LastTimerHand;                                                                                
/*0x2E74*/     ULONG32      LastTick;                                                                                     
/*0x2E78*/     ULONG32      ClockInterrupts;                                                                              
/*0x2E7C*/     ULONG32      ReadyScanTick;                                                                                
/*0x2E80*/     UINT64       InterruptObject[256];                              // VOID*                                   
/*0x3680*/     struct _KTIMER_TABLE TimerTable;                                // 2 elements, 0x2200 bytes (sizeof)       
/*0x5880*/     struct _KGATE DpcGate;                                          // 1 elements, 0x18 bytes (sizeof)         
/*0x5898*/     UINT64       PrcbPad52;                                         // VOID*                                   
/*0x58A0*/     struct _KDPC CallDpc;                                           // 11 elements, 0x40 bytes (sizeof)        
/*0x58E0*/     LONG32       ClockKeepAlive;                                                                               
/*0x58E4*/     UINT8        PrcbPad60[2];                                                                                 
/*0x58E6*/     UINT16       NmiActive;                                                                                    
/*0x58E8*/     LONG32       DpcWatchdogPeriod;                                                                            
/*0x58EC*/     LONG32       DpcWatchdogCount;                                                                             
/*0x58F0*/     LONG32       KeSpinLockOrdering;                                                                           
/*0x58F4*/     ULONG32      DpcWatchdogProfileCumulativeDpcThreshold;                                                     
/*0x58F8*/     UINT64       CachedPtes;                                        // VOID*                                   
/*0x5900*/     struct _LIST_ENTRY WaitListHead;                                // 2 elements, 0x10 bytes (sizeof)         
/*0x5910*/     UINT64       WaitLock;                                                                                     
/*0x5918*/     ULONG32      ReadySummary;                                                                                 
/*0x591C*/     LONG32       AffinitizedSelectionMask;                                                                     
/*0x5920*/     ULONG32      QueueIndex;                                                                                   
/*0x5924*/     ULONG32      PrcbPad75[3];                                                                                 
/*0x5930*/     struct _KDPC TimerExpirationDpc;                                // 11 elements, 0x40 bytes (sizeof)        
/*0x5970*/     struct _RTL_RB_TREE ScbQueue;                                   // 3 elements, 0x10 bytes (sizeof)         
/*0x5980*/     struct _LIST_ENTRY DispatcherReadyListHead[32];                                                            
/*0x5B80*/     ULONG32      InterruptCount;                                                                               
/*0x5B84*/     ULONG32      KernelTime;                                                                                   
/*0x5B88*/     ULONG32      UserTime;                                                                                     
/*0x5B8C*/     ULONG32      DpcTime;                                                                                      
/*0x5B90*/     ULONG32      InterruptTime;                                                                                
/*0x5B94*/     ULONG32      AdjustDpcThreshold;                                                                           
/*0x5B98*/     UINT8        DebuggerSavedIRQL;                                                                            
/*0x5B99*/     UINT8        GroupSchedulingOverQuota;                                                                     
/*0x5B9A*/     UINT8        DeepSleep;                                                                                    
/*0x5B9B*/     UINT8        PrcbPad80;                                                                                    
/*0x5B9C*/     ULONG32      DpcTimeCount;                                                                                 
/*0x5BA0*/     ULONG32      DpcTimeLimit;                                                                                 
/*0x5BA4*/     ULONG32      PeriodicCount;                                                                                
/*0x5BA8*/     ULONG32      PeriodicBias;                                                                                 
/*0x5BAC*/     ULONG32      AvailableTime;                                                                                
/*0x5BB0*/     ULONG32      KeExceptionDispatchCount;                                                                     
/*0x5BB4*/     ULONG32      ReadyThreadCount;                                                                             
/*0x5BB8*/     UINT64       ReadyQueueExpectedRunTime;                                                                    
/*0x5BC0*/     UINT64       StartCycles;                                                                                  
/*0x5BC8*/     UINT64       TaggedCyclesStart;                                                                            
/*0x5BD0*/     UINT64       TaggedCycles[2];                                                                              
/*0x5BE0*/     UINT64       GenerationTarget;                                                                             
/*0x5BE8*/     UINT64       AffinitizedCycles;                                                                            
/*0x5BF0*/     UINT64       ImportantCycles;                                                                              
/*0x5BF8*/     UINT64       UnimportantCycles;                                                                            
/*0x5C00*/     ULONG32      DpcWatchdogProfileSingleDpcThreshold;                                                         
/*0x5C04*/     LONG32       MmSpinLockOrdering;                                                                           
/*0x5C08*/     UINT64       CachedStack;                                       // VOID*                                   
/*0x5C10*/     ULONG32      PageColor;                                                                                    
/*0x5C14*/     ULONG32      NodeColor;                                                                                    
/*0x5C18*/     ULONG32      NodeShiftedColor;                                                                             
/*0x5C1C*/     ULONG32      SecondaryColorMask;                                                                           
/*0x5C20*/     UINT8        PrcbPad81[7];                                                                                 
/*0x5C27*/     UINT8        TbFlushListActive;                                                                            
/*0x5C28*/     UINT64       PrcbPad82[2];                                                                                 
/*0x5C38*/     UINT64       CycleTime;                                                                                    
/*0x5C40*/     UINT64       Cycles[2][4];                                                                                 
/*0x5C80*/     ULONG32      CcFastMdlReadNoWait;                                                                          
/*0x5C84*/     ULONG32      CcFastMdlReadWait;                                                                            
/*0x5C88*/     ULONG32      CcFastMdlReadNotPossible;                                                                     
/*0x5C8C*/     ULONG32      CcMapDataNoWait;                                                                              
/*0x5C90*/     ULONG32      CcMapDataWait;                                                                                
/*0x5C94*/     ULONG32      CcPinMappedDataCount;                                                                         
/*0x5C98*/     ULONG32      CcPinReadNoWait;                                                                              
/*0x5C9C*/     ULONG32      CcPinReadWait;                                                                                
/*0x5CA0*/     ULONG32      CcMdlReadNoWait;                                                                              
/*0x5CA4*/     ULONG32      CcMdlReadWait;                                                                                
/*0x5CA8*/     ULONG32      CcLazyWriteHotSpots;                                                                          
/*0x5CAC*/     ULONG32      CcLazyWriteIos;                                                                               
/*0x5CB0*/     ULONG32      CcLazyWritePages;                                                                             
/*0x5CB4*/     ULONG32      CcDataFlushes;                                                                                
/*0x5CB8*/     ULONG32      CcDataPages;                                                                                  
/*0x5CBC*/     ULONG32      CcLostDelayedWrites;                                                                          
/*0x5CC0*/     ULONG32      CcFastReadResourceMiss;                                                                       
/*0x5CC4*/     ULONG32      CcCopyReadWaitMiss;                                                                           
/*0x5CC8*/     ULONG32      CcFastMdlReadResourceMiss;                                                                    
/*0x5CCC*/     ULONG32      CcMapDataNoWaitMiss;                                                                          
/*0x5CD0*/     ULONG32      CcMapDataWaitMiss;                                                                            
/*0x5CD4*/     ULONG32      CcPinReadNoWaitMiss;                                                                          
/*0x5CD8*/     ULONG32      CcPinReadWaitMiss;                                                                            
/*0x5CDC*/     ULONG32      CcMdlReadNoWaitMiss;                                                                          
/*0x5CE0*/     ULONG32      CcMdlReadWaitMiss;                                                                            
/*0x5CE4*/     ULONG32      CcReadAheadIos;                                                                               
/*0x5CE8*/     LONG32       MmCacheTransitionCount;                                                                       
/*0x5CEC*/     LONG32       MmCacheReadCount;                                                                             
/*0x5CF0*/     LONG32       MmCacheIoCount;                                                                               
/*0x5CF4*/     ULONG32      PrcbPad91;                                                                                    
/*0x5CF8*/     UINT64       MmInternal;                                        // VOID*                                   
/*0x5D00*/     struct _PROCESSOR_POWER_STATE PowerState;                       // 56 elements, 0x200 bytes (sizeof)       
/*0x5F00*/     UINT64       HyperPte;                                          // VOID*                                   
/*0x5F08*/     struct _LIST_ENTRY ScbList;                                     // 2 elements, 0x10 bytes (sizeof)         
/*0x5F18*/     struct _KDPC ForceIdleDpc;                                      // 11 elements, 0x40 bytes (sizeof)        
/*0x5F58*/     struct _KDPC DpcWatchdogDpc;                                    // 11 elements, 0x40 bytes (sizeof)        
/*0x5F98*/     struct _KTIMER DpcWatchdogTimer;                                // 6 elements, 0x40 bytes (sizeof)         
/*0x5FD8*/     struct _CACHE_DESCRIPTOR Cache[5];                                                                         
/*0x6014*/     ULONG32      CacheCount;                                                                                   
/*0x6018*/     ULONG32      CachedCommit;                                                                                 
/*0x601C*/     ULONG32      CachedResidentAvailable;                                                                      
/*0x6020*/     UINT64       WheaInfo;                                          // VOID*                                   
/*0x6028*/     UINT64       EtwSupport;                                        // VOID*                                   
/*0x6030*/     UINT64       ExSaPageArray;                                     // VOID*                                   
/*0x6038*/     ULONG32      KeAlignmentFixupCount;                                                                        
/*0x603C*/     ULONG32      PrcbPad95;                                                                                    
/*0x6040*/     union _SLIST_HEADER HypercallPageList;                          // 3 elements, 0x10 bytes (sizeof)         
/*0x6050*/     UINT64       StatisticsPage;                                    // UINT64*                                 
/*0x6058*/     UINT64       PrcbPad85[5];                                                                                 
/*0x6080*/     UINT64       HypercallCachedPages;                              // VOID*                                   
/*0x6088*/     UINT64       VirtualApicAssist;                                 // VOID*                                   
/*0x6090*/     struct _KAFFINITY_EX PackageProcessorSet;                       // 4 elements, 0xA8 bytes (sizeof)         
/*0x6138*/     UINT64       PrcbPad86;                                                                                    
/*0x6140*/     UINT64       SharedReadyQueueMask;                                                                         
/*0x6148*/     UINT64       SharedReadyQueue;                                  // struct _KSHARED_READY_QUEUE*            
/*0x6150*/     ULONG32      SharedQueueScanOwner;                                                                         
/*0x6154*/     ULONG32      ScanSiblingIndex;                                                                             
/*0x6158*/     UINT64       CoreProcessorSet;                                                                             
/*0x6160*/     UINT64       ScanSiblingMask;                                                                              
/*0x6168*/     UINT64       LLCMask;                                                                                      
/*0x6170*/     UINT64       CacheProcessorMask[5];                                                                        
/*0x6198*/     UINT64       ProcessorProfileControlArea;                       // struct _PROCESSOR_PROFILE_CONTROL_AREA* 
/*0x61A0*/     UINT64       ProfileEventIndexAddress;                          // VOID*                                   
/*0x61A8*/     UINT64       DpcWatchdogProfile;                                // VOID**                                  
/*0x61B0*/     UINT64       DpcWatchdogProfileCurrentEmptyCapture;             // VOID**                                  
/*0x61B8*/     UINT64       SchedulerAssist;                                   // VOID*                                   
/*0x61C0*/     struct _SYNCH_COUNTERS SynchCounters;                           // 46 elements, 0xB8 bytes (sizeof)        
/*0x6278*/     UINT64       PrcbPad94;                                                                                    
/*0x6280*/     struct _FILESYSTEM_DISK_COUNTERS FsCounters;                    // 2 elements, 0x10 bytes (sizeof)         
/*0x6290*/     UINT8        VendorString[13];                                                                             
/*0x629D*/     UINT8        PrcbPad100[3];                                                                                
/*0x62A0*/     UINT64       FeatureBits;                                                                                  
/*0x62A8*/     union _LARGE_INTEGER UpdateSignature;                           // 4 elements, 0x8 bytes (sizeof)          
/*0x62B0*/     UINT64       PteBitCache;                                                                                  
/*0x62B8*/     ULONG32      PteBitOffset;                                                                                 
/*0x62BC*/     ULONG32      PrcbPad105;                                                                                   
/*0x62C0*/     UINT64       Context;                                           // struct _CONTEXT*                        
/*0x62C8*/     ULONG32      ContextFlagsInit;                                                                             
/*0x62CC*/     ULONG32      PrcbPad115;                                                                                   
/*0x62D0*/     UINT64       ExtendedState;                                     // struct _XSAVE_AREA*                     
/*0x62D8*/     UINT64       IsrStack;                                          // VOID*                                   
/*0x62E0*/     struct _KENTROPY_TIMING_STATE EntropyTimingState;               // 4 elements, 0x150 bytes (sizeof)        
/*0x6430*/     UINT64       PrcbPad110;                                                                                   
               struct                                                          // 15 elements, 0x38 bytes (sizeof)        
               {                                                                                                          
/*0x6438*/         ULONG32      UpdateCycle;                                                                              
                   union                                                       // 2 elements, 0x2 bytes (sizeof)          
                   {                                                                                                      
/*0x643C*/             INT16        PairLocal;                                                                            
                       struct                                                  // 2 elements, 0x2 bytes (sizeof)          
                       {                                                                                                  
/*0x643C*/                 UINT8        PairLocalLow;                                                                     
                           struct                                              // 5 elements, 0x1 bytes (sizeof)          
                           {                                                                                              
/*0x643D*/                     UINT8        PairLocalForceStibp : 1;           // 0 BitPosition                           
/*0x643D*/                     UINT8        Reserved : 4;                      // 1 BitPosition                           
/*0x643D*/                     UINT8        Frozen : 1;                        // 5 BitPosition                           
/*0x643D*/                     UINT8        ForceUntrusted : 1;                // 6 BitPosition                           
/*0x643D*/                     UINT8        SynchIpi : 1;                      // 7 BitPosition                           
                           };                                                                                             
                       };                                                                                                 
                   };                                                                                                     
                   union                                                       // 2 elements, 0x2 bytes (sizeof)          
                   {                                                                                                      
/*0x643E*/             INT16        PairRemote;                                                                           
                       struct                                                  // 2 elements, 0x2 bytes (sizeof)          
                       {                                                                                                  
/*0x643E*/                 UINT8        PairRemoteLow;                                                                    
/*0x643F*/                 UINT8        Reserved2;                                                                        
                       };                                                                                                 
                   };                                                                                                     
/*0x6440*/         UINT8        Trace[24];                                                                                
/*0x6458*/         UINT64       LocalDomain;                                                                              
/*0x6460*/         UINT64       RemoteDomain;                                                                             
/*0x6468*/         UINT64       Thread;                                        // struct _KTHREAD*                        
               }StibpPairingTrace;                                                                                        
/*0x6470*/     struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;                   // 1 elements, 0x8 bytes (sizeof)          
/*0x6478*/     struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;                // 1 elements, 0x8 bytes (sizeof)          
/*0x6480*/     struct _KDPC AbDpc;                                             // 11 elements, 0x40 bytes (sizeof)        
/*0x64C0*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;       // 2 elements, 0x54 bytes (sizeof)         
/*0x6514*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;      // 2 elements, 0x54 bytes (sizeof)         
/*0x6568*/     struct _KSECURE_FAULT_INFORMATION SecureFault;                  // 2 elements, 0x10 bytes (sizeof)         
/*0x6578*/     UINT64       PrcbPad120;                                                                                   
/*0x6580*/     struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;              // 13 elements, 0x270 bytes (sizeof)       
/*0x67F0*/     UINT64       PrcbPad125[2];                                                                                
/*0x6800*/     ULONG32      TimerExpirationTraceCount;                                                                    
/*0x6804*/     ULONG32      PrcbPad127;                                                                                   
/*0x6808*/     struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];                                                  
/*0x6908*/     UINT64       PrcbPad128[7];                                                                                
/*0x6940*/     UINT64       Mailbox;                                           // struct _REQUEST_MAILBOX*                
/*0x6948*/     UINT64       PrcbPad130[7];                                                                                
/*0x6980*/     struct _MACHINE_CHECK_CONTEXT McheckContext[2];                                                            
/*0x6A20*/     UINT64       PrcbPad134[4];                                                                                
/*0x6A40*/     struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];                                                           
/*0x6AA0*/     UINT64       PrcbPad134a[4];                                                                               
/*0x6AC0*/     UINT8        PrcbPad138[960];                                                                              
/*0x6E80*/     UINT64       KernelDirectoryTableBase;                                                                     
/*0x6E88*/     UINT64       RspBaseShadow;                                                                                
/*0x6E90*/     UINT64       UserRspShadow;                                                                                
/*0x6E98*/     ULONG32      ShadowFlags;                                                                                  
/*0x6E9C*/     ULONG32      DbgMceNestingLevel;                                                                           
/*0x6EA0*/     ULONG32      DbgMceFlags;                                                                                  
/*0x6EA4*/     ULONG32      PrcbPad139;                                                                                   
/*0x6EA8*/     UINT64       PrcbPad140[507];                                                                              
/*0x7E80*/     struct _REQUEST_MAILBOX RequestMailbox[1];                                                                 
           }KPRCB, *PKPRCB;                                                                                               
                                                                                                                          
          typedef struct _KPCR                            // 27 elements, 0x8040 bytes (sizeof)  
          {                                                                                      
              union                                       // 2 elements, 0x38 bytes (sizeof)     
              {                                                                                  
/*0x000*/         struct _NT_TIB NtTib;                   // 8 elements, 0x38 bytes (sizeof)     
                  struct                                  // 7 elements, 0x38 bytes (sizeof)     
                  {                                                                              
/*0x000*/             UINT64       GdtBase;               // union _KGDTENTRY64*                 
/*0x008*/             UINT64       TssBase;               // struct _KTSS64*                     
/*0x010*/             UINT64       UserRsp;                                                      
/*0x018*/             UINT64       Self;                  // struct _KPCR*                       
/*0x020*/             UINT64       CurrentPrcb;           // struct _KPRCB*                      
/*0x028*/             UINT64       LockArray;             // struct _KSPIN_LOCK_QUEUE*           
/*0x030*/             UINT64       Used_Self;             // VOID*                               
                  };                                                                             
              };                                                                                 
/*0x038*/     UINT64       IdtBase;                       // union _KIDTENTRY64*                 
/*0x040*/     UINT64       Unused[2];                                                            
/*0x050*/     UINT8        Irql;                                                                 
/*0x051*/     UINT8        SecondLevelCacheAssociativity;                                        
/*0x052*/     UINT8        ObsoleteNumber;                                                       
/*0x053*/     UINT8        Fill0;                                                                
/*0x054*/     ULONG32      Unused0[3];                                                           
/*0x060*/     UINT16       MajorVersion;                                                         
/*0x062*/     UINT16       MinorVersion;                                                         
/*0x064*/     ULONG32      StallScaleFactor;                                                     
/*0x068*/     UINT64       Unused1[3];                    // VOID*                               
/*0x080*/     ULONG32      KernelReserved[15];                                                   
/*0x0BC*/     ULONG32      SecondLevelCacheSize;                                                 
/*0x0C0*/     ULONG32      HalReserved[16];                                                      
/*0x100*/     ULONG32      Unused2;                                                              
/*0x104*/     UINT8        _PADDING0_[0x4];                                                      
/*0x108*/     UINT64       KdVersionBlock;                // VOID*                               
/*0x110*/     UINT64       Unused3;                       // VOID*                               
/*0x118*/     ULONG32      PcrAlign1[24];                                                        
/*0x178*/     UINT8        _PADDING1_[0x8];                                                      
/*0x180*/     struct _KPRCB Prcb;                         // 329 elements, 0x7EC0 bytes (sizeof) 
          }KPCR, *PKPCR;                                                                         
                                                                                                 
          typedef struct _KQUEUE                 // 5 elements, 0x40 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     struct _LIST_ENTRY EntryListHead;  // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     ULONG32      CurrentCount;                                             
/*0x02C*/     ULONG32      MaximumCount;                                             
/*0x030*/     struct _LIST_ENTRY ThreadListHead; // 2 elements, 0x10 bytes (sizeof)  
          }KQUEUE, *PKQUEUE;                                                         
                                                                                     
          typedef struct _KSCB                      // 27 elements, 0x1A8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       GenerationCycles;                                             
/*0x008*/     UINT64       MinQuotaCycleTarget;                                          
/*0x010*/     UINT64       MaxQuotaCycleTarget;                                          
/*0x018*/     UINT64       RankCycleTarget;                                              
/*0x020*/     UINT64       LongTermCycles;                                               
/*0x028*/     UINT64       LastReportedCycles;                                           
/*0x030*/     UINT64       OverQuotaHistory;                                             
/*0x038*/     UINT64       ReadyTime;                                                    
/*0x040*/     UINT64       InsertTime;                                                   
/*0x048*/     struct _LIST_ENTRY PerProcessorList;  // 2 elements, 0x10 bytes (sizeof)   
/*0x058*/     struct _RTL_BALANCED_NODE QueueNode;  // 6 elements, 0x18 bytes (sizeof)   
              struct                                // 7 elements, 0x1 bytes (sizeof)    
              {                                                                          
/*0x070*/         UINT8        Inserted : 1;        // 0 BitPosition                     
/*0x070*/         UINT8        MaxOverQuota : 1;    // 1 BitPosition                     
/*0x070*/         UINT8        MinOverQuota : 1;    // 2 BitPosition                     
/*0x070*/         UINT8        RankBias : 1;        // 3 BitPosition                     
/*0x070*/         UINT8        SoftCap : 1;         // 4 BitPosition                     
/*0x070*/         UINT8        ShareRankOwner : 1;  // 5 BitPosition                     
/*0x070*/         UINT8        Spare1 : 2;          // 6 BitPosition                     
              };                                                                         
/*0x071*/     UINT8        Depth;                                                        
/*0x072*/     UINT16       ReadySummary;                                                 
/*0x074*/     ULONG32      Rank;                                                         
/*0x078*/     UINT64       ShareRank;               // ULONG32*                          
/*0x080*/     ULONG32      OwnerShareRank;                                               
/*0x084*/     UINT8        _PADDING0_[0x4];                                              
/*0x088*/     struct _LIST_ENTRY ReadyListHead[16];                                      
/*0x188*/     struct _RTL_RB_TREE ChildScbQueue;    // 3 elements, 0x10 bytes (sizeof)   
/*0x198*/     UINT64       Parent;                  // struct _KSCB*                     
/*0x1A0*/     UINT64       Root;                    // struct _KSCB*                     
          }KSCB, *PKSCB;                                                                 
                                                                                         
          typedef struct _KSCHEDULING_GROUP_POLICY // 9 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 3 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x000*/         ULONG32      Value;                                                
/*0x000*/         UINT16       Weight;                                               
                  struct                           // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT16       MinRate;                                          
/*0x002*/             UINT16       MaxRate;                                          
                  };                                                                 
              };                                                                     
              union                                // 2 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x004*/         ULONG32      AllFlags;                                             
                  struct                           // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x004*/             ULONG32      Type : 1;       // 0 BitPosition                  
/*0x004*/             ULONG32      Disabled : 1;   // 1 BitPosition                  
/*0x004*/             ULONG32      RankBias : 1;   // 2 BitPosition                  
/*0x004*/             ULONG32      Spare1 : 29;    // 3 BitPosition                  
                  };                                                                 
              };                                                                     
          }KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY;                                  
                                                                                     
          typedef struct _KSCHEDULING_GROUP               // 15 elements, 0x240 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _KSCHEDULING_GROUP_POLICY Policy;    // 9 elements, 0x8 bytes (sizeof)    
/*0x008*/     ULONG32      RelativeWeight;                                                     
/*0x00C*/     ULONG32      ChildMinRate;                                                       
/*0x010*/     ULONG32      ChildMinWeight;                                                     
/*0x014*/     ULONG32      ChildTotalWeight;                                                   
/*0x018*/     UINT64       QueryHistoryTimeStamp;                                              
/*0x020*/     INT64        NotificationCycles;                                                 
/*0x028*/     INT64        MaxQuotaLimitCycles;                                                
/*0x030*/     INT64        MaxQuotaCyclesRemaining;                                            
              union                                       // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                
/*0x038*/         struct _LIST_ENTRY SchedulingGroupList; // 2 elements, 0x10 bytes (sizeof)   
/*0x038*/         struct _LIST_ENTRY Sibling;             // 2 elements, 0x10 bytes (sizeof)   
              };                                                                               
/*0x048*/     UINT64       NotificationDpc;               // struct _KDPC*                     
/*0x050*/     struct _LIST_ENTRY ChildList;               // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     UINT64       Parent;                        // struct _KSCHEDULING_GROUP*        
/*0x068*/     UINT8        _PADDING0_[0x18];                                                   
/*0x080*/     struct _KSCB PerProcessor[1];                                                    
/*0x228*/     UINT8        _PADDING1_[0x18];                                                   
          }KSCHEDULING_GROUP, *PKSCHEDULING_GROUP;                                             
                                                                                               
          typedef struct _KSTACK_CONTROL             // 4 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       StackBase;                                                   
              union                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x008*/         UINT64       ActualLimit;                                             
/*0x008*/         UINT64       StackExpansion : 1;   // 0 BitPosition                   
              };                                                                        
/*0x010*/     struct _KERNEL_STACK_SEGMENT Previous; // 4 elements, 0x20 bytes (sizeof) 
          }KSTACK_CONTROL, *PKSTACK_CONTROL;                                            
                                                                                        
          typedef struct _KSYSTEM_TIME // 3 elements, 0xC bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      LowPart;                                      
/*0x004*/     LONG32       High1Time;                                    
/*0x008*/     LONG32       High2Time;                                    
          }KSYSTEM_TIME, *PKSYSTEM_TIME;                                  
                                                                         
          typedef struct _KTHREAD_COUNTERS           // 7 elements, 0x1A8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       WaitReasonBitMap;                                             
/*0x008*/     UINT64       UserData;                 // struct _THREAD_PERFORMANCE_DATA* 
/*0x010*/     ULONG32      Flags;                                                        
/*0x014*/     ULONG32      ContextSwitches;                                              
/*0x018*/     UINT64       CycleTimeBias;                                                
/*0x020*/     UINT64       HardwareCounters;                                             
/*0x028*/     struct _COUNTER_READING HwCounter[16];                                     
          }KTHREAD_COUNTERS, *PKTHREAD_COUNTERS;                                         
                                                                                         
          typedef struct _KTRAP_FRAME                   // 62 elements, 0x190 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       P1Home;                                                           
/*0x008*/     UINT64       P2Home;                                                           
/*0x010*/     UINT64       P3Home;                                                           
/*0x018*/     UINT64       P4Home;                                                           
/*0x020*/     UINT64       P5;                                                               
              union                                     // 2 elements, 0x1 bytes (sizeof)    
              {                                                                              
/*0x028*/         CHAR         PreviousMode;                                                 
/*0x028*/         UINT8        InterruptRetpolineState;                                      
              };                                                                             
/*0x029*/     UINT8        PreviousIrql;                                                     
              union                                     // 2 elements, 0x1 bytes (sizeof)    
              {                                                                              
/*0x02A*/         UINT8        FaultIndicator;                                               
/*0x02A*/         UINT8        NmiMsrIbrs;                                                   
              };                                                                             
/*0x02B*/     UINT8        ExceptionActive;                                                  
/*0x02C*/     ULONG32      MxCsr;                                                            
/*0x030*/     UINT64       Rax;                                                              
/*0x038*/     UINT64       Rcx;                                                              
/*0x040*/     UINT64       Rdx;                                                              
/*0x048*/     UINT64       R8;                                                               
/*0x050*/     UINT64       R9;                                                               
/*0x058*/     UINT64       R10;                                                              
/*0x060*/     UINT64       R11;                                                              
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x068*/         UINT64       GsBase;                                                       
/*0x068*/         UINT64       GsSwap;                                                       
              };                                                                             
/*0x070*/     struct _M128A Xmm0;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     struct _M128A Xmm1;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x090*/     struct _M128A Xmm2;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _M128A Xmm3;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _M128A Xmm4;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _M128A Xmm5;                       // 2 elements, 0x10 bytes (sizeof)   
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x0D0*/         UINT64       FaultAddress;                                                 
/*0x0D0*/         UINT64       ContextRecord;                                                
              };                                                                             
/*0x0D8*/     UINT64       Dr0;                                                              
/*0x0E0*/     UINT64       Dr1;                                                              
/*0x0E8*/     UINT64       Dr2;                                                              
/*0x0F0*/     UINT64       Dr3;                                                              
/*0x0F8*/     UINT64       Dr6;                                                              
/*0x100*/     UINT64       Dr7;                                                              
/*0x108*/     UINT64       DebugControl;                                                     
/*0x110*/     UINT64       LastBranchToRip;                                                  
/*0x118*/     UINT64       LastBranchFromRip;                                                
/*0x120*/     UINT64       LastExceptionToRip;                                               
/*0x128*/     UINT64       LastExceptionFromRip;                                             
/*0x130*/     UINT16       SegDs;                                                            
/*0x132*/     UINT16       SegEs;                                                            
/*0x134*/     UINT16       SegFs;                                                            
/*0x136*/     UINT16       SegGs;                                                            
/*0x138*/     UINT64       TrapFrame;                                                        
/*0x140*/     UINT64       Rbx;                                                              
/*0x148*/     UINT64       Rdi;                                                              
/*0x150*/     UINT64       Rsi;                                                              
/*0x158*/     UINT64       Rbp;                                                              
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x160*/         UINT64       ErrorCode;                                                    
/*0x160*/         UINT64       ExceptionFrame;                                               
              };                                                                             
/*0x168*/     UINT64       Rip;                                                              
/*0x170*/     UINT16       SegCs;                                                            
/*0x172*/     UINT8        Fill0;                                                            
/*0x173*/     UINT8        Logging;                                                          
/*0x174*/     UINT16       Fill1[2];                                                         
/*0x178*/     ULONG32      EFlags;                                                           
/*0x17C*/     ULONG32      Fill2;                                                            
/*0x180*/     UINT64       Rsp;                                                              
/*0x188*/     UINT16       SegSs;                                                            
/*0x18A*/     UINT16       Fill3;                                                            
/*0x18C*/     ULONG32      Fill4;                                                            
          }KTRAP_FRAME, *PKTRAP_FRAME;                                                       
                                                                                             
          typedef struct _KTSS64      // 8 elements, 0x68 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Reserved0;                                    
/*0x004*/     UINT64       Rsp0;                                         
/*0x00C*/     UINT64       Rsp1;                                         
/*0x014*/     UINT64       Rsp2;                                         
/*0x01C*/     UINT64       Ist[8];                                       
/*0x05C*/     UINT64       Reserved1;                                    
/*0x064*/     UINT16       Reserved2;                                    
/*0x066*/     UINT16       IoMapBase;                                    
          }KTSS64, *PKTSS64;                                             
                                                                         
          typedef struct _KUMS_CONTEXT_HEADER     // 16 elements, 0x70 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       P1Home;                                                    
/*0x008*/     UINT64       P2Home;                                                    
/*0x010*/     UINT64       P3Home;                                                    
/*0x018*/     UINT64       P4Home;                                                    
/*0x020*/     UINT64       StackTop;              // VOID*                            
/*0x028*/     UINT64       StackSize;                                                 
/*0x030*/     UINT64       RspOffset;                                                 
/*0x038*/     UINT64       Rip;                                                       
/*0x040*/     UINT64       FltSave;               // struct _XSAVE_FORMAT*            
              union                               // 2 elements, 0x8 bytes (sizeof)   
              {                                                                       
                  struct                          // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                   
/*0x048*/             UINT64       Volatile : 1;  // 0 BitPosition                    
/*0x048*/             UINT64       Reserved : 63; // 1 BitPosition                    
                  };                                                                  
/*0x048*/         UINT64       Flags;                                                 
              };                                                                      
/*0x050*/     UINT64       TrapFrame;             // struct _KTRAP_FRAME*             
/*0x058*/     UINT64       ExceptionFrame;        // struct _KEXCEPTION_FRAME*        
/*0x060*/     UINT64       SourceThread;          // struct _KTHREAD*                 
/*0x068*/     UINT64       Return;                                                    
          }KUMS_CONTEXT_HEADER, *PKUMS_CONTEXT_HEADER;                                    
                                                                                      
          typedef struct _XSTATE_FEATURE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Offset;                                         
/*0x004*/     ULONG32      Size;                                           
          }XSTATE_FEATURE, *PXSTATE_FEATURE;                                  
                                                                           
          typedef struct _XSTATE_CONFIGURATION                   // 12 elements, 0x338 bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT64       EnabledFeatures;                                                           
/*0x008*/     UINT64       EnabledVolatileFeatures;                                                   
/*0x010*/     ULONG32      Size;                                                                      
              union                                              // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                       
/*0x014*/         ULONG32      ControlFlags;                                                          
                  struct                                         // 2 elements, 0x4 bytes (sizeof)    
                  {                                                                                   
/*0x014*/             ULONG32      OptimizedSave : 1;            // 0 BitPosition                     
/*0x014*/             ULONG32      CompactionEnabled : 1;        // 1 BitPosition                     
                  };                                                                                  
              };                                                                                      
/*0x018*/     struct _XSTATE_FEATURE Features[64];                                                    
/*0x218*/     UINT64       EnabledSupervisorFeatures;                                                 
/*0x220*/     UINT64       AlignedFeatures;                                                           
/*0x228*/     ULONG32      AllFeatureSize;                                                            
/*0x22C*/     ULONG32      AllFeatures[64];                                                           
/*0x32C*/     UINT8        _PADDING0_[0x4];                                                           
/*0x330*/     UINT64       EnabledUserVisibleSupervisorFeatures;                                      
          }XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;                                              
                                                                                                      
          typedef struct _KUSER_SHARED_DATA                                // 98 elements, 0x710 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     ULONG32      TickCountLowDeprecated;                                                              
/*0x004*/     ULONG32      TickCountMultiplier;                                                                 
/*0x008*/     struct _KSYSTEM_TIME InterruptTime;                          // 3 elements, 0xC bytes (sizeof)    
/*0x014*/     struct _KSYSTEM_TIME SystemTime;                             // 3 elements, 0xC bytes (sizeof)    
/*0x020*/     struct _KSYSTEM_TIME TimeZoneBias;                           // 3 elements, 0xC bytes (sizeof)    
/*0x02C*/     UINT16       ImageNumberLow;                                                                      
/*0x02E*/     UINT16       ImageNumberHigh;                                                                     
/*0x030*/     WCHAR        NtSystemRoot[260];                                                                   
/*0x238*/     ULONG32      MaxStackTraceDepth;                                                                  
/*0x23C*/     ULONG32      CryptoExponent;                                                                      
/*0x240*/     ULONG32      TimeZoneId;                                                                          
/*0x244*/     ULONG32      LargePageMinimum;                                                                    
/*0x248*/     ULONG32      AitSamplingValue;                                                                    
/*0x24C*/     ULONG32      AppCompatFlag;                                                                       
/*0x250*/     UINT64       RNGSeedVersion;                                                                      
/*0x258*/     ULONG32      GlobalValidationRunlevel;                                                            
/*0x25C*/     LONG32       TimeZoneBiasStamp;                                                                   
/*0x260*/     ULONG32      NtBuildNumber;                                                                       
/*0x264*/     enum _NT_PRODUCT_TYPE NtProductType;                                                              
/*0x268*/     UINT8        ProductTypeIsValid;                                                                  
/*0x269*/     UINT8        Reserved0[1];                                                                        
/*0x26A*/     UINT16       NativeProcessorArchitecture;                                                         
/*0x26C*/     ULONG32      NtMajorVersion;                                                                      
/*0x270*/     ULONG32      NtMinorVersion;                                                                      
/*0x274*/     UINT8        ProcessorFeatures[64];                                                               
/*0x2B4*/     ULONG32      Reserved1;                                                                           
/*0x2B8*/     ULONG32      Reserved3;                                                                           
/*0x2BC*/     ULONG32      TimeSlip;                                                                            
/*0x2C0*/     enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;                                      
/*0x2C4*/     ULONG32      BootId;                                                                              
/*0x2C8*/     union _LARGE_INTEGER SystemExpirationDate;                   // 4 elements, 0x8 bytes (sizeof)    
/*0x2D0*/     ULONG32      SuiteMask;                                                                           
/*0x2D4*/     UINT8        KdDebuggerEnabled;                                                                   
              union                                                        // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                 
/*0x2D5*/         UINT8        MitigationPolicies;                                                              
                  struct                                                   // 4 elements, 0x1 bytes (sizeof)    
                  {                                                                                             
/*0x2D5*/             UINT8        NXSupportPolicy : 2;                    // 0 BitPosition                     
/*0x2D5*/             UINT8        SEHValidationPolicy : 2;                // 2 BitPosition                     
/*0x2D5*/             UINT8        CurDirDevicesSkippedForDlls : 2;        // 4 BitPosition                     
/*0x2D5*/             UINT8        Reserved : 2;                           // 6 BitPosition                     
                  };                                                                                            
              };                                                                                                
/*0x2D6*/     UINT8        Reserved6[2];                                                                        
/*0x2D8*/     ULONG32      ActiveConsoleId;                                                                     
/*0x2DC*/     ULONG32      DismountCount;                                                                       
/*0x2E0*/     ULONG32      ComPlusPackage;                                                                      
/*0x2E4*/     ULONG32      LastSystemRITEventTickCount;                                                         
/*0x2E8*/     ULONG32      NumberOfPhysicalPages;                                                               
/*0x2EC*/     UINT8        SafeBootMode;                                                                        
/*0x2ED*/     UINT8        VirtualizationFlags;                                                                 
/*0x2EE*/     UINT8        Reserved12[2];                                                                       
              union                                                        // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                 
/*0x2F0*/         ULONG32      SharedDataFlags;                                                                 
                  struct                                                   // 12 elements, 0x4 bytes (sizeof)   
                  {                                                                                             
/*0x2F0*/             ULONG32      DbgErrorPortPresent : 1;                // 0 BitPosition                     
/*0x2F0*/             ULONG32      DbgElevationEnabled : 1;                // 1 BitPosition                     
/*0x2F0*/             ULONG32      DbgVirtEnabled : 1;                     // 2 BitPosition                     
/*0x2F0*/             ULONG32      DbgInstallerDetectEnabled : 1;          // 3 BitPosition                     
/*0x2F0*/             ULONG32      DbgLkgEnabled : 1;                      // 4 BitPosition                     
/*0x2F0*/             ULONG32      DbgDynProcessorEnabled : 1;             // 5 BitPosition                     
/*0x2F0*/             ULONG32      DbgConsoleBrokerEnabled : 1;            // 6 BitPosition                     
/*0x2F0*/             ULONG32      DbgSecureBootEnabled : 1;               // 7 BitPosition                     
/*0x2F0*/             ULONG32      DbgMultiSessionSku : 1;                 // 8 BitPosition                     
/*0x2F0*/             ULONG32      DbgMultiUsersInSessionSku : 1;          // 9 BitPosition                     
/*0x2F0*/             ULONG32      DbgStateSeparationEnabled : 1;          // 10 BitPosition                    
/*0x2F0*/             ULONG32      SpareBits : 21;                         // 11 BitPosition                    
                  };                                                                                            
              };                                                                                                
/*0x2F4*/     ULONG32      DataFlagsPad[1];                                                                     
/*0x2F8*/     UINT64       TestRetInstruction;                                                                  
/*0x300*/     INT64        QpcFrequency;                                                                        
/*0x308*/     ULONG32      SystemCall;                                                                          
/*0x30C*/     ULONG32      SystemCallPad0;                                                                      
/*0x310*/     UINT64       SystemCallPad[2];                                                                    
              union                                                        // 3 elements, 0xC bytes (sizeof)    
              {                                                                                                 
/*0x320*/         struct _KSYSTEM_TIME TickCount;                          // 3 elements, 0xC bytes (sizeof)    
/*0x320*/         UINT64       TickCountQuad;                                                                   
/*0x320*/         ULONG32      ReservedTickCountOverlay[3];                                                     
              };                                                                                                
/*0x32C*/     ULONG32      TickCountPad[1];                                                                     
/*0x330*/     ULONG32      Cookie;                                                                              
/*0x334*/     ULONG32      CookiePad[1];                                                                        
/*0x338*/     INT64        ConsoleSessionForegroundProcessId;                                                   
/*0x340*/     UINT64       TimeUpdateLock;                                                                      
/*0x348*/     UINT64       BaselineSystemTimeQpc;                                                               
/*0x350*/     UINT64       BaselineInterruptTimeQpc;                                                            
/*0x358*/     UINT64       QpcSystemTimeIncrement;                                                              
/*0x360*/     UINT64       QpcInterruptTimeIncrement;                                                           
/*0x368*/     UINT8        QpcSystemTimeIncrementShift;                                                         
/*0x369*/     UINT8        QpcInterruptTimeIncrementShift;                                                      
/*0x36A*/     UINT16       UnparkedProcessorCount;                                                              
/*0x36C*/     ULONG32      EnclaveFeatureMask[4];                                                               
/*0x37C*/     ULONG32      TelemetryCoverageRound;                                                              
/*0x380*/     UINT16       UserModeGlobalLogger[16];                                                            
/*0x3A0*/     ULONG32      ImageFileExecutionOptions;                                                           
/*0x3A4*/     ULONG32      LangGenerationCount;                                                                 
/*0x3A8*/     UINT64       Reserved4;                                                                           
/*0x3B0*/     UINT64       InterruptTimeBias;                                                                   
/*0x3B8*/     UINT64       QpcBias;                                                                             
/*0x3C0*/     ULONG32      ActiveProcessorCount;                                                                
/*0x3C4*/     UINT8        ActiveGroupCount;                                                                    
/*0x3C5*/     UINT8        Reserved9;                                                                           
              union                                                        // 2 elements, 0x2 bytes (sizeof)    
              {                                                                                                 
/*0x3C6*/         UINT16       QpcData;                                                                         
                  struct                                                   // 2 elements, 0x2 bytes (sizeof)    
                  {                                                                                             
/*0x3C6*/             UINT8        QpcBypassEnabled;                                                            
/*0x3C7*/             UINT8        QpcShift;                                                                    
                  };                                                                                            
              };                                                                                                
/*0x3C8*/     union _LARGE_INTEGER TimeZoneBiasEffectiveStart;             // 4 elements, 0x8 bytes (sizeof)    
/*0x3D0*/     union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;               // 4 elements, 0x8 bytes (sizeof)    
/*0x3D8*/     struct _XSTATE_CONFIGURATION XState;                         // 12 elements, 0x338 bytes (sizeof) 
          }KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;                                                              
                                                                                                                
          typedef struct _LDR_DATA_TABLE_ENTRY                  // 59 elements, 0x120 bytes (sizeof) 
          {                                                                                          
/*0x000*/     struct _LIST_ENTRY InLoadOrderLinks;              // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _LIST_ENTRY InMemoryOrderLinks;            // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY InInitializationOrderLinks;    // 2 elements, 0x10 bytes (sizeof)   
/*0x030*/     UINT64       DllBase;                             // VOID*                             
/*0x038*/     UINT64       EntryPoint;                          // VOID*                             
/*0x040*/     ULONG32      SizeOfImage;                                                              
/*0x044*/     UINT8        _PADDING0_[0x4];                                                          
/*0x048*/     struct _UNICODE_STRING FullDllName;               // 3 elements, 0x10 bytes (sizeof)   
/*0x058*/     struct _UNICODE_STRING BaseDllName;               // 3 elements, 0x10 bytes (sizeof)   
              union                                             // 3 elements, 0x4 bytes (sizeof)    
              {                                                                                      
/*0x068*/         UINT8        FlagGroup[4];                                                         
/*0x068*/         ULONG32      Flags;                                                                
                  struct                                        // 28 elements, 0x4 bytes (sizeof)   
                  {                                                                                  
/*0x068*/             ULONG32      PackagedBinary : 1;          // 0 BitPosition                     
/*0x068*/             ULONG32      MarkedForRemoval : 1;        // 1 BitPosition                     
/*0x068*/             ULONG32      ImageDll : 1;                // 2 BitPosition                     
/*0x068*/             ULONG32      LoadNotificationsSent : 1;   // 3 BitPosition                     
/*0x068*/             ULONG32      TelemetryEntryProcessed : 1; // 4 BitPosition                     
/*0x068*/             ULONG32      ProcessStaticImport : 1;     // 5 BitPosition                     
/*0x068*/             ULONG32      InLegacyLists : 1;           // 6 BitPosition                     
/*0x068*/             ULONG32      InIndexes : 1;               // 7 BitPosition                     
/*0x068*/             ULONG32      ShimDll : 1;                 // 8 BitPosition                     
/*0x068*/             ULONG32      InExceptionTable : 1;        // 9 BitPosition                     
/*0x068*/             ULONG32      ReservedFlags1 : 2;          // 10 BitPosition                    
/*0x068*/             ULONG32      LoadInProgress : 1;          // 12 BitPosition                    
/*0x068*/             ULONG32      LoadConfigProcessed : 1;     // 13 BitPosition                    
/*0x068*/             ULONG32      EntryProcessed : 1;          // 14 BitPosition                    
/*0x068*/             ULONG32      ProtectDelayLoad : 1;        // 15 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags3 : 2;          // 16 BitPosition                    
/*0x068*/             ULONG32      DontCallForThreads : 1;      // 18 BitPosition                    
/*0x068*/             ULONG32      ProcessAttachCalled : 1;     // 19 BitPosition                    
/*0x068*/             ULONG32      ProcessAttachFailed : 1;     // 20 BitPosition                    
/*0x068*/             ULONG32      CorDeferredValidate : 1;     // 21 BitPosition                    
/*0x068*/             ULONG32      CorImage : 1;                // 22 BitPosition                    
/*0x068*/             ULONG32      DontRelocate : 1;            // 23 BitPosition                    
/*0x068*/             ULONG32      CorILOnly : 1;               // 24 BitPosition                    
/*0x068*/             ULONG32      ChpeImage : 1;               // 25 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags5 : 2;          // 26 BitPosition                    
/*0x068*/             ULONG32      Redirected : 1;              // 28 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags6 : 2;          // 29 BitPosition                    
/*0x068*/             ULONG32      CompatDatabaseProcessed : 1; // 31 BitPosition                    
                  };                                                                                 
              };                                                                                     
/*0x06C*/     UINT16       ObsoleteLoadCount;                                                        
/*0x06E*/     UINT16       TlsIndex;                                                                 
/*0x070*/     struct _LIST_ENTRY HashLinks;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     ULONG32      TimeDateStamp;                                                            
/*0x084*/     UINT8        _PADDING1_[0x4];                                                          
/*0x088*/     UINT64       EntryPointActivationContext;         // struct _ACTIVATION_CONTEXT*       
/*0x090*/     UINT64       Lock;                                // VOID*                             
/*0x098*/     UINT64       DdagNode;                            // struct _LDR_DDAG_NODE*            
/*0x0A0*/     struct _LIST_ENTRY NodeModuleLink;                // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     UINT64       LoadContext;                         // struct _LDRP_LOAD_CONTEXT*        
/*0x0B8*/     UINT64       ParentDllBase;                       // VOID*                             
/*0x0C0*/     UINT64       SwitchBackContext;                   // VOID*                             
/*0x0C8*/     struct _RTL_BALANCED_NODE BaseAddressIndexNode;   // 6 elements, 0x18 bytes (sizeof)   
/*0x0E0*/     struct _RTL_BALANCED_NODE MappingInfoIndexNode;   // 6 elements, 0x18 bytes (sizeof)   
/*0x0F8*/     UINT64       OriginalBase;                                                             
/*0x100*/     union _LARGE_INTEGER LoadTime;                    // 4 elements, 0x8 bytes (sizeof)    
/*0x108*/     ULONG32      BaseNameHashValue;                                                        
/*0x10C*/     enum _LDR_DLL_LOAD_REASON LoadReason;                                                  
/*0x110*/     ULONG32      ImplicitPathOptions;                                                      
/*0x114*/     ULONG32      ReferenceCount;                                                           
/*0x118*/     ULONG32      DependentLoadFlags;                                                       
/*0x11C*/     UINT8        SigningLevel;                                                             
/*0x11D*/     UINT8        _PADDING2_[0x3];                                                          
          }LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;                                             
                                                                                                     
          typedef struct _LDRP_CSLIST // 1 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     UINT64       Tail;      // struct _SINGLE_LIST_ENTRY*     
          }LDRP_CSLIST, *PLDRP_CSLIST;                                  
                                                                        
          typedef struct _LDR_DDAG_NODE                 // 10 elements, 0x50 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY Modules;               // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     UINT64       ServiceTagList;              // struct _LDR_SERVICE_TAG_RECORD*  
/*0x018*/     ULONG32      LoadCount;                                                       
/*0x01C*/     ULONG32      LoadWhileUnloadingCount;                                         
/*0x020*/     ULONG32      LowestLink;                                                      
/*0x024*/     UINT8        _PADDING0_[0x4];                                                 
/*0x028*/     struct _LDRP_CSLIST Dependencies;         // 1 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _LDRP_CSLIST IncomingDependencies; // 1 elements, 0x8 bytes (sizeof)   
/*0x038*/     enum _LDR_DDAG_STATE State;                                                   
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                 
/*0x040*/     struct _SINGLE_LIST_ENTRY CondenseLink;   // 1 elements, 0x8 bytes (sizeof)   
/*0x048*/     ULONG32      PreorderNumber;                                                  
/*0x04C*/     UINT8        _PADDING2_[0x4];                                                 
          }LDR_DDAG_NODE, *PLDR_DDAG_NODE;                                                  
                                                                                            
          typedef struct _LDR_SERVICE_TAG_RECORD // 2 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Next;                 // struct _LDR_SERVICE_TAG_RECORD* 
/*0x008*/     ULONG32      ServiceTag;                                              
/*0x00C*/     UINT8        _PADDING0_[0x4];                                         
          }LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD;                                   
                                                                                    
typedef struct _LDRP_LOAD_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}LDRP_LOAD_CONTEXT, *PLDRP_LOAD_CONTEXT;                                  
                                                                    
          typedef struct _LEAP_SECOND_DATA  // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT8        Enabled;                                            
/*0x001*/     UINT8        _PADDING0_[0x3];                                    
/*0x004*/     ULONG32      Count;                                              
/*0x008*/     union _LARGE_INTEGER Data[1];                                    
          }LEAP_SECOND_DATA, *PLEAP_SECOND_DATA;                                   
                                                                               
          typedef struct _LFH_BLOCK_ZONE    // 2 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _LIST_ENTRY ListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     LONG32       NextIndex;                                          
/*0x014*/     UINT8        _PADDING0_[0x4];                                    
          }LFH_BLOCK_ZONE, *PLFH_BLOCK_ZONE;                                   
                                                                               
          typedef struct _RTL_SRWLOCK                  // 7 elements, 0x8 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x8 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x8 bytes (sizeof) 
                  {                                                                      
/*0x000*/             UINT64       Locked : 1;         // 0 BitPosition                  
/*0x000*/             UINT64       Waiting : 1;        // 1 BitPosition                  
/*0x000*/             UINT64       Waking : 1;         // 2 BitPosition                  
/*0x000*/             UINT64       MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             UINT64       Shared : 60;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         UINT64       Value;                                                    
/*0x000*/         UINT64       Ptr;                    // VOID*                          
              };                                                                         
          }RTL_SRWLOCK, *PRTL_SRWLOCK;                                                   
                                                                                         
          typedef struct _USER_MEMORY_CACHE_ENTRY // 7 elements, 0x30 bytes (sizeof) 
          {                                                                          
/*0x000*/     union _SLIST_HEADER UserBlocks;     // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      AvailableBlocks;                                          
/*0x014*/     ULONG32      MinimumDepth;                                             
/*0x018*/     ULONG32      CacheShiftThreshold;                                      
/*0x01C*/     UINT16       Allocations;                                              
/*0x01E*/     UINT16       Frees;                                                    
/*0x020*/     UINT16       CacheHits;                                                
/*0x022*/     UINT8        _PADDING0_[0xE];                                          
          }USER_MEMORY_CACHE_ENTRY, *PUSER_MEMORY_CACHE_ENTRY;                                   
                                                                                     
          typedef struct _LFH_HEAP                                // 19 elements, 0xCF0 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _RTL_SRWLOCK Lock;                           // 7 elements, 0x8 bytes (sizeof)    
/*0x008*/     struct _LIST_ENTRY SubSegmentZones;                 // 2 elements, 0x10 bytes (sizeof)   
/*0x018*/     UINT64       Heap;                                  // VOID*                             
/*0x020*/     UINT64       NextSegmentInfoArrayAddress;           // VOID*                             
/*0x028*/     UINT64       FirstUncommittedAddress;               // VOID*                             
/*0x030*/     UINT64       ReservedAddressLimit;                  // VOID*                             
/*0x038*/     ULONG32      SegmentCreate;                                                              
/*0x03C*/     ULONG32      SegmentDelete;                                                              
/*0x040*/     ULONG32      MinimumCacheDepth;                                                          
/*0x044*/     ULONG32      CacheShiftThreshold;                                                        
/*0x048*/     UINT64       SizeInCache;                                                                
/*0x050*/     union _HEAP_BUCKET_RUN_INFO RunInfo;                // 3 elements, 0x8 bytes (sizeof)    
/*0x058*/     UINT8        _PADDING0_[0x8];                                                            
/*0x060*/     struct _USER_MEMORY_CACHE_ENTRY UserBlockCache[12];                                      
/*0x2A0*/     struct _HEAP_LFH_MEM_POLICIES MemoryPolicies;       // 4 elements, 0x4 bytes (sizeof)    
/*0x2A4*/     struct _HEAP_BUCKET Buckets[129];                                                        
/*0x4A8*/     UINT64       SegmentInfoArrays[129];                // struct _HEAP_LOCAL_SEGMENT_INFO*  
/*0x8B0*/     UINT64       AffinitizedInfoArrays[129];            // struct _HEAP_LOCAL_SEGMENT_INFO*  
/*0xCB8*/     UINT64       SegmentAllocator;                      // struct _SEGMENT_HEAP*             
/*0xCC0*/     struct _HEAP_LOCAL_DATA LocalData[1];                                                    
          }LFH_HEAP, *PLFH_HEAP;                                                                       
                                                                                                       
          typedef union _LFH_RANDOM_DATA  // 3 elements, 0x100 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT8        Bytes[256];                                        
/*0x000*/     UINT16       Words[128];                                        
/*0x000*/     UINT64       Quadwords[32];                                     
          }LFH_RANDOM_DATA, *PLFH_RANDOM_DATA;                                    
                                                                              
          typedef struct _LOOKASIDE_LIST_EX     // 1 elements, 0x60 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _GENERAL_LOOKASIDE_POOL L; // 22 elements, 0x60 bytes (sizeof) 
          }LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX;                                    
                                                                                    
          typedef struct _MAILSLOT_CREATE_PARAMETERS // 4 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      MailslotQuota;                                               
/*0x004*/     ULONG32      MaximumMessageSize;                                          
/*0x008*/     union _LARGE_INTEGER ReadTimeout;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT8        TimeoutSpecified;                                            
/*0x011*/     UINT8        _PADDING0_[0x7];                                             
          }MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS;                                   
                                                                                        
          typedef union _MCI_STATS                        // 2 elements, 0x8 bytes (sizeof)  
          {                                                                                  
              struct                                      // 10 elements, 0x8 bytes (sizeof) 
              {                                                                              
/*0x000*/         UINT16       McaErrorCode;                                                 
/*0x002*/         UINT16       ModelErrorCode;                                               
                  struct                                  // 8 elements, 0x4 bytes (sizeof)  
                  {                                                                          
/*0x004*/             ULONG32      OtherInformation : 25; // 0 BitPosition                   
/*0x004*/             ULONG32      ContextCorrupt : 1;    // 25 BitPosition                  
/*0x004*/             ULONG32      AddressValid : 1;      // 26 BitPosition                  
/*0x004*/             ULONG32      MiscValid : 1;         // 27 BitPosition                  
/*0x004*/             ULONG32      ErrorEnabled : 1;      // 28 BitPosition                  
/*0x004*/             ULONG32      UncorrectedError : 1;  // 29 BitPosition                  
/*0x004*/             ULONG32      StatusOverFlow : 1;    // 30 BitPosition                  
/*0x004*/             ULONG32      Valid : 1;             // 31 BitPosition                  
                  };                                                                         
              }MciStatus;                                                                    
/*0x000*/     UINT64       QuadPart;                                                         
          }MCI_STATS, *PMCI_STATS;                                                           
                                                                                             
          typedef union _MCI_ADDR        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      Address;                                    
/*0x004*/         ULONG32      Reserved;                                   
              };                                                           
/*0x000*/     UINT64       QuadPart;                                       
          }MCI_ADDR, *PMCI_ADDR;                                           
                                                                           
          typedef struct _MCA_EXCEPTION               // 9 elements, 0x100 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      VersionNumber;                                                 
/*0x004*/     enum _MCA_EXCEPTION_TYPE ExceptionType;                                     
/*0x008*/     union _LARGE_INTEGER TimeStamp;         // 4 elements, 0x8 bytes (sizeof)   
/*0x010*/     ULONG32      ProcessorNumber;                                               
/*0x014*/     ULONG32      Reserved1;                                                     
              union                                   // 2 elements, 0x20 bytes (sizeof)  
              {                                                                           
                  struct                              // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT8        BankNumber;                                            
/*0x019*/             UINT8        Reserved2[7];                                          
/*0x020*/             union _MCI_STATS Status;        // 2 elements, 0x8 bytes (sizeof)   
/*0x028*/             union _MCI_ADDR Address;        // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/             UINT64       Misc;                                                  
                  }Mca;                                                                   
                  struct                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT64       Address;                                               
/*0x020*/             UINT64       Type;                                                  
                  }Mce;                                                                   
              }u;                                                                         
/*0x038*/     ULONG32      ExtCnt;                                                        
/*0x03C*/     ULONG32      Reserved3;                                                     
/*0x040*/     UINT64       ExtReg[24];                                                    
          }MCA_EXCEPTION, *PMCA_EXCEPTION;                                                
                                                                                          
          typedef struct _MCUPDATE_INFO      // 4 elements, 0x30 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _LIST_ENTRY List;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Status;                                              
/*0x014*/     UINT8        _PADDING0_[0x4];                                     
/*0x018*/     UINT64       Id;                                                  
/*0x020*/     UINT64       VendorScratch[2];                                    
          }MCUPDATE_INFO, *PMCUPDATE_INFO;                                      
                                                                                
          typedef struct _MDL                         // 10 elements, 0x30 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       Next;                      // struct _MDL*                     
/*0x008*/     INT16        Size;                                                          
/*0x00A*/     INT16        MdlFlags;                                                      
/*0x00C*/     UINT16       AllocationProcessorNumber;                                     
/*0x00E*/     UINT16       Reserved;                                                      
/*0x010*/     UINT64       Process;                   // struct _EPROCESS*                
/*0x018*/     UINT64       MappedSystemVa;            // VOID*                            
/*0x020*/     UINT64       StartVa;                   // VOID*                            
/*0x028*/     ULONG32      ByteCount;                                                     
/*0x02C*/     ULONG32      ByteOffset;                                                    
          }MDL, *PMDL;                                                                    
                                                                                          
          typedef struct _MM_DRIVER_VERIFIER_DATA              // 35 elements, 0xA8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Level;                                                                  
/*0x004*/     ULONG32      RaiseIrqls;                                                             
/*0x008*/     ULONG32      AcquireSpinLocks;                                                       
/*0x00C*/     ULONG32      SynchronizeExecutions;                                                  
/*0x010*/     ULONG32      AllocationsAttempted;                                                   
/*0x014*/     ULONG32      AllocationsSucceeded;                                                   
/*0x018*/     ULONG32      AllocationsSucceededSpecialPool;                                        
/*0x01C*/     ULONG32      AllocationsWithNoTag;                                                   
/*0x020*/     ULONG32      TrimRequests;                                                           
/*0x024*/     ULONG32      Trims;                                                                  
/*0x028*/     ULONG32      AllocationsFailed;                                                      
/*0x02C*/     ULONG32      AllocationsFailedDeliberately;                                          
/*0x030*/     ULONG32      Loads;                                                                  
/*0x034*/     ULONG32      Unloads;                                                                
/*0x038*/     ULONG32      UnTrackedPool;                                                          
/*0x03C*/     ULONG32      UserTrims;                                                              
/*0x040*/     ULONG32      CurrentPagedPoolAllocations;                                            
/*0x044*/     ULONG32      CurrentNonPagedPoolAllocations;                                         
/*0x048*/     ULONG32      PeakPagedPoolAllocations;                                               
/*0x04C*/     ULONG32      PeakNonPagedPoolAllocations;                                            
/*0x050*/     UINT64       PagedBytes;                                                             
/*0x058*/     UINT64       NonPagedBytes;                                                          
/*0x060*/     UINT64       PeakPagedBytes;                                                         
/*0x068*/     UINT64       PeakNonPagedBytes;                                                      
/*0x070*/     ULONG32      BurstAllocationsFailedDeliberately;                                     
/*0x074*/     ULONG32      SessionTrims;                                                           
/*0x078*/     ULONG32      OptionChanges;                                                          
/*0x07C*/     ULONG32      VerifyMode;                                                             
/*0x080*/     struct _UNICODE_STRING PreviousBucketName;       // 3 elements, 0x10 bytes (sizeof)  
/*0x090*/     ULONG32      ExecutePoolTypes;                                                       
/*0x094*/     ULONG32      ExecutePageProtections;                                                 
/*0x098*/     ULONG32      ExecutePageMappings;                                                    
/*0x09C*/     ULONG32      ExecuteWriteSections;                                                   
/*0x0A0*/     ULONG32      SectionAlignmentFailures;                                               
/*0x0A4*/     ULONG32      IATInExecutableSection;                                                 
          }MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA;                                     
                                                                                                   
          typedef union _MM_PAGE_ACCESS_INFO_FLAGS   // 2 elements, 0x4 bytes (sizeof) 
          {                                                                            
              struct                                 // 4 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Image : 1;            // 10 BitPosition                 
/*0x000*/         ULONG32      Spare0 : 1;           // 11 BitPosition                 
              }File;                                                                   
              struct                                 // 3 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Spare1 : 2;           // 10 BitPosition                 
              }Private;                                                                
          }MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS;                                  
                                                                                       
          typedef struct _MM_PAGE_ACCESS_INFO             // 4 elements, 0x8 bytes (sizeof) 
          {                                                                                 
              union                                       // 4 elements, 0x8 bytes (sizeof) 
              {                                                                             
/*0x000*/         union _MM_PAGE_ACCESS_INFO_FLAGS Flags; // 2 elements, 0x4 bytes (sizeof) 
/*0x000*/         UINT64       FileOffset;                                                  
/*0x000*/         UINT64       VirtualAddress;            // VOID*                          
/*0x000*/         UINT64       PointerProtoPte;           // VOID*                          
              };                                                                            
          }MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO;                                      
                                                                                            
          typedef struct _MM_PAGE_ACCESS_INFO_HEADER   // 14 elements, 0x48 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _SINGLE_LIST_ENTRY Link;          // 1 elements, 0x8 bytes (sizeof)   
/*0x008*/     enum _MM_PAGE_ACCESS_TYPE Type;                                              
              union                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                            
/*0x00C*/         ULONG32      EmptySequenceNumber;                                        
/*0x00C*/         ULONG32      CurrentFileIndex;                                           
              };                                                                           
/*0x010*/     UINT64       CreateTime;                                                     
              union                                    // 2 elements, 0x8 bytes (sizeof)   
              {                                                                            
/*0x018*/         UINT64       EmptyTime;                                                  
/*0x018*/         UINT64       TempEntry;              // struct _MM_PAGE_ACCESS_INFO*     
              };                                                                           
              union                                    // 2 elements, 0x24 bytes (sizeof)  
              {                                                                            
                  struct                               // 5 elements, 0x24 bytes (sizeof)  
                  {                                                                        
/*0x020*/             UINT64       PageEntry;          // struct _MM_PAGE_ACCESS_INFO*     
/*0x028*/             UINT64       FileEntry;          // UINT64*                          
/*0x030*/             UINT64       FirstFileEntry;     // UINT64*                          
/*0x038*/             UINT64       Process;            // struct _EPROCESS*                
/*0x040*/             ULONG32      SessionId;                                              
                  };                                                                       
                  struct                               // 2 elements, 0x24 bytes (sizeof)  
                  {                                                                        
/*0x020*/             UINT64       PageFrameEntry;     // UINT64*                          
/*0x028*/             UINT64       LastPageFrameEntry; // UINT64*                          
/*0x030*/             UINT8        _PADDING0_[0x14];                                       
                  };                                                                       
              };                                                                           
          }MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER;                                    
                                                                                           
typedef struct _MM_SESSION_SPACE // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}MM_SESSION_SPACE, *PMM_SESSION_SPACE;                                  
                                                                   
typedef struct _MMWSL_INSTANCE // 0 elements, 0x0 bytes (sizeof) 
{                                                                
}MMWSL_INSTANCE, *PMMWSL_INSTANCE;                                  
                                                                 
          typedef struct _NAMED_PIPE_CREATE_PARAMETERS // 8 elements, 0x28 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      NamedPipeType;                                                 
/*0x004*/     ULONG32      ReadMode;                                                      
/*0x008*/     ULONG32      CompletionMode;                                                
/*0x00C*/     ULONG32      MaximumInstances;                                              
/*0x010*/     ULONG32      InboundQuota;                                                  
/*0x014*/     ULONG32      OutboundQuota;                                                 
/*0x018*/     union _LARGE_INTEGER DefaultTimeout;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     UINT8        TimeoutSpecified;                                              
/*0x021*/     UINT8        _PADDING0_[0x7];                                               
          }NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS;                                   
                                                                                          
          typedef struct _NPAGED_LOOKASIDE_LIST // 1 elements, 0x80 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _GENERAL_LOOKASIDE L;      // 22 elements, 0x80 bytes (sizeof) 
          }NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;                                    
                                                                                    
          typedef struct _NT_TIB32               // 8 elements, 0x1C bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      ExceptionList;                                           
/*0x004*/     ULONG32      StackBase;                                               
/*0x008*/     ULONG32      StackLimit;                                              
/*0x00C*/     ULONG32      SubSystemTib;                                            
              union                              // 2 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x010*/         ULONG32      FiberData;                                           
/*0x010*/         ULONG32      Version;                                             
              };                                                                    
/*0x014*/     ULONG32      ArbitraryUserPointer;                                    
/*0x018*/     ULONG32      Self;                                                    
          }NT_TIB32, *PNT_TIB32;                                                    
                                                                                    
          typedef struct _NT_TIB64               // 8 elements, 0x38 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       ExceptionList;                                           
/*0x008*/     UINT64       StackBase;                                               
/*0x010*/     UINT64       StackLimit;                                              
/*0x018*/     UINT64       SubSystemTib;                                            
              union                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                     
/*0x020*/         UINT64       FiberData;                                           
/*0x020*/         ULONG32      Version;                                             
              };                                                                    
/*0x028*/     UINT64       ArbitraryUserPointer;                                    
/*0x030*/     UINT64       Self;                                                    
          }NT_TIB64, *PNT_TIB64;                                                    
                                                                                    
          typedef struct _OB_EXTENDED_PARSE_PARAMETERS // 3 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT16       Length;                                                        
/*0x002*/     UINT8        _PADDING0_[0x2];                                               
/*0x004*/     ULONG32      RestrictedAccessMask;                                          
/*0x008*/     UINT64       Silo;                       // struct _EJOB*                   
          }OB_EXTENDED_PARSE_PARAMETERS, *POB_EXTENDED_PARSE_PARAMETERS;                                   
                                                                                          
          typedef struct _OBJECT_DIRECTORY  // 8 elements, 0x158 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       HashBuckets[37]; // struct _OBJECT_DIRECTORY_ENTRY*  
/*0x128*/     struct _EX_PUSH_LOCK Lock;    // 7 elements, 0x8 bytes (sizeof)   
/*0x130*/     UINT64       DeviceMap;       // struct _DEVICE_MAP*              
/*0x138*/     UINT64       ShadowDirectory; // struct _OBJECT_DIRECTORY*        
/*0x140*/     UINT64       NamespaceEntry;  // VOID*                            
/*0x148*/     UINT64       SessionObject;   // VOID*                            
/*0x150*/     ULONG32      Flags;                                               
/*0x154*/     ULONG32      SessionId;                                           
          }OBJECT_DIRECTORY, *POBJECT_DIRECTORY;                                    
                                                                                
          typedef struct _OBJECT_DIRECTORY_ENTRY // 3 elements, 0x18 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       ChainLink;            // struct _OBJECT_DIRECTORY_ENTRY* 
/*0x008*/     UINT64       Object;               // VOID*                           
/*0x010*/     ULONG32      HashValue;                                               
/*0x014*/     UINT8        _PADDING0_[0x4];                                         
          }OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY;                                   
                                                                                    
          typedef struct _OBJECT_DUMP_CONTROL // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT64       Stream;            // VOID*                           
/*0x008*/     ULONG32      Detail;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                      
          }OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL;                                   
                                                                                 
          typedef struct _OBJECT_HANDLE_INFORMATION // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      HandleAttributes;                                          
/*0x004*/     ULONG32      GrantedAccess;                                             
          }OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;                                  
                                                                                      
          typedef struct _OBJECT_NAME_INFORMATION // 1 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _UNICODE_STRING Name;        // 3 elements, 0x10 bytes (sizeof) 
          }OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;                                   
                                                                                     
          typedef struct _OBJECT_TYPE_INITIALIZER                   // 32 elements, 0x78 bytes (sizeof)                                                                           
          {                                                                                                                                                                       
/*0x000*/     UINT16       Length;                                                                                                                                                
              union                                                 // 2 elements, 0x2 bytes (sizeof)                                                                             
              {                                                                                                                                                                   
/*0x002*/         UINT16       ObjectTypeFlags;                                                                                                                                   
                  struct                                            // 2 elements, 0x2 bytes (sizeof)                                                                             
                  {                                                                                                                                                               
                      struct                                        // 8 elements, 0x1 bytes (sizeof)                                                                             
                      {                                                                                                                                                           
/*0x002*/                 UINT8        CaseInsensitive : 1;         // 0 BitPosition                                                                                              
/*0x002*/                 UINT8        UnnamedObjectsOnly : 1;      // 1 BitPosition                                                                                              
/*0x002*/                 UINT8        UseDefaultObject : 1;        // 2 BitPosition                                                                                              
/*0x002*/                 UINT8        SecurityRequired : 1;        // 3 BitPosition                                                                                              
/*0x002*/                 UINT8        MaintainHandleCount : 1;     // 4 BitPosition                                                                                              
/*0x002*/                 UINT8        MaintainTypeList : 1;        // 5 BitPosition                                                                                              
/*0x002*/                 UINT8        SupportsObjectCallbacks : 1; // 6 BitPosition                                                                                              
/*0x002*/                 UINT8        CacheAligned : 1;            // 7 BitPosition                                                                                              
                      };                                                                                                                                                          
                      struct                                        // 2 elements, 0x1 bytes (sizeof)                                                                             
                      {                                                                                                                                                           
/*0x003*/                 UINT8        UseExtendedParameters : 1;   // 0 BitPosition                                                                                              
/*0x003*/                 UINT8        Reserved : 7;                // 1 BitPosition                                                                                              
                      };                                                                                                                                                          
                  };                                                                                                                                                              
              };                                                                                                                                                                  
/*0x004*/     ULONG32      ObjectTypeCode;                                                                                                                                        
/*0x008*/     ULONG32      InvalidAttributes;                                                                                                                                     
/*0x00C*/     struct _GENERIC_MAPPING GenericMapping;               // 4 elements, 0x10 bytes (sizeof)                                                                            
/*0x01C*/     ULONG32      ValidAccessMask;                                                                                                                                       
/*0x020*/     ULONG32      RetainAccess;                                                                                                                                          
/*0x024*/     enum _POOL_TYPE PoolType;                                                                                                                                           
/*0x028*/     ULONG32      DefaultPagedPoolCharge;                                                                                                                                
/*0x02C*/     ULONG32      DefaultNonPagedPoolCharge;                                                                                                                             
/*0x030*/     UINT64       DumpProcedure;                           // FUNCT_00EF_15EA_DumpProcedure*                                                                             
/*0x038*/     UINT64       OpenProcedure;                           // FUNCT_00A0_15F2_OpenProcedure*                                                                             
/*0x040*/     UINT64       CloseProcedure;                          // FUNCT_00EF_1600_CloseProcedure*                                                                            
/*0x048*/     UINT64       DeleteProcedure;                         // FUNCT_00EF_08F6_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure* 
              union                                                 // 2 elements, 0x8 bytes (sizeof)                                                                             
              {                                                                                                                                                                   
/*0x050*/         UINT64       ParseProcedure;                      // FUNCT_00A0_1606_ParseProcedure*                                                                            
/*0x050*/         UINT64       ParseProcedureEx;                    // FUNCT_00A0_1612_ParseProcedureEx*                                                                          
              };                                                                                                                                                                  
/*0x058*/     UINT64       SecurityProcedure;                       // FUNCT_00A0_1624_SecurityProcedure*                                                                         
/*0x060*/     UINT64       QueryNameProcedure;                      // FUNCT_00A0_1635_QueryNameProcedure*                                                                        
/*0x068*/     UINT64       OkayToCloseProcedure;                    // FUNCT_00A9_163D_OkayToCloseProcedure*                                                                      
/*0x070*/     ULONG32      WaitObjectFlagMask;                                                                                                                                    
/*0x074*/     UINT16       WaitObjectFlagOffset;                                                                                                                                  
/*0x076*/     UINT16       WaitObjectPointerOffset;                                                                                                                               
          }OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;                                                                                                                    
                                                                                                                                                                                  
          typedef struct _OBJECT_TYPE                   // 12 elements, 0xD8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY TypeList;              // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _UNICODE_STRING Name;              // 3 elements, 0x10 bytes (sizeof)  
/*0x020*/     UINT64       DefaultObject;               // VOID*                            
/*0x028*/     UINT8        Index;                                                           
/*0x029*/     UINT8        _PADDING0_[0x3];                                                 
/*0x02C*/     ULONG32      TotalNumberOfObjects;                                            
/*0x030*/     ULONG32      TotalNumberOfHandles;                                            
/*0x034*/     ULONG32      HighWaterNumberOfObjects;                                        
/*0x038*/     ULONG32      HighWaterNumberOfHandles;                                        
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                 
/*0x040*/     struct _OBJECT_TYPE_INITIALIZER TypeInfo; // 32 elements, 0x78 bytes (sizeof) 
/*0x0B8*/     struct _EX_PUSH_LOCK TypeLock;            // 7 elements, 0x8 bytes (sizeof)   
/*0x0C0*/     ULONG32      Key;                                                             
/*0x0C4*/     UINT8        _PADDING2_[0x4];                                                 
/*0x0C8*/     struct _LIST_ENTRY CallbackList;          // 2 elements, 0x10 bytes (sizeof)  
          }OBJECT_TYPE, *POBJECT_TYPE;                                                      
                                                                                            
          typedef struct _PAGED_LOOKASIDE_LIST // 1 elements, 0x80 bytes (sizeof)  
          {                                                                        
/*0x000*/     struct _GENERAL_LOOKASIDE L;     // 22 elements, 0x80 bytes (sizeof) 
          }PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;                                    
                                                                                   
typedef struct _PAGEFAULT_HISTORY // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}PAGEFAULT_HISTORY, *PPAGEFAULT_HISTORY;                                  
                                                                    
          typedef struct _PEB                                        // 118 elements, 0x7C8 bytes (sizeof)      
          {                                                                                                     
/*0x000*/     UINT8        InheritedAddressSpace;                                                               
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                            
/*0x002*/     UINT8        BeingDebugged;                                                                       
              union                                                  // 2 elements, 0x1 bytes (sizeof)          
              {                                                                                                 
/*0x003*/         UINT8        BitField;                                                                        
                  struct                                             // 8 elements, 0x1 bytes (sizeof)          
                  {                                                                                             
/*0x003*/             UINT8        ImageUsesLargePages : 1;          // 0 BitPosition                           
/*0x003*/             UINT8        IsProtectedProcess : 1;           // 1 BitPosition                           
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;  // 2 BitPosition                           
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1; // 3 BitPosition                           
/*0x003*/             UINT8        IsPackagedProcess : 1;            // 4 BitPosition                           
/*0x003*/             UINT8        IsAppContainer : 1;               // 5 BitPosition                           
/*0x003*/             UINT8        IsProtectedProcessLight : 1;      // 6 BitPosition                           
/*0x003*/             UINT8        IsLongPathAwareProcess : 1;       // 7 BitPosition                           
                  };                                                                                            
              };                                                                                                
/*0x004*/     UINT8        Padding0[4];                                                                         
/*0x008*/     UINT64       Mutant;                                   // VOID*                                   
/*0x010*/     UINT64       ImageBaseAddress;                         // VOID*                                   
/*0x018*/     UINT64       Ldr;                                      // struct _PEB_LDR_DATA*                   
/*0x020*/     UINT64       ProcessParameters;                        // struct _RTL_USER_PROCESS_PARAMETERS*    
/*0x028*/     UINT64       SubSystemData;                            // VOID*                                   
/*0x030*/     UINT64       ProcessHeap;                              // VOID*                                   
/*0x038*/     UINT64       FastPebLock;                              // struct _RTL_CRITICAL_SECTION*           
/*0x040*/     UINT64       AtlThunkSListPtr;                         // union _SLIST_HEADER*                    
/*0x048*/     UINT64       IFEOKey;                                  // VOID*                                   
              union                                                  // 2 elements, 0x4 bytes (sizeof)          
              {                                                                                                 
/*0x050*/         ULONG32      CrossProcessFlags;                                                               
                  struct                                             // 9 elements, 0x4 bytes (sizeof)          
                  {                                                                                             
/*0x050*/             ULONG32      ProcessInJob : 1;                 // 0 BitPosition                           
/*0x050*/             ULONG32      ProcessInitializing : 1;          // 1 BitPosition                           
/*0x050*/             ULONG32      ProcessUsingVEH : 1;              // 2 BitPosition                           
/*0x050*/             ULONG32      ProcessUsingVCH : 1;              // 3 BitPosition                           
/*0x050*/             ULONG32      ProcessUsingFTH : 1;              // 4 BitPosition                           
/*0x050*/             ULONG32      ProcessPreviouslyThrottled : 1;   // 5 BitPosition                           
/*0x050*/             ULONG32      ProcessCurrentlyThrottled : 1;    // 6 BitPosition                           
/*0x050*/             ULONG32      ProcessImagesHotPatched : 1;      // 7 BitPosition                           
/*0x050*/             ULONG32      ReservedBits0 : 24;               // 8 BitPosition                           
                  };                                                                                            
              };                                                                                                
/*0x054*/     UINT8        Padding1[4];                                                                         
              union                                                  // 2 elements, 0x8 bytes (sizeof)          
              {                                                                                                 
/*0x058*/         UINT64       KernelCallbackTable;                  // VOID*                                   
/*0x058*/         UINT64       UserSharedInfoPtr;                    // VOID*                                   
              };                                                                                                
/*0x060*/     ULONG32      SystemReserved;                                                                      
/*0x064*/     ULONG32      AtlThunkSListPtr32;                                                                  
/*0x068*/     UINT64       ApiSetMap;                                // VOID*                                   
/*0x070*/     ULONG32      TlsExpansionCounter;                                                                 
/*0x074*/     UINT8        Padding2[4];                                                                         
/*0x078*/     UINT64       TlsBitmap;                                // VOID*                                   
/*0x080*/     ULONG32      TlsBitmapBits[2];                                                                    
/*0x088*/     UINT64       ReadOnlySharedMemoryBase;                 // VOID*                                   
/*0x090*/     UINT64       SharedData;                               // VOID*                                   
/*0x098*/     UINT64       ReadOnlyStaticServerData;                 // VOID**                                  
/*0x0A0*/     UINT64       AnsiCodePageData;                         // VOID*                                   
/*0x0A8*/     UINT64       OemCodePageData;                          // VOID*                                   
/*0x0B0*/     UINT64       UnicodeCaseTableData;                     // VOID*                                   
/*0x0B8*/     ULONG32      NumberOfProcessors;                                                                  
/*0x0BC*/     ULONG32      NtGlobalFlag;                                                                        
/*0x0C0*/     union _LARGE_INTEGER CriticalSectionTimeout;           // 4 elements, 0x8 bytes (sizeof)          
/*0x0C8*/     UINT64       HeapSegmentReserve;                                                                  
/*0x0D0*/     UINT64       HeapSegmentCommit;                                                                   
/*0x0D8*/     UINT64       HeapDeCommitTotalFreeThreshold;                                                      
/*0x0E0*/     UINT64       HeapDeCommitFreeBlockThreshold;                                                      
/*0x0E8*/     ULONG32      NumberOfHeaps;                                                                       
/*0x0EC*/     ULONG32      MaximumNumberOfHeaps;                                                                
/*0x0F0*/     UINT64       ProcessHeaps;                             // VOID**                                  
/*0x0F8*/     UINT64       GdiSharedHandleTable;                     // VOID*                                   
/*0x100*/     UINT64       ProcessStarterHelper;                     // VOID*                                   
/*0x108*/     ULONG32      GdiDCAttributeList;                                                                  
/*0x10C*/     UINT8        Padding3[4];                                                                         
/*0x110*/     UINT64       LoaderLock;                               // struct _RTL_CRITICAL_SECTION*           
/*0x118*/     ULONG32      OSMajorVersion;                                                                      
/*0x11C*/     ULONG32      OSMinorVersion;                                                                      
/*0x120*/     UINT16       OSBuildNumber;                                                                       
/*0x122*/     UINT16       OSCSDVersion;                                                                        
/*0x124*/     ULONG32      OSPlatformId;                                                                        
/*0x128*/     ULONG32      ImageSubsystem;                                                                      
/*0x12C*/     ULONG32      ImageSubsystemMajorVersion;                                                          
/*0x130*/     ULONG32      ImageSubsystemMinorVersion;                                                          
/*0x134*/     UINT8        Padding4[4];                                                                         
/*0x138*/     UINT64       ActiveProcessAffinityMask;                                                           
/*0x140*/     ULONG32      GdiHandleBuffer[60];                                                                 
/*0x230*/     UINT64       PostProcessInitRoutine;                   // FUNCT_00EF_02EA_PostProcessInitRoutine* 
/*0x238*/     UINT64       TlsExpansionBitmap;                       // VOID*                                   
/*0x240*/     ULONG32      TlsExpansionBitmapBits[32];                                                          
/*0x2C0*/     ULONG32      SessionId;                                                                           
/*0x2C4*/     UINT8        Padding5[4];                                                                         
/*0x2C8*/     union _ULARGE_INTEGER AppCompatFlags;                  // 4 elements, 0x8 bytes (sizeof)          
/*0x2D0*/     union _ULARGE_INTEGER AppCompatFlagsUser;              // 4 elements, 0x8 bytes (sizeof)          
/*0x2D8*/     UINT64       pShimData;                                // VOID*                                   
/*0x2E0*/     UINT64       AppCompatInfo;                            // VOID*                                   
/*0x2E8*/     struct _UNICODE_STRING CSDVersion;                     // 3 elements, 0x10 bytes (sizeof)         
/*0x2F8*/     UINT64       ActivationContextData;                    // struct _ACTIVATION_CONTEXT_DATA*        
/*0x300*/     UINT64       ProcessAssemblyStorageMap;                // struct _ASSEMBLY_STORAGE_MAP*           
/*0x308*/     UINT64       SystemDefaultActivationContextData;       // struct _ACTIVATION_CONTEXT_DATA*        
/*0x310*/     UINT64       SystemAssemblyStorageMap;                 // struct _ASSEMBLY_STORAGE_MAP*           
/*0x318*/     UINT64       MinimumStackCommit;                                                                  
/*0x320*/     UINT64       FlsCallback;                              // struct _FLS_CALLBACK_INFO*              
/*0x328*/     struct _LIST_ENTRY FlsListHead;                        // 2 elements, 0x10 bytes (sizeof)         
/*0x338*/     UINT64       FlsBitmap;                                // VOID*                                   
/*0x340*/     ULONG32      FlsBitmapBits[4];                                                                    
/*0x350*/     ULONG32      FlsHighIndex;                                                                        
/*0x354*/     UINT8        _PADDING0_[0x4];                                                                     
/*0x358*/     UINT64       WerRegistrationData;                      // VOID*                                   
/*0x360*/     UINT64       WerShipAssertPtr;                         // VOID*                                   
/*0x368*/     UINT64       pUnused;                                  // VOID*                                   
/*0x370*/     UINT64       pImageHeaderHash;                         // VOID*                                   
              union                                                  // 2 elements, 0x4 bytes (sizeof)          
              {                                                                                                 
/*0x378*/         ULONG32      TracingFlags;                                                                    
                  struct                                             // 4 elements, 0x4 bytes (sizeof)          
                  {                                                                                             
/*0x378*/             ULONG32      HeapTracingEnabled : 1;           // 0 BitPosition                           
/*0x378*/             ULONG32      CritSecTracingEnabled : 1;        // 1 BitPosition                           
/*0x378*/             ULONG32      LibLoaderTracingEnabled : 1;      // 2 BitPosition                           
/*0x378*/             ULONG32      SpareTracingBits : 29;            // 3 BitPosition                           
                  };                                                                                            
              };                                                                                                
/*0x37C*/     UINT8        Padding6[4];                                                                         
/*0x380*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                                   
/*0x388*/     UINT64       TppWorkerpListLock;                                                                  
/*0x390*/     struct _LIST_ENTRY TppWorkerpList;                     // 2 elements, 0x10 bytes (sizeof)         
/*0x3A0*/     UINT64       WaitOnAddressHashTable[128];              // VOID*                                   
/*0x7A0*/     UINT64       TelemetryCoverageHeader;                  // VOID*                                   
/*0x7A8*/     ULONG32      CloudFileFlags;                                                                      
/*0x7AC*/     ULONG32      CloudFileDiagFlags;                                                                  
/*0x7B0*/     CHAR         PlaceholderCompatibilityMode;                                                        
/*0x7B1*/     CHAR         PlaceholderCompatibilityModeReserved[7];                                             
/*0x7B8*/     UINT64       LeapSecondData;                           // struct _LEAP_SECOND_DATA*               
              union                                                  // 2 elements, 0x4 bytes (sizeof)          
              {                                                                                                 
/*0x7C0*/         ULONG32      LeapSecondFlags;                                                                 
                  struct                                             // 2 elements, 0x4 bytes (sizeof)          
                  {                                                                                             
/*0x7C0*/             ULONG32      SixtySecondEnabled : 1;           // 0 BitPosition                           
/*0x7C0*/             ULONG32      Reserved : 31;                    // 1 BitPosition                           
                  };                                                                                            
              };                                                                                                
/*0x7C4*/     ULONG32      NtGlobalFlag2;                                                                       
          }PEB, *PPEB;                                                                                          
                                                                                                                
          typedef struct _PEB_LDR_DATA                            // 9 elements, 0x58 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      Length;                                                                   
/*0x004*/     UINT8        Initialized;                                                              
/*0x005*/     UINT8        _PADDING0_[0x3];                                                          
/*0x008*/     UINT64       SsHandle;                              // VOID*                           
/*0x010*/     struct _LIST_ENTRY InLoadOrderModuleList;           // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     struct _LIST_ENTRY InMemoryOrderModuleList;         // 2 elements, 0x10 bytes (sizeof) 
/*0x030*/     struct _LIST_ENTRY InInitializationOrderModuleList; // 2 elements, 0x10 bytes (sizeof) 
/*0x040*/     UINT64       EntryInProgress;                       // VOID*                           
/*0x048*/     UINT8        ShutdownInProgress;                                                       
/*0x049*/     UINT8        _PADDING1_[0x7];                                                          
/*0x050*/     UINT64       ShutdownThreadId;                      // VOID*                           
          }PEB_LDR_DATA, *PPEB_LDR_DATA;                                                             
                                                                                                     
          typedef struct _STRING32        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Length;                                          
/*0x002*/     UINT16       MaximumLength;                                   
/*0x004*/     ULONG32      Buffer;                                          
          }STRING32, *PSTRING32;                                            
                                                                            
          typedef struct _PEB32                                      // 111 elements, 0x480 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT8        InheritedAddressSpace;                                                          
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                       
/*0x002*/     UINT8        BeingDebugged;                                                                  
              union                                                  // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                            
/*0x003*/         UINT8        BitField;                                                                   
                  struct                                             // 8 elements, 0x1 bytes (sizeof)     
                  {                                                                                        
/*0x003*/             UINT8        ImageUsesLargePages : 1;          // 0 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcess : 1;           // 1 BitPosition                      
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;  // 2 BitPosition                      
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1; // 3 BitPosition                      
/*0x003*/             UINT8        IsPackagedProcess : 1;            // 4 BitPosition                      
/*0x003*/             UINT8        IsAppContainer : 1;               // 5 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcessLight : 1;      // 6 BitPosition                      
/*0x003*/             UINT8        IsLongPathAwareProcess : 1;       // 7 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x004*/     ULONG32      Mutant;                                                                         
/*0x008*/     ULONG32      ImageBaseAddress;                                                               
/*0x00C*/     ULONG32      Ldr;                                                                            
/*0x010*/     ULONG32      ProcessParameters;                                                              
/*0x014*/     ULONG32      SubSystemData;                                                                  
/*0x018*/     ULONG32      ProcessHeap;                                                                    
/*0x01C*/     ULONG32      FastPebLock;                                                                    
/*0x020*/     ULONG32      AtlThunkSListPtr;                                                               
/*0x024*/     ULONG32      IFEOKey;                                                                        
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x028*/         ULONG32      CrossProcessFlags;                                                          
                  struct                                             // 9 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x028*/             ULONG32      ProcessInJob : 1;                 // 0 BitPosition                      
/*0x028*/             ULONG32      ProcessInitializing : 1;          // 1 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingVEH : 1;              // 2 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingVCH : 1;              // 3 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingFTH : 1;              // 4 BitPosition                      
/*0x028*/             ULONG32      ProcessPreviouslyThrottled : 1;   // 5 BitPosition                      
/*0x028*/             ULONG32      ProcessCurrentlyThrottled : 1;    // 6 BitPosition                      
/*0x028*/             ULONG32      ProcessImagesHotPatched : 1;      // 7 BitPosition                      
/*0x028*/             ULONG32      ReservedBits0 : 24;               // 8 BitPosition                      
                  };                                                                                       
              };                                                                                           
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x02C*/         ULONG32      KernelCallbackTable;                                                        
/*0x02C*/         ULONG32      UserSharedInfoPtr;                                                          
              };                                                                                           
/*0x030*/     ULONG32      SystemReserved;                                                                 
/*0x034*/     ULONG32      AtlThunkSListPtr32;                                                             
/*0x038*/     ULONG32      ApiSetMap;                                                                      
/*0x03C*/     ULONG32      TlsExpansionCounter;                                                            
/*0x040*/     ULONG32      TlsBitmap;                                                                      
/*0x044*/     ULONG32      TlsBitmapBits[2];                                                               
/*0x04C*/     ULONG32      ReadOnlySharedMemoryBase;                                                       
/*0x050*/     ULONG32      SharedData;                                                                     
/*0x054*/     ULONG32      ReadOnlyStaticServerData;                                                       
/*0x058*/     ULONG32      AnsiCodePageData;                                                               
/*0x05C*/     ULONG32      OemCodePageData;                                                                
/*0x060*/     ULONG32      UnicodeCaseTableData;                                                           
/*0x064*/     ULONG32      NumberOfProcessors;                                                             
/*0x068*/     ULONG32      NtGlobalFlag;                                                                   
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x070*/     union _LARGE_INTEGER CriticalSectionTimeout;           // 4 elements, 0x8 bytes (sizeof)     
/*0x078*/     ULONG32      HeapSegmentReserve;                                                             
/*0x07C*/     ULONG32      HeapSegmentCommit;                                                              
/*0x080*/     ULONG32      HeapDeCommitTotalFreeThreshold;                                                 
/*0x084*/     ULONG32      HeapDeCommitFreeBlockThreshold;                                                 
/*0x088*/     ULONG32      NumberOfHeaps;                                                                  
/*0x08C*/     ULONG32      MaximumNumberOfHeaps;                                                           
/*0x090*/     ULONG32      ProcessHeaps;                                                                   
/*0x094*/     ULONG32      GdiSharedHandleTable;                                                           
/*0x098*/     ULONG32      ProcessStarterHelper;                                                           
/*0x09C*/     ULONG32      GdiDCAttributeList;                                                             
/*0x0A0*/     ULONG32      LoaderLock;                                                                     
/*0x0A4*/     ULONG32      OSMajorVersion;                                                                 
/*0x0A8*/     ULONG32      OSMinorVersion;                                                                 
/*0x0AC*/     UINT16       OSBuildNumber;                                                                  
/*0x0AE*/     UINT16       OSCSDVersion;                                                                   
/*0x0B0*/     ULONG32      OSPlatformId;                                                                   
/*0x0B4*/     ULONG32      ImageSubsystem;                                                                 
/*0x0B8*/     ULONG32      ImageSubsystemMajorVersion;                                                     
/*0x0BC*/     ULONG32      ImageSubsystemMinorVersion;                                                     
/*0x0C0*/     ULONG32      ActiveProcessAffinityMask;                                                      
/*0x0C4*/     ULONG32      GdiHandleBuffer[34];                                                            
/*0x14C*/     ULONG32      PostProcessInitRoutine;                                                         
/*0x150*/     ULONG32      TlsExpansionBitmap;                                                             
/*0x154*/     ULONG32      TlsExpansionBitmapBits[32];                                                     
/*0x1D4*/     ULONG32      SessionId;                                                                      
/*0x1D8*/     union _ULARGE_INTEGER AppCompatFlags;                  // 4 elements, 0x8 bytes (sizeof)     
/*0x1E0*/     union _ULARGE_INTEGER AppCompatFlagsUser;              // 4 elements, 0x8 bytes (sizeof)     
/*0x1E8*/     ULONG32      pShimData;                                                                      
/*0x1EC*/     ULONG32      AppCompatInfo;                                                                  
/*0x1F0*/     struct _STRING32 CSDVersion;                           // 3 elements, 0x8 bytes (sizeof)     
/*0x1F8*/     ULONG32      ActivationContextData;                                                          
/*0x1FC*/     ULONG32      ProcessAssemblyStorageMap;                                                      
/*0x200*/     ULONG32      SystemDefaultActivationContextData;                                             
/*0x204*/     ULONG32      SystemAssemblyStorageMap;                                                       
/*0x208*/     ULONG32      MinimumStackCommit;                                                             
/*0x20C*/     ULONG32      FlsCallback;                                                                    
/*0x210*/     struct _LIST_ENTRY32 FlsListHead;                      // 2 elements, 0x8 bytes (sizeof)     
/*0x218*/     ULONG32      FlsBitmap;                                                                      
/*0x21C*/     ULONG32      FlsBitmapBits[4];                                                               
/*0x22C*/     ULONG32      FlsHighIndex;                                                                   
/*0x230*/     ULONG32      WerRegistrationData;                                                            
/*0x234*/     ULONG32      WerShipAssertPtr;                                                               
/*0x238*/     ULONG32      pUnused;                                                                        
/*0x23C*/     ULONG32      pImageHeaderHash;                                                               
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x240*/         ULONG32      TracingFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x240*/             ULONG32      HeapTracingEnabled : 1;           // 0 BitPosition                      
/*0x240*/             ULONG32      CritSecTracingEnabled : 1;        // 1 BitPosition                      
/*0x240*/             ULONG32      LibLoaderTracingEnabled : 1;      // 2 BitPosition                      
/*0x240*/             ULONG32      SpareTracingBits : 29;            // 3 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x248*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                              
/*0x250*/     ULONG32      TppWorkerpListLock;                                                             
/*0x254*/     struct _LIST_ENTRY32 TppWorkerpList;                   // 2 elements, 0x8 bytes (sizeof)     
/*0x25C*/     ULONG32      WaitOnAddressHashTable[128];                                                    
/*0x45C*/     ULONG32      TelemetryCoverageHeader;                                                        
/*0x460*/     ULONG32      CloudFileFlags;                                                                 
/*0x464*/     ULONG32      CloudFileDiagFlags;                                                             
/*0x468*/     CHAR         PlaceholderCompatibilityMode;                                                   
/*0x469*/     CHAR         PlaceholderCompatibilityModeReserved[7];                                        
/*0x470*/     ULONG32      LeapSecondData;                                                                 
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x474*/         ULONG32      LeapSecondFlags;                                                            
                  struct                                             // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x474*/             ULONG32      SixtySecondEnabled : 1;           // 0 BitPosition                      
/*0x474*/             ULONG32      Reserved : 31;                    // 1 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x478*/     ULONG32      NtGlobalFlag2;                                                                  
/*0x47C*/     UINT8        _PADDING1_[0x4];                                                                
          }PEB32, *PPEB32;                                                                                 
                                                                                                           
          typedef struct _PEBS_DS_SAVE_AREA        // 12 elements, 0x60 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       BtsBufferBase;                                              
/*0x008*/     UINT64       BtsIndex;                                                   
/*0x010*/     UINT64       BtsAbsoluteMaximum;                                         
/*0x018*/     UINT64       BtsInterruptThreshold;                                      
/*0x020*/     UINT64       PebsBufferBase;                                             
/*0x028*/     UINT64       PebsIndex;                                                  
/*0x030*/     UINT64       PebsAbsoluteMaximum;                                        
/*0x038*/     UINT64       PebsInterruptThreshold;                                     
/*0x040*/     UINT64       PebsCounterReset0;                                          
/*0x048*/     UINT64       PebsCounterReset1;                                          
/*0x050*/     UINT64       PebsCounterReset2;                                          
/*0x058*/     UINT64       PebsCounterReset3;                                          
          }PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA;                                     
                                                                                       
          typedef struct _PERF_CONTROL_STATE_SELECTION // 10 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       SelectedState;                                                  
/*0x008*/     ULONG32      SelectedPercent;                                                
/*0x00C*/     ULONG32      SelectedFrequency;                                              
/*0x010*/     ULONG32      MinPercent;                                                     
/*0x014*/     ULONG32      MaxPercent;                                                     
/*0x018*/     ULONG32      TolerancePercent;                                               
/*0x01C*/     ULONG32      EppPercent;                                                     
/*0x020*/     ULONG32      AutonomousActivityWindow;                                       
/*0x024*/     UINT8        Autonomous;                                                     
/*0x025*/     UINT8        InheritFromDomain;                                              
/*0x026*/     UINT8        _PADDING0_[0x2];                                                
          }PERF_CONTROL_STATE_SELECTION, *PPERF_CONTROL_STATE_SELECTION;                                    
                                                                                           
          typedef struct _PERFINFO_GROUPMASK // 1 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Masks[8];                                            
          }PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK;                                   
                                                                                
          typedef struct _PERFINFO_PPM_STATE_SELECTION // 3 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      SelectedState;                                                
/*0x004*/     ULONG32      VetoedStates;                                                 
/*0x008*/     ULONG32      VetoReason[1];                                                
          }PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION;                                  
                                                                                         
          typedef struct _PF_KERNEL_GLOBALS           // 8 elements, 0x60 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       AccessBufferAgeThreshold;                                     
/*0x008*/     struct _EX_RUNDOWN_REF AccessBufferRef; // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/     struct _KEVENT AccessBufferExistsEvent; // 1 elements, 0x18 bytes (sizeof) 
/*0x028*/     ULONG32      AccessBufferMax;                                              
/*0x02C*/     UINT8        _PADDING0_[0x14];                                             
/*0x040*/     union _SLIST_HEADER AccessBufferList;   // 3 elements, 0x10 bytes (sizeof) 
/*0x050*/     LONG32       StreamSequenceNumber;                                         
/*0x054*/     ULONG32      Flags;                                                        
/*0x058*/     LONG32       ScenarioPrefetchCount;                                        
/*0x05C*/     UINT8        _PADDING1_[0x4];                                              
          }PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS;                                       
                                                                                         
          typedef struct _PO_DIAG_STACK_RECORD // 2 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      StackDepth;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     UINT64       Stack[1];           // VOID*                           
          }PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD;                                   
                                                                                  
typedef struct _PO_PROCESS_ENERGY_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                           
}PO_PROCESS_ENERGY_CONTEXT, *PPO_PROCESS_ENERGY_CONTEXT;                                  
                                                                            
typedef struct _POP_FX_DEVICE // 0 elements, 0x0 bytes (sizeof) 
{                                                               
}POP_FX_DEVICE, *PPOP_FX_DEVICE;                                  
                                                                
          typedef struct _POWER_SEQUENCE // 3 elements, 0xC bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      SequenceD1;                                     
/*0x004*/     ULONG32      SequenceD2;                                     
/*0x008*/     ULONG32      SequenceD3;                                     
          }POWER_SEQUENCE, *PPOWER_SEQUENCE;                                  
                                                                           
          typedef struct _PPM_CONCURRENCY_ACCOUNTING // 6 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Lock;                                                        
/*0x008*/     ULONG32      Processors;                                                  
/*0x00C*/     ULONG32      ActiveProcessors;                                            
/*0x010*/     UINT64       LastUpdateTime;                                              
/*0x018*/     UINT64       TotalTime;                                                   
/*0x020*/     UINT64       AccumulatedTime[1];                                          
          }PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING;                                   
                                                                                        
          typedef struct _PPM_COORDINATED_SELECTION // 4 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      MaximumStates;                                              
/*0x004*/     ULONG32      SelectedStates;                                             
/*0x008*/     ULONG32      DefaultSelection;                                           
/*0x00C*/     UINT8        _PADDING0_[0x4];                                            
/*0x010*/     UINT64       Selection;               // ULONG32*                        
          }PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION;                                   
                                                                                       
          typedef struct _PPM_VETO_ACCOUNTING     // 6 elements, 0x28 bytes (sizeof) 
          {                                                                          
/*0x000*/     LONG32       VetoPresent;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                          
/*0x008*/     struct _LIST_ENTRY VetoListHead;    // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT8        CsAccountingBlocks;                                       
/*0x019*/     UINT8        BlocksDrips;                                              
/*0x01A*/     UINT8        _PADDING1_[0x2];                                          
/*0x01C*/     ULONG32      PreallocatedVetoCount;                                    
/*0x020*/     UINT64       PreallocatedVetoList;  // struct _PPM_VETO_ENTRY*         
          }PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING;                                   
                                                                                     
          typedef struct _PPM_IDLE_STATE                  // 15 elements, 0xF8 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _KAFFINITY_EX DomainMembers;         // 4 elements, 0xA8 bytes (sizeof)  
/*0x0A8*/     struct _UNICODE_STRING Name;                // 3 elements, 0x10 bytes (sizeof)  
/*0x0B8*/     ULONG32      Latency;                                                           
/*0x0BC*/     ULONG32      BreakEvenDuration;                                                 
/*0x0C0*/     ULONG32      Power;                                                             
/*0x0C4*/     ULONG32      StateFlags;                                                        
/*0x0C8*/     struct _PPM_VETO_ACCOUNTING VetoAccounting; // 6 elements, 0x28 bytes (sizeof)  
/*0x0F0*/     UINT8        StateType;                                                         
/*0x0F1*/     UINT8        InterruptsEnabled;                                                 
/*0x0F2*/     UINT8        Interruptible;                                                     
/*0x0F3*/     UINT8        ContextRetained;                                                   
/*0x0F4*/     UINT8        CacheCoherent;                                                     
/*0x0F5*/     UINT8        WakesSpuriously;                                                   
/*0x0F6*/     UINT8        PlatformOnly;                                                      
/*0x0F7*/     UINT8        NoCState;                                                          
          }PPM_IDLE_STATE, *PPPM_IDLE_STATE;                                                  
                                                                                              
          typedef struct _PROCESSOR_IDLE_CONSTRAINTS // 13 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       TotalTime;                                                    
/*0x008*/     UINT64       IdleTime;                                                     
/*0x010*/     UINT64       ExpectedIdleDuration;                                         
/*0x018*/     UINT64       MaxIdleDuration;                                              
/*0x020*/     ULONG32      OverrideState;                                                
/*0x024*/     ULONG32      TimeCheck;                                                    
/*0x028*/     UINT8        PromotePercent;                                               
/*0x029*/     UINT8        DemotePercent;                                                
/*0x02A*/     UINT8        Parked;                                                       
/*0x02B*/     UINT8        Interruptible;                                                
/*0x02C*/     UINT8        PlatformIdle;                                                 
/*0x02D*/     UINT8        ExpectedWakeReason;                                           
/*0x02E*/     UINT8        IdleStateMax;                                                 
/*0x02F*/     UINT8        _PADDING0_[0x1];                                              
          }PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS;                                    
                                                                                         
          typedef struct _PROCESSOR_IDLE_PREPARE_INFO         // 8 elements, 0x58 bytes (sizeof)    
          {                                                                                         
/*0x000*/     UINT64       Context;                           // VOID*                              
/*0x008*/     struct _PROCESSOR_IDLE_CONSTRAINTS Constraints; // 13 elements, 0x30 bytes (sizeof)   
/*0x038*/     ULONG32      DependencyCount;                                                         
/*0x03C*/     ULONG32      DependencyUsed;                                                          
/*0x040*/     UINT64       DependencyArray;                   // struct _PROCESSOR_IDLE_DEPENDENCY* 
/*0x048*/     ULONG32      PlatformIdleStateIndex;                                                  
/*0x04C*/     ULONG32      ProcessorIdleStateIndex;                                                 
/*0x050*/     ULONG32      IdleSelectFailureMask;                                                   
/*0x054*/     UINT8        _PADDING0_[0x4];                                                         
          }PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO;                                      
                                                                                                    
          typedef struct _PPM_SELECTION_MENU // 2 elements, 0x10 bytes (sizeof)   
          {                                                                       
/*0x000*/     ULONG32      Count;                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     UINT64       Entries;          // struct _PPM_SELECTION_MENU_ENTRY* 
          }PPM_SELECTION_MENU, *PPPM_SELECTION_MENU;                                     
                                                                                  
          typedef struct _PPM_IDLE_STATES                             // 41 elements, 0x428 bytes (sizeof)              
          {                                                                                                             
/*0x000*/     UINT8        InterfaceVersion;                                                                            
/*0x001*/     UINT8        IdleOverride;                                                                                
/*0x002*/     UINT8        EstimateIdleDuration;                                                                        
/*0x003*/     UINT8        ExitLatencyTraceEnabled;                                                                     
/*0x004*/     UINT8        NonInterruptibleTransition;                                                                  
/*0x005*/     UINT8        UnaccountedTransition;                                                                       
/*0x006*/     UINT8        IdleDurationLimited;                                                                         
/*0x007*/     UINT8        IdleCheckLimited;                                                                            
/*0x008*/     UINT8        StrictVetoBias;                                                                              
/*0x009*/     UINT8        _PADDING0_[0x3];                                                                             
/*0x00C*/     ULONG32      ExitLatencyCountdown;                                                                        
/*0x010*/     ULONG32      TargetState;                                                                                 
/*0x014*/     ULONG32      ActualState;                                                                                 
/*0x018*/     ULONG32      OldState;                                                                                    
/*0x01C*/     ULONG32      OverrideIndex;                                                                               
/*0x020*/     ULONG32      ProcessorIdleCount;                                                                          
/*0x024*/     ULONG32      Type;                                                                                        
/*0x028*/     UINT64       LevelId;                                                                                     
/*0x030*/     UINT16       ReasonFlags;                                                                                 
/*0x032*/     UINT8        _PADDING1_[0x6];                                                                             
/*0x038*/     UINT64       InitiateWakeStamp;                                                                           
/*0x040*/     LONG32       PreviousStatus;                                                                              
/*0x044*/     ULONG32      PreviousCancelReason;                                                                        
/*0x048*/     struct _KAFFINITY_EX PrimaryProcessorMask;              // 4 elements, 0xA8 bytes (sizeof)                
/*0x0F0*/     struct _KAFFINITY_EX SecondaryProcessorMask;            // 4 elements, 0xA8 bytes (sizeof)                
/*0x198*/     UINT64       IdlePrepare;                               // FUNCT_00EF_097A_IdlePrepare*                   
/*0x1A0*/     UINT64       IdlePreExecute;                            // FUNCT_00A0_099B_IdlePreExecute*                
/*0x1A8*/     UINT64       IdleExecute;                               // FUNCT_00A0_09A2_IdleExecute*                   
/*0x1B0*/     UINT64       IdlePreselect;                             // FUNCT_0009_09AB_IdlePreselect*                 
/*0x1B8*/     UINT64       IdleTest;                                  // FUNCT_0009_09B0_IdleTest*                      
/*0x1C0*/     UINT64       IdleAvailabilityCheck;                     // FUNCT_0009_09B5_IdleAvailabilityCheck*         
/*0x1C8*/     UINT64       IdleComplete;                              // FUNCT_00EF_09B9_IdleComplete*                  
/*0x1D0*/     UINT64       IdleCancel;                                // FUNCT_00EF_09BB_IdleCancel*                    
/*0x1D8*/     UINT64       IdleIsHalted;                              // FUNCT_00A9_09BD_IdleIsHalted_IdleInitiateWake* 
/*0x1E0*/     UINT64       IdleInitiateWake;                          // FUNCT_00A9_09BD_IdleIsHalted_IdleInitiateWake* 
/*0x1E8*/     struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;        // 8 elements, 0x58 bytes (sizeof)                
/*0x240*/     struct _KAFFINITY_EX DeepIdleSnapshot;                  // 4 elements, 0xA8 bytes (sizeof)                
/*0x2E8*/     UINT64       Tracing;                                   // struct _PERFINFO_PPM_STATE_SELECTION*          
/*0x2F0*/     UINT64       CoordinatedTracing;                        // struct _PERFINFO_PPM_STATE_SELECTION*          
/*0x2F8*/     struct _PPM_SELECTION_MENU ProcessorMenu;               // 2 elements, 0x10 bytes (sizeof)                
/*0x308*/     struct _PPM_SELECTION_MENU CoordinatedMenu;             // 2 elements, 0x10 bytes (sizeof)                
/*0x318*/     struct _PPM_COORDINATED_SELECTION CoordinatedSelection; // 4 elements, 0x18 bytes (sizeof)                
/*0x330*/     struct _PPM_IDLE_STATE State[1];                                                                          
          }PPM_IDLE_STATES, *PPPM_IDLE_STATES;                                                                          
                                                                                                                        
          typedef struct _PPM_SELECTION_DEPENDENCY // 2 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Processor;                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     struct _PPM_SELECTION_MENU Menu;     // 2 elements, 0x10 bytes (sizeof) 
          }PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY;                                   
                                                                                      
          typedef struct _PPM_SELECTION_MENU_ENTRY // 6 elements, 0x18 bytes (sizeof)   
          {                                                                             
/*0x000*/     UINT8        StrictDependency;                                            
/*0x001*/     UINT8        InitiatingState;                                             
/*0x002*/     UINT8        DependentState;                                              
/*0x003*/     UINT8        _PADDING0_[0x1];                                             
/*0x004*/     ULONG32      StateIndex;                                                  
/*0x008*/     ULONG32      Dependencies;                                                
/*0x00C*/     UINT8        _PADDING1_[0x4];                                             
/*0x010*/     UINT64       DependencyList;         // struct _PPM_SELECTION_DEPENDENCY* 
          }PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY;                                     
                                                                                        
          typedef struct _PPM_SELECTION_STATISTICS     // 16 elements, 0x80 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       SelectedCount;                                                  
/*0x008*/     UINT64       VetoCount;                                                      
/*0x010*/     UINT64       PreVetoCount;                                                   
/*0x018*/     UINT64       WrongProcessorCount;                                            
/*0x020*/     UINT64       LatencyCount;                                                   
/*0x028*/     UINT64       IdleDurationCount;                                              
/*0x030*/     UINT64       DeviceDependencyCount;                                          
/*0x038*/     UINT64       ProcessorDependencyCount;                                       
/*0x040*/     UINT64       PlatformOnlyCount;                                              
/*0x048*/     UINT64       InterruptibleCount;                                             
/*0x050*/     UINT64       LegacyOverrideCount;                                            
/*0x058*/     UINT64       CstateCheckCount;                                               
/*0x060*/     UINT64       NoCStateCount;                                                  
/*0x068*/     UINT64       CoordinatedDependencyCount;                                     
/*0x070*/     UINT64       NotClockOwnerCount;                                             
/*0x078*/     UINT64       PreVetoAccounting;          // struct _PPM_VETO_ACCOUNTING*     
          }PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS;                                    
                                                                                           
          typedef struct _PPM_VETO_ENTRY       // 8 elements, 0x40 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY Link;         // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      VetoReason;                                            
/*0x014*/     ULONG32      ReferenceCount;                                        
/*0x018*/     UINT64       HitCount;                                              
/*0x020*/     UINT64       LastActivationTime;                                    
/*0x028*/     UINT64       TotalActiveTime;                                       
/*0x030*/     UINT64       CsActivationTime;                                      
/*0x038*/     UINT64       CsActiveTime;                                          
          }PPM_VETO_ENTRY, *PPPM_VETO_ENTRY;                                      
                                                                                  
          typedef struct _PROC_FEEDBACK_COUNTER   // 10 elements, 0x30 bytes (sizeof)   
          {                                                                             
              union                               // 2 elements, 0x8 bytes (sizeof)     
              {                                                                         
/*0x000*/         UINT64       InstantaneousRead; // FUNCT_00EF_0A56_InstantaneousRead* 
/*0x000*/         UINT64       DifferentialRead;  // FUNCT_00EF_0A5A_DifferentialRead*  
              };                                                                        
/*0x008*/     UINT64       LastActualCount;                                             
/*0x010*/     UINT64       LastReferenceCount;                                          
/*0x018*/     ULONG32      CachedValue;                                                 
/*0x01C*/     UINT8        _PADDING0_[0x4];                                             
/*0x020*/     UINT8        Affinitized;                                                 
/*0x021*/     UINT8        Differential;                                                
/*0x022*/     UINT8        DiscardIdleTime;                                             
/*0x023*/     UINT8        Scaling;                                                     
/*0x024*/     UINT8        _PADDING1_[0x4];                                             
/*0x028*/     UINT64       Context;                                                     
          }PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER;                                      
                                                                                        
          typedef struct _PROC_IDLE_STATE_BUCKET // 4 elements, 0x20 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       TotalTime;                                               
/*0x008*/     UINT64       MinTime;                                                 
/*0x010*/     UINT64       MaxTime;                                                 
/*0x018*/     ULONG32      Count;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                         
          }PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET;                                   
                                                                                    
          typedef struct _PROC_IDLE_STATE_ACCOUNTING                // 9 elements, 0x3E8 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT64       TotalTime;                                                                   
/*0x008*/     ULONG32      CancelCount;                                                                 
/*0x00C*/     ULONG32      FailureCount;                                                                
/*0x010*/     ULONG32      SuccessCount;                                                                
/*0x014*/     ULONG32      InvalidBucketIndex;                                                          
/*0x018*/     UINT64       MinTime;                                                                     
/*0x020*/     UINT64       MaxTime;                                                                     
/*0x028*/     struct _PPM_SELECTION_STATISTICS SelectionStatistics; // 16 elements, 0x80 bytes (sizeof) 
/*0x0A8*/     struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                                       
          }PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING;                                    
                                                                                                        
          typedef struct _PROC_IDLE_ACCOUNTING             // 8 elements, 0x410 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      StateCount;                                                         
/*0x004*/     ULONG32      TotalTransitions;                                                   
/*0x008*/     ULONG32      ResetCount;                                                         
/*0x00C*/     ULONG32      AbortCount;                                                         
/*0x010*/     UINT64       StartTime;                                                          
/*0x018*/     UINT64       PriorIdleTime;                                                      
/*0x020*/     enum _PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                    
/*0x028*/     struct _PROC_IDLE_STATE_ACCOUNTING State[1];                                     
          }PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING;                                       
                                                                                               
          typedef struct _PROC_PERF_CHECK_SNAP            // 10 elements, 0x58 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT64       Time;                                                              
/*0x008*/     UINT64       Active;                                                            
/*0x010*/     UINT64       Stall;                                                             
/*0x018*/     UINT64       FrequencyScaledActive;                                             
/*0x020*/     UINT64       PerformanceScaledActive;                                           
/*0x028*/     UINT64       PerformanceScaledKernelActive;                                     
/*0x030*/     UINT64       CyclesActive;                                                      
/*0x038*/     UINT64       CyclesAffinitized;                                                 
/*0x040*/     UINT64       TaggedThreadCycles[2];                                             
/*0x050*/     ULONG32      ResponsivenessEvents;                                              
/*0x054*/     UINT8        _PADDING0_[0x4];                                                   
          }PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP;                                      
                                                                                              
          typedef struct _PROC_PERF_CHECK                     // 13 elements, 0x138 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       LastActive;                                                             
/*0x008*/     UINT64       LastTime;                                                               
/*0x010*/     UINT64       LastStall;                                                              
/*0x018*/     ULONG32      LastResponsivenessEvents;                                               
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                        
/*0x020*/     struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap; // 10 elements, 0x58 bytes (sizeof)  
/*0x078*/     struct _PROC_PERF_CHECK_SNAP CurrentSnap;       // 10 elements, 0x58 bytes (sizeof)  
/*0x0D0*/     struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap; // 10 elements, 0x58 bytes (sizeof)  
/*0x128*/     ULONG32      LastDeliveredPerformance;                                               
/*0x12C*/     ULONG32      LastDeliveredFrequency;                                                 
/*0x130*/     UINT8        TaggedThreadPercent[2];                                                 
/*0x132*/     UINT8        Class0FloorPerfSelection;                                               
/*0x133*/     UINT8        Class1MinimumPerfSelection;                                             
/*0x134*/     ULONG32      CurrentResponsivenessEvents;                                            
          }PROC_PERF_CHECK, *PPROC_PERF_CHECK;                                                     
                                                                                                   
          typedef struct _PROC_PERF_CONSTRAINT                // 19 elements, 0x80 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       Prcb;                              // struct _KPRCB*                   
/*0x008*/     UINT64       PerfContext;                                                           
/*0x010*/     ULONG32      PlatformCap;                                                           
/*0x014*/     ULONG32      ThermalCap;                                                            
/*0x018*/     ULONG32      LimitReasons;                                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                       
/*0x020*/     UINT64       PlatformCapStartTime;                                                  
/*0x028*/     ULONG32      ProcCap;                                                               
/*0x02C*/     ULONG32      ProcFloor;                                                             
/*0x030*/     ULONG32      TargetPercent;                                                         
/*0x034*/     UINT8        EngageResponsivenessOverrides;                                         
/*0x035*/     UINT8        ResponsivenessChangeCount;                                             
/*0x036*/     UINT8        _PADDING1_[0x2];                                                       
/*0x038*/     struct _PERF_CONTROL_STATE_SELECTION Selection; // 10 elements, 0x28 bytes (sizeof) 
/*0x060*/     ULONG32      DomainSelectionGeneration;                                             
/*0x064*/     ULONG32      PreviousFrequency;                                                     
/*0x068*/     ULONG32      PreviousPercent;                                                       
/*0x06C*/     ULONG32      LatestFrequencyPercent;                                                
/*0x070*/     UINT8        Force;                                                                 
/*0x071*/     UINT8        UseQosUpdateLock;                                                      
/*0x072*/     UINT8        _PADDING2_[0x6];                                                       
/*0x078*/     UINT64       QosUpdateLock;                                                         
          }PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT;                                          
                                                                                                  
          typedef struct _PROC_PERF_QOS_CLASS_POLICY      // 10 elements, 0x1C bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      MaxPolicyPercent;                                                  
/*0x004*/     ULONG32      MaxEquivalentFrequencyPercent;                                     
/*0x008*/     ULONG32      MinPolicyPercent;                                                  
/*0x00C*/     ULONG32      AutonomousActivityWindow;                                          
/*0x010*/     ULONG32      EnergyPerfPreference;                                              
/*0x014*/     UINT8        ProvideGuidance;                                                   
/*0x015*/     UINT8        AllowThrottling;                                                   
/*0x016*/     UINT8        PerfBoostMode;                                                     
/*0x017*/     UINT8        LatencyHintPerf;                                                   
/*0x018*/     UINT8        TrackDesiredCrossClass;                                            
/*0x019*/     UINT8        _PADDING0_[0x3];                                                   
          }PROC_PERF_QOS_CLASS_POLICY, *PPROC_PERF_QOS_CLASS_POLICY;                                    
                                                                                              
          typedef struct _PROC_PERF_DOMAIN                          // 49 elements, 0x2A8 bytes (sizeof)                                                                                            
          {                                                                                                                                                                                         
/*0x000*/     struct _LIST_ENTRY Link;                              // 2 elements, 0x10 bytes (sizeof)                                                                                              
/*0x010*/     UINT64       Master;                                  // struct _KPRCB*                                                                                                               
/*0x018*/     struct _KAFFINITY_EX Members;                         // 4 elements, 0xA8 bytes (sizeof)                                                                                              
/*0x0C0*/     UINT64       DomainContext;                                                                                                                                                           
/*0x0C8*/     ULONG32      ProcessorCount;                                                                                                                                                          
/*0x0CC*/     UINT8        EfficiencyClass;                                                                                                                                                         
/*0x0CD*/     UINT8        NominalPerformanceClass;                                                                                                                                                 
/*0x0CE*/     UINT8        HighestPerformanceClass;                                                                                                                                                 
/*0x0CF*/     UINT8        Spare;                                                                                                                                                                   
/*0x0D0*/     UINT64       Processors;                              // struct _PROC_PERF_CONSTRAINT*                                                                                                
/*0x0D8*/     UINT64       GetFFHThrottleState;                     // FUNCT_00EF_0ADC_GetFFHThrottleState*                                                                                         
/*0x0E0*/     UINT64       TimeWindowHandler;                       // FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* 
/*0x0E8*/     UINT64       BoostPolicyHandler;                      // FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* 
/*0x0F0*/     UINT64       BoostModeHandler;                        // FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* 
/*0x0F8*/     UINT64       AutonomousActivityWindowHandler;         // FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* 
/*0x100*/     UINT64       AutonomousModeHandler;                   // FUNCT_00EF_0ADF_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* 
/*0x108*/     UINT64       ReinitializeHandler;                     // FUNCT_00EF_0AE3_ReinitializeHandler*                                                                                         
/*0x110*/     UINT64       PerfSelectionHandler;                    // FUNCT_0009_0AE6_PerfSelectionHandler*                                                                                        
/*0x118*/     UINT64       PerfControlHandler;                      // FUNCT_00EF_0AF1_PerfControlHandler_DomainPerfControlHandler*                                                                 
/*0x120*/     UINT64       DomainPerfControlHandler;                // FUNCT_00EF_0AF1_PerfControlHandler_DomainPerfControlHandler*                                                                 
/*0x128*/     ULONG32      MaxFrequency;                                                                                                                                                            
/*0x12C*/     ULONG32      NominalFrequency;                                                                                                                                                        
/*0x130*/     ULONG32      MaxPercent;                                                                                                                                                              
/*0x134*/     ULONG32      MinPerfPercent;                                                                                                                                                          
/*0x138*/     ULONG32      MinThrottlePercent;                                                                                                                                                      
/*0x13C*/     ULONG32      AdvertizedMaximumFrequency;                                                                                                                                              
/*0x140*/     UINT64       MinimumRelativePerformance;                                                                                                                                              
/*0x148*/     UINT64       NominalRelativePerformance;                                                                                                                                              
/*0x150*/     UINT8        NominalRelativePerformancePercent;                                                                                                                                       
/*0x151*/     UINT8        Coordination;                                                                                                                                                            
/*0x152*/     UINT8        HardPlatformCap;                                                                                                                                                         
/*0x153*/     UINT8        AffinitizeControl;                                                                                                                                                       
/*0x154*/     UINT8        EfficientThrottle;                                                                                                                                                       
/*0x155*/     UINT8        AllowSchedulerDirectedPerfStates;                                                                                                                                        
/*0x156*/     UINT8        InitiateAllProcessors;                                                                                                                                                   
/*0x157*/     UINT8        AutonomousMode;                                                                                                                                                          
/*0x158*/     UINT8        ProvideGuidance;                                                                                                                                                         
/*0x159*/     UINT8        _PADDING0_[0x3];                                                                                                                                                         
/*0x15C*/     ULONG32      DesiredPercent;                                                                                                                                                          
/*0x160*/     ULONG32      GuaranteedPercent;                                                                                                                                                       
/*0x164*/     UINT8        EngageResponsivenessOverrides;                                                                                                                                           
/*0x165*/     UINT8        _PADDING1_[0x3];                                                                                                                                                         
/*0x168*/     struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[4];                                                                                                                                    
/*0x1D8*/     ULONG32      QosDisableReasons[4];                                                                                                                                                    
/*0x1E8*/     UINT16       QosEquivalencyMasks[4];                                                                                                                                                  
/*0x1F0*/     UINT8        QosSupported;                                                                                                                                                            
/*0x1F1*/     UINT8        _PADDING2_[0x3];                                                                                                                                                         
/*0x1F4*/     ULONG32      SelectionGeneration;                                                                                                                                                     
/*0x1F8*/     struct _PERF_CONTROL_STATE_SELECTION QosSelection[4];                                                                                                                                 
/*0x298*/     UINT64       PerfChangeTime;                                                                                                                                                          
/*0x2A0*/     ULONG32      PerfChangeIntervalCount;                                                                                                                                                 
/*0x2A4*/     UINT8        Force;                                                                                                                                                                   
/*0x2A5*/     UINT8        _PADDING3_[0x3];                                                                                                                                                         
          }PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN;                                                                                                                                                    
                                                                                                                                                                                                    
          typedef struct _PROC_PERF_HISTORY_ENTRY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Utility;                                                 
/*0x002*/     UINT16       AffinitizedUtility;                                      
/*0x004*/     UINT8        Frequency;                                               
/*0x005*/     UINT8        TaggedPercent[2];                                        
/*0x007*/     UINT8        _PADDING0_[0x1];                                         
          }PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY;                                  
                                                                                    
          typedef struct _PROC_PERF_HISTORY                   // 7 elements, 0x24 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Count;                                                                
/*0x004*/     ULONG32      Slot;                                                                 
/*0x008*/     ULONG32      UtilityTotal;                                                         
/*0x00C*/     ULONG32      AffinitizedUtilityTotal;                                              
/*0x010*/     ULONG32      FrequencyTotal;                                                       
/*0x014*/     ULONG32      TaggedPercentTotal[2];                                                
/*0x01C*/     struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];                                    
          }PROC_PERF_HISTORY, *PPROC_PERF_HISTORY;                                               
                                                                                                 
          typedef struct _PROC_PERF_LOAD        // 2 elements, 0x2 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        BusyPercentage;                                        
/*0x001*/     UINT8        FrequencyPercentage;                                   
          }PROC_PERF_LOAD, *PPROC_PERF_LOAD;                                      
                                                                                  
          typedef struct _PROCESS_ENERGY_VALUES                            // 16 elements, 0x110 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     UINT64       Cycles[2][4];                                                                        
/*0x040*/     UINT64       DiskEnergy;                                                                          
/*0x048*/     UINT64       NetworkTailEnergy;                                                                   
/*0x050*/     UINT64       MBBTailEnergy;                                                                       
/*0x058*/     UINT64       NetworkTxRxBytes;                                                                    
/*0x060*/     UINT64       MBBTxRxBytes;                                                                        
              union                                                        // 2 elements, 0x18 bytes (sizeof)   
              {                                                                                                 
/*0x068*/         union _ENERGY_STATE_DURATION Durations[3];                                                    
                  struct                                                   // 3 elements, 0x18 bytes (sizeof)   
                  {                                                                                             
/*0x068*/             union _ENERGY_STATE_DURATION ForegroundDuration;     // 4 elements, 0x8 bytes (sizeof)    
/*0x070*/             union _ENERGY_STATE_DURATION DesktopVisibleDuration; // 4 elements, 0x8 bytes (sizeof)    
/*0x078*/             union _ENERGY_STATE_DURATION PSMForegroundDuration;  // 4 elements, 0x8 bytes (sizeof)    
                  };                                                                                            
              };                                                                                                
/*0x080*/     ULONG32      CompositionRendered;                                                                 
/*0x084*/     ULONG32      CompositionDirtyGenerated;                                                           
/*0x088*/     ULONG32      CompositionDirtyPropagated;                                                          
/*0x08C*/     ULONG32      Reserved1;                                                                           
/*0x090*/     UINT64       AttributedCycles[2][4];                                                              
/*0x0D0*/     UINT64       WorkOnBehalfCycles[2][4];                                                            
          }PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES;                                                      
                                                                                                                
          typedef union _TIMELINE_BITMAP // 3 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT64       Value;                                          
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      EndTime;                                    
/*0x004*/         ULONG32      Bitmap;                                     
              };                                                           
          }TIMELINE_BITMAP, *PTIMELINE_BITMAP;                                  
                                                                           
          typedef struct _PROCESS_ENERGY_VALUES_EXTENSION                        // 23 elements, 0xA0 bytes (sizeof) 
          {                                                                                                          
              union                                                              // 2 elements, 0x70 bytes (sizeof)  
              {                                                                                                      
/*0x000*/         union _TIMELINE_BITMAP Timelines[14];                                                              
                  struct                                                         // 14 elements, 0x70 bytes (sizeof) 
                  {                                                                                                  
/*0x000*/             union _TIMELINE_BITMAP CpuTimeline;                        // 3 elements, 0x8 bytes (sizeof)   
/*0x008*/             union _TIMELINE_BITMAP DiskTimeline;                       // 3 elements, 0x8 bytes (sizeof)   
/*0x010*/             union _TIMELINE_BITMAP NetworkTimeline;                    // 3 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _TIMELINE_BITMAP MBBTimeline;                        // 3 elements, 0x8 bytes (sizeof)   
/*0x020*/             union _TIMELINE_BITMAP ForegroundTimeline;                 // 3 elements, 0x8 bytes (sizeof)   
/*0x028*/             union _TIMELINE_BITMAP DesktopVisibleTimeline;             // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/             union _TIMELINE_BITMAP CompositionRenderedTimeline;        // 3 elements, 0x8 bytes (sizeof)   
/*0x038*/             union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;  // 3 elements, 0x8 bytes (sizeof)   
/*0x040*/             union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline; // 3 elements, 0x8 bytes (sizeof)   
/*0x048*/             union _TIMELINE_BITMAP InputTimeline;                      // 3 elements, 0x8 bytes (sizeof)   
/*0x050*/             union _TIMELINE_BITMAP AudioInTimeline;                    // 3 elements, 0x8 bytes (sizeof)   
/*0x058*/             union _TIMELINE_BITMAP AudioOutTimeline;                   // 3 elements, 0x8 bytes (sizeof)   
/*0x060*/             union _TIMELINE_BITMAP DisplayRequiredTimeline;            // 3 elements, 0x8 bytes (sizeof)   
/*0x068*/             union _TIMELINE_BITMAP KeyboardInputTimeline;              // 3 elements, 0x8 bytes (sizeof)   
                  };                                                                                                 
              };                                                                                                     
              union                                                              // 2 elements, 0x28 bytes (sizeof)  
              {                                                                                                      
/*0x070*/         union _ENERGY_STATE_DURATION Durations[5];                                                         
                  struct                                                         // 5 elements, 0x28 bytes (sizeof)  
                  {                                                                                                  
/*0x070*/             union _ENERGY_STATE_DURATION InputDuration;                // 4 elements, 0x8 bytes (sizeof)   
/*0x078*/             union _ENERGY_STATE_DURATION AudioInDuration;              // 4 elements, 0x8 bytes (sizeof)   
/*0x080*/             union _ENERGY_STATE_DURATION AudioOutDuration;             // 4 elements, 0x8 bytes (sizeof)   
/*0x088*/             union _ENERGY_STATE_DURATION DisplayRequiredDuration;      // 4 elements, 0x8 bytes (sizeof)   
/*0x090*/             union _ENERGY_STATE_DURATION PSMBackgroundDuration;        // 4 elements, 0x8 bytes (sizeof)   
                  };                                                                                                 
              };                                                                                                     
/*0x098*/     ULONG32      KeyboardInput;                                                                            
/*0x09C*/     ULONG32      MouseInput;                                                                               
          }PROCESS_ENERGY_VALUES_EXTENSION, *PPROCESS_ENERGY_VALUES_EXTENSION;                                       
                                                                                                                     
          typedef struct _PROCESS_EXTENDED_ENERGY_VALUES         // 2 elements, 0x1B0 bytes (sizeof)  
          {                                                                                           
/*0x000*/     struct _PROCESS_ENERGY_VALUES Base;                // 16 elements, 0x110 bytes (sizeof) 
/*0x110*/     struct _PROCESS_ENERGY_VALUES_EXTENSION Extension; // 23 elements, 0xA0 bytes (sizeof)  
          }PROCESS_EXTENDED_ENERGY_VALUES, *PPROCESS_EXTENDED_ENERGY_VALUES;                                     
                                                                                                      
          typedef struct _PROCESSOR_IDLE_DEPENDENCY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      ProcessorIndex;                                            
/*0x004*/     UINT8        ExpectedState;                                             
/*0x005*/     UINT8        AllowDeeperStates;                                         
/*0x006*/     UINT8        LooseDependency;                                           
/*0x007*/     UINT8        _PADDING0_[0x1];                                           
          }PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY;                                  
                                                                                      
          typedef struct _PROCESSOR_NUMBER // 3 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT16       Group;                                            
/*0x002*/     UINT8        Number;                                           
/*0x003*/     UINT8        Reserved;                                         
          }PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;                                  
                                                                             
          typedef struct _PROCESSOR_PROFILE_CONTROL_AREA // 1 elements, 0x60 bytes (sizeof)  
          {                                                                                  
/*0x000*/     struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;  // 12 elements, 0x60 bytes (sizeof) 
          }PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA;                                    
                                                                                             
          typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP // 1 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       Map[2];                                                           
          }PS_MITIGATION_AUDIT_OPTIONS_MAP, *PPS_MITIGATION_AUDIT_OPTIONS_MAP;                                   
                                                                                             
          typedef struct _PS_MITIGATION_OPTIONS_MAP // 1 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Map[2];                                                     
          }PS_MITIGATION_OPTIONS_MAP, *PPS_MITIGATION_OPTIONS_MAP;                                   
                                                                                       
          typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS // 6 elements, 0x1 bytes (sizeof) 
          {                                                                                   
              struct                                        // 5 elements, 0x1 bytes (sizeof) 
              {                                                                               
/*0x000*/         UINT8        Trustlet : 1;                // 0 BitPosition                  
/*0x000*/         UINT8        Ntos : 1;                    // 1 BitPosition                  
/*0x000*/         UINT8        WriteHandle : 1;             // 2 BitPosition                  
/*0x000*/         UINT8        ReadHandle : 1;              // 3 BitPosition                  
/*0x000*/         UINT8        Reserved : 4;                // 4 BitPosition                  
              };                                                                              
/*0x000*/     UINT8        AccessRights;                                                      
          }PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, *PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;                                  
                                                                                              
          typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE                          // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                                     
              union                                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                                 
                  struct                                                      // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                                             
/*0x000*/             UINT8        Version;                                                                     
/*0x001*/             UINT8        DataCount;                                                                   
/*0x002*/             UINT8        SemanticType;                                                                
/*0x003*/             union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights; // 6 elements, 0x1 bytes (sizeof) 
                  };                                                                                            
/*0x000*/         ULONG32      AttributeType;                                                                   
              };                                                                                                
          }PS_TRUSTLET_ATTRIBUTE_TYPE, *PPS_TRUSTLET_ATTRIBUTE_TYPE;                                            
                                                                                                                
          typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER          // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType; // 5 elements, 0x4 bytes (sizeof) 
              struct                                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                   
/*0x004*/         ULONG32      InstanceNumber : 8;              // 0 BitPosition                  
/*0x004*/         ULONG32      Reserved : 24;                   // 8 BitPosition                  
              };                                                                                  
          }PS_TRUSTLET_ATTRIBUTE_HEADER, *PPS_TRUSTLET_ATTRIBUTE_HEADER;                                  
                                                                                                  
          typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header; // 3 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       Data[1];                                                           
          }PS_TRUSTLET_ATTRIBUTE_DATA, *PPS_TRUSTLET_ATTRIBUTE_DATA;                                   
                                                                                              
          typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES         // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       TrustletIdentity;                                                       
/*0x008*/     struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];                                    
          }PS_TRUSTLET_CREATE_ATTRIBUTES, *PPS_TRUSTLET_CREATE_ATTRIBUTES;                                   
                                                                                                   
          typedef struct _PS_TRUSTLET_TKSESSION_ID // 1 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       SessionId[4];                                              
          }PS_TRUSTLET_TKSESSION_ID, *PPS_TRUSTLET_TKSESSION_ID;                                   
                                                                                      
typedef struct _PSP_STORAGE // 0 elements, 0x0 bytes (sizeof) 
{                                                             
}PSP_STORAGE, *PPSP_STORAGE;                                  
                                                              
          typedef struct _QUAD                     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 2 elements, 0x8 bytes (sizeof) 
              {                                                                      
/*0x000*/         INT64        UseThisFieldToCopy;                                   
/*0x000*/         FLOAT64      DoNotUseThisField;                                    
              };                                                                     
          }QUAD, *PQUAD;                                                             
                                                                                     
          typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME // 3 elements, 0x18 bytes (sizeof)             
          {                                                                                                 
/*0x000*/     UINT64       Previous;                         // struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* 
/*0x008*/     UINT64       ActivationContext;                // struct _ACTIVATION_CONTEXT*                 
/*0x010*/     ULONG32      Flags;                                                                           
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                 
          }RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME;                                               
                                                                                                            
          typedef struct _RTL_CHASH_ENTRY // 1 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Key;                                             
          }RTL_CHASH_ENTRY, *PRTL_CHASH_ENTRY;                                  
                                                                            
          typedef struct _RTL_CHASH_TABLE   // 4 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Table;           // struct _RTL_CHASH_ENTRY*        
/*0x008*/     ULONG32      EntrySizeShift;                                     
/*0x00C*/     ULONG32      EntryMax;                                           
/*0x010*/     ULONG32      EntryCount;                                         
/*0x014*/     UINT8        _PADDING0_[0x4];                                    
          }RTL_CHASH_TABLE, *PRTL_CHASH_TABLE;                                   
                                                                               
          typedef struct _RTL_CRITICAL_SECTION_DEBUG  // 9 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT16       Type;                                                         
/*0x002*/     UINT16       CreatorBackTraceIndex;                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                              
/*0x008*/     UINT64       CriticalSection;           // struct _RTL_CRITICAL_SECTION*   
/*0x010*/     struct _LIST_ENTRY ProcessLocksList;    // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     ULONG32      EntryCount;                                                   
/*0x024*/     ULONG32      ContentionCount;                                              
/*0x028*/     ULONG32      Flags;                                                        
/*0x02C*/     UINT16       CreatorBackTraceIndexHigh;                                    
/*0x02E*/     UINT16       SpareUSHORT;                                                  
          }RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;                                   
                                                                                         
          typedef struct _STRING            // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;          // CHAR*                           
          }STRING, *PSTRING;                                                   
                                                                               
          typedef struct _RTL_DRIVE_LETTER_CURDIR // 4 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT16       Flags;                                                    
/*0x002*/     UINT16       Length;                                                   
/*0x004*/     ULONG32      TimeStamp;                                                
/*0x008*/     struct _STRING DosPath;             // 3 elements, 0x10 bytes (sizeof) 
          }RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;                                   
                                                                                     
          typedef struct _RTL_DYNAMIC_HASH_TABLE // 9 elements, 0x28 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Flags;                                                   
/*0x004*/     ULONG32      Shift;                                                   
/*0x008*/     ULONG32      TableSize;                                               
/*0x00C*/     ULONG32      Pivot;                                                   
/*0x010*/     ULONG32      DivisorMask;                                             
/*0x014*/     ULONG32      NumEntries;                                              
/*0x018*/     ULONG32      NonEmptyBuckets;                                         
/*0x01C*/     ULONG32      NumEnumerators;                                          
/*0x020*/     UINT64       Directory;            // VOID*                           
          }RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE;                                   
                                                                                    
          typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT64       ChainHead;                    // struct _LIST_ENTRY*             
/*0x008*/     UINT64       PrevLinkage;                  // struct _LIST_ENTRY*             
/*0x010*/     UINT64       Signature;                                                       
          }RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;                                   
                                                                                            
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY // 2 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY Linkage;              // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Signature;                                                     
          }RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY;                                   
                                                                                          
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR       // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                          
              union                                               // 2 elements, 0x18 bytes (sizeof) 
              {                                                                                      
/*0x000*/         struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // 2 elements, 0x18 bytes (sizeof) 
/*0x000*/         UINT64       CurEntry;                          // struct _LIST_ENTRY*             
              };                                                                                     
/*0x018*/     UINT64       ChainHead;                             // struct _LIST_ENTRY*             
/*0x020*/     ULONG32      BucketIndex;                                                              
/*0x024*/     UINT8        _PADDING0_[0x4];                                                          
          }RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;                                   
                                                                                                     
          typedef struct _RTL_HASH_ENTRY            // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _SINGLE_LIST_ENTRY BucketLink; // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       Key;                                                        
          }RTL_HASH_ENTRY, *PRTL_HASH_ENTRY;                                           
                                                                                       
          typedef struct _RTL_HASH_TABLE         // 4 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      EntryCount;                                              
              struct                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x004*/         ULONG32      MaskBitCount : 5; // 0 BitPosition                   
/*0x004*/         ULONG32      BucketCount : 27; // 5 BitPosition                   
              };                                                                    
/*0x008*/     UINT64       Buckets;              // struct _SINGLE_LIST_ENTRY*      
          }RTL_HASH_TABLE, *PRTL_HASH_TABLE;                                        
                                                                                    
          typedef struct _RTL_HASH_TABLE_ITERATOR // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Hash;                  // struct _RTL_HASH_TABLE*         
/*0x008*/     UINT64       HashEntry;             // struct _RTL_HASH_ENTRY*         
/*0x010*/     UINT64       Bucket;                // struct _SINGLE_LIST_ENTRY*      
          }RTL_HASH_TABLE_ITERATOR, *PRTL_HASH_TABLE_ITERATOR;                                   
                                                                                     
          typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS // 2 elements, 0x8 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _RTL_HP_LFH_CONFIG LfhConfigs;    // 2 elements, 0x4 bytes (sizeof) 
/*0x004*/     struct _RTL_HP_VS_CONFIG VsConfigs;      // 1 elements, 0x4 bytes (sizeof) 
          }RTL_HP_SUB_ALLOCATOR_CONFIGS, *PRTL_HP_SUB_ALLOCATOR_CONFIGS;                                  
                                                                                         
          typedef struct _RTL_SPLAY_LINKS // 3 elements, 0x18 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       Parent;        // struct _RTL_SPLAY_LINKS*        
/*0x008*/     UINT64       LeftChild;     // struct _RTL_SPLAY_LINKS*        
/*0x010*/     UINT64       RightChild;    // struct _RTL_SPLAY_LINKS*        
          }RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS;                                   
                                                                             
          typedef struct _RTL_STACK_DATABASE_LOCK // 1 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _RTL_SRWLOCK Lock;           // 7 elements, 0x8 bytes (sizeof) 
          }RTL_STACK_DATABASE_LOCK, *PRTL_STACK_DATABASE_LOCK;                                  
                                                                                    
          typedef struct _RTL_STD_LIST_ENTRY // 1 elements, 0x8 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Next;             // struct _RTL_STD_LIST_ENTRY*    
          }RTL_STD_LIST_ENTRY, *PRTL_STD_LIST_ENTRY;                                  
                                                                               
          typedef struct _RTL_STACK_TRACE_ENTRY     // 8 elements, 0x110 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _RTL_STD_LIST_ENTRY HashChain; // 1 elements, 0x8 bytes (sizeof)   
              struct                                // 2 elements, 0x2 bytes (sizeof)   
              {                                                                         
/*0x008*/         UINT16       TraceCount : 11;     // 0 BitPosition                    
/*0x008*/         UINT16       BlockDepth : 5;      // 11 BitPosition                   
              };                                                                        
/*0x00A*/     UINT16       IndexHigh;                                                   
/*0x00C*/     UINT16       Index;                                                       
/*0x00E*/     UINT16       Depth;                                                       
              union                                 // 2 elements, 0x100 bytes (sizeof) 
              {                                                                         
/*0x010*/         UINT64       BackTrace[32];       // VOID*                            
/*0x010*/         struct _SLIST_ENTRY FreeChain;    // 1 elements, 0x10 bytes (sizeof)  
              };                                                                        
          }RTL_STACK_TRACE_ENTRY, *PRTL_STACK_TRACE_ENTRY;                                    
                                                                                        
          typedef struct _RTL_STACKDB_CONTEXT           // 7 elements, 0x48 bytes (sizeof)                                          
          {                                                                                                                         
/*0x000*/     struct _RTL_HASH_TABLE StackSegmentTable; // 4 elements, 0x10 bytes (sizeof)                                          
/*0x010*/     struct _RTL_HASH_TABLE StackEntryTable;   // 4 elements, 0x10 bytes (sizeof)                                          
/*0x020*/     struct _RTL_SRWLOCK StackEntryTableLock;  // 7 elements, 0x8 bytes (sizeof)                                           
/*0x028*/     struct _RTL_SRWLOCK SegmentTableLock;     // 7 elements, 0x8 bytes (sizeof)                                           
/*0x030*/     UINT64       Allocate;                    // FUNCT_00F2_1AC9_Allocate*                                                
/*0x038*/     UINT64       Free;                        // FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_Free* 
/*0x040*/     UINT64       AllocatorContext;            // VOID*                                                                    
          }RTL_STACKDB_CONTEXT, *PRTL_STACKDB_CONTEXT;                                                                              
                                                                                                                                    
          typedef struct _RTL_STD_LIST_HEAD         // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Next;                    // struct _RTL_STD_LIST_ENTRY*     
/*0x008*/     struct _RTL_STACK_DATABASE_LOCK Lock; // 1 elements, 0x8 bytes (sizeof)  
          }RTL_STD_LIST_HEAD, *PRTL_STD_LIST_HEAD;                                     
                                                                                       
          typedef struct _RTL_TRACE_BLOCK   // 8 elements, 0x38 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      Magic;                                              
/*0x004*/     ULONG32      Count;                                              
/*0x008*/     ULONG32      Size;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
/*0x010*/     UINT64       UserCount;                                          
/*0x018*/     UINT64       UserSize;                                           
/*0x020*/     UINT64       UserContext;     // VOID*                           
/*0x028*/     UINT64       Next;            // struct _RTL_TRACE_BLOCK*        
/*0x030*/     UINT64       Trace;           // VOID**                          
          }RTL_TRACE_BLOCK, *PRTL_TRACE_BLOCK;                                   
                                                                               
          typedef struct _RTL_TRACE_DATABASE     // 14 elements, 0xC0 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Magic;                                                    
/*0x004*/     ULONG32      Flags;                                                    
/*0x008*/     ULONG32      Tag;                                                      
/*0x00C*/     UINT8        _PADDING0_[0x4];                                          
/*0x010*/     UINT64       SegmentList;          // struct _RTL_TRACE_SEGMENT*       
/*0x018*/     UINT64       MaximumSize;                                              
/*0x020*/     UINT64       CurrentSize;                                              
/*0x028*/     UINT64       Owner;                // VOID*                            
/*0x030*/     struct _RTL_CRITICAL_SECTION Lock; // 6 elements, 0x28 bytes (sizeof)  
/*0x058*/     ULONG32      NoOfBuckets;                                              
/*0x05C*/     UINT8        _PADDING1_[0x4];                                          
/*0x060*/     UINT64       Buckets;              // struct _RTL_TRACE_BLOCK**        
/*0x068*/     UINT64       HashFunction;         // FUNCT_0009_1D6C_HashFunction*    
/*0x070*/     UINT64       NoOfTraces;                                               
/*0x078*/     UINT64       NoOfHits;                                                 
/*0x080*/     ULONG32      HashCounter[16];                                          
          }RTL_TRACE_DATABASE, *PRTL_TRACE_DATABASE;                                    
                                                                                     
          typedef struct _RTL_TRACE_SEGMENT // 7 elements, 0x38 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      Magic;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Database;        // struct _RTL_TRACE_DATABASE*     
/*0x010*/     UINT64       NextSegment;     // struct _RTL_TRACE_SEGMENT*      
/*0x018*/     UINT64       TotalSize;                                          
/*0x020*/     UINT64       SegmentStart;    // CHAR*                           
/*0x028*/     UINT64       SegmentEnd;      // CHAR*                           
/*0x030*/     UINT64       SegmentFree;     // CHAR*                           
          }RTL_TRACE_SEGMENT, *PRTL_TRACE_SEGMENT;                                   
                                                                               
          typedef struct _RTL_UMS_CONTEXT                       // 20 elements, 0x520 bytes (sizeof) 
          {                                                                                          
/*0x000*/     struct _SINGLE_LIST_ENTRY Link;                   // 1 elements, 0x8 bytes (sizeof)    
/*0x008*/     UINT8        _PADDING0_[0x8];                                                          
/*0x010*/     struct _CONTEXT Context;                          // 64 elements, 0x4D0 bytes (sizeof) 
/*0x4E0*/     UINT64       Teb;                                 // VOID*                             
/*0x4E8*/     UINT64       UserContext;                         // VOID*                             
              union                                             // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                      
                  struct                                        // 7 elements, 0x4 bytes (sizeof)    
                  {                                                                                  
/*0x4F0*/             ULONG32      ScheduledThread : 1;         // 0 BitPosition                     
/*0x4F0*/             ULONG32      Suspended : 1;               // 1 BitPosition                     
/*0x4F0*/             ULONG32      VolatileContext : 1;         // 2 BitPosition                     
/*0x4F0*/             ULONG32      Terminated : 1;              // 3 BitPosition                     
/*0x4F0*/             ULONG32      DebugActive : 1;             // 4 BitPosition                     
/*0x4F0*/             ULONG32      RunningOnSelfThread : 1;     // 5 BitPosition                     
/*0x4F0*/             ULONG32      DenyRunningOnSelfThread : 1; // 6 BitPosition                     
                  };                                                                                 
/*0x4F0*/         LONG32       Flags;                                                                
              };                                                                                     
              union                                             // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                      
                  struct                                        // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                                  
/*0x4F8*/             UINT64       KernelUpdateLock : 2;        // 0 BitPosition                     
/*0x4F8*/             UINT64       PrimaryClientID : 62;        // 2 BitPosition                     
                  };                                                                                 
/*0x4F8*/         UINT64       ContextLock;                                                          
              };                                                                                     
/*0x500*/     UINT64       PrimaryUmsContext;                   // struct _RTL_UMS_CONTEXT*          
/*0x508*/     ULONG32      SwitchCount;                                                              
/*0x50C*/     ULONG32      KernelYieldCount;                                                         
/*0x510*/     ULONG32      MixedYieldCount;                                                          
/*0x514*/     ULONG32      YieldCount;                                                               
/*0x518*/     UINT8        _PADDING1_[0x8];                                                          
          }RTL_UMS_CONTEXT, *PRTL_UMS_CONTEXT;                                                       
                                                                                                     
          typedef struct _RTL_USER_PROCESS_PARAMETERS                // 34 elements, 0x420 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      MaximumLength;                                                                 
/*0x004*/     ULONG32      Length;                                                                        
/*0x008*/     ULONG32      Flags;                                                                         
/*0x00C*/     ULONG32      DebugFlags;                                                                    
/*0x010*/     UINT64       ConsoleHandle;                            // VOID*                             
/*0x018*/     ULONG32      ConsoleFlags;                                                                  
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                               
/*0x020*/     UINT64       StandardInput;                            // VOID*                             
/*0x028*/     UINT64       StandardOutput;                           // VOID*                             
/*0x030*/     UINT64       StandardError;                            // VOID*                             
/*0x038*/     struct _CURDIR CurrentDirectory;                       // 2 elements, 0x18 bytes (sizeof)   
/*0x050*/     struct _UNICODE_STRING DllPath;                        // 3 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _UNICODE_STRING ImagePathName;                  // 3 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _UNICODE_STRING CommandLine;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x080*/     UINT64       Environment;                              // VOID*                             
/*0x088*/     ULONG32      StartingX;                                                                     
/*0x08C*/     ULONG32      StartingY;                                                                     
/*0x090*/     ULONG32      CountX;                                                                        
/*0x094*/     ULONG32      CountY;                                                                        
/*0x098*/     ULONG32      CountCharsX;                                                                   
/*0x09C*/     ULONG32      CountCharsY;                                                                   
/*0x0A0*/     ULONG32      FillAttribute;                                                                 
/*0x0A4*/     ULONG32      WindowFlags;                                                                   
/*0x0A8*/     ULONG32      ShowWindowFlags;                                                               
/*0x0AC*/     UINT8        _PADDING1_[0x4];                                                               
/*0x0B0*/     struct _UNICODE_STRING WindowTitle;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _UNICODE_STRING DesktopInfo;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     struct _UNICODE_STRING ShellInfo;                      // 3 elements, 0x10 bytes (sizeof)   
/*0x0E0*/     struct _UNICODE_STRING RuntimeData;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0F0*/     struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];                                      
/*0x3F0*/     UINT64       EnvironmentSize;                                                               
/*0x3F8*/     UINT64       EnvironmentVersion;                                                            
/*0x400*/     UINT64       PackageDependencyData;                    // VOID*                             
/*0x408*/     ULONG32      ProcessGroupId;                                                                
/*0x40C*/     ULONG32      LoaderThreads;                                                                 
/*0x410*/     struct _UNICODE_STRING RedirectionDllName;             // 3 elements, 0x10 bytes (sizeof)   
          }RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;                                     
                                                                                                          
          typedef struct _RTLP_HP_ALLOC_TRACKER              // 2 elements, 0x48 bytes (sizeof)  
          {                                                                                      
/*0x000*/     struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap; // 11 elements, 0x40 bytes (sizeof) 
/*0x040*/     UINT64       BaseAddress;                                                          
          }RTLP_HP_ALLOC_TRACKER, *PRTLP_HP_ALLOC_TRACKER;                                       
                                                                                                 
          typedef struct _RTLP_HP_HEAP_GLOBALS                    // 4 elements, 0x38 bytes (sizeof)   
          {                                                                                            
/*0x000*/     UINT64       HeapKey;                                                                    
/*0x008*/     UINT64       LfhKey;                                                                     
/*0x010*/     UINT64       FailureInfo;                           // struct _HEAP_FAILURE_INFORMATION* 
/*0x018*/     struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData; // 4 elements, 0x20 bytes (sizeof)   
          }RTLP_HP_HEAP_GLOBALS, *PRTLP_HP_HEAP_GLOBALS;                                               
                                                                                                       
          typedef struct _RTLP_HP_METADATA_HEAP_CTX // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Heap;                    // struct _SEGMENT_HEAP*           
/*0x008*/     union _RTL_RUN_ONCE InitOnce;         // 3 elements, 0x8 bytes (sizeof)  
          }RTLP_HP_METADATA_HEAP_CTX, *PRTLP_HP_METADATA_HEAP_CTX;                                   
                                                                                       
           typedef struct _RTLP_HP_HEAP_MANAGER                      // 5 elements, 0x30C8 bytes (sizeof) 
           {                                                                                              
/*0x000*/      UINT64       Globals;                                 // struct _RTLP_HP_HEAP_GLOBALS*     
/*0x008*/      struct _RTLP_HP_ALLOC_TRACKER AllocTracker;           // 2 elements, 0x48 bytes (sizeof)   
/*0x050*/      struct _HEAP_VAMGR_CTX VaMgr;                         // 4 elements, 0x3040 bytes (sizeof) 
/*0x3090*/     struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];                                        
/*0x30C0*/     struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs; // 2 elements, 0x8 bytes (sizeof)    
           }RTLP_HP_HEAP_MANAGER, *PRTLP_HP_HEAP_MANAGER;                                                 
                                                                                                          
          typedef union _RTLP_HP_LFH_PERF_FLAGS                 // 12 elements, 0x4 bytes (sizeof) 
          {                                                                                        
              struct                                            // 11 elements, 0x4 bytes (sizeof) 
              {                                                                                    
/*0x000*/         ULONG32      HotspotDetection : 1;            // 0 BitPosition                   
/*0x000*/         ULONG32      HotspotFullCommit : 1;           // 1 BitPosition                   
/*0x000*/         ULONG32      ActiveSubsegment : 1;            // 2 BitPosition                   
/*0x000*/         ULONG32      SmallerSubsegment : 1;           // 3 BitPosition                   
/*0x000*/         ULONG32      SingleAffinitySlot : 1;          // 4 BitPosition                   
/*0x000*/         ULONG32      ApplyLfhDecommitPolicy : 1;      // 5 BitPosition                   
/*0x000*/         ULONG32      EnableGarbageCollection : 1;     // 6 BitPosition                   
/*0x000*/         ULONG32      LargePagePreCommit : 1;          // 7 BitPosition                   
/*0x000*/         ULONG32      OpportunisticLargePreCommit : 1; // 8 BitPosition                   
/*0x000*/         ULONG32      LfhForcedAffinity : 1;           // 9 BitPosition                   
/*0x000*/         ULONG32      LfhCachelinePadding : 1;         // 10 BitPosition                  
              };                                                                                   
/*0x000*/     ULONG32      AllFlags;                                                               
          }RTLP_HP_LFH_PERF_FLAGS, *PRTLP_HP_LFH_PERF_FLAGS;                                       
                                                                                                   
          typedef struct _RTLP_HP_PADDING_HEADER // 2 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       PaddingSize;                                             
/*0x008*/     UINT64       Spare;                                                   
          }RTLP_HP_PADDING_HEADER, *PRTLP_HP_PADDING_HEADER;                                   
                                                                                    
typedef struct _SCSI_REQUEST_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}SCSI_REQUEST_BLOCK, *PSCSI_REQUEST_BLOCK;                                  
                                                                     
          typedef struct _SECTION_OBJECT_POINTERS // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       DataSectionObject;     // VOID*                           
/*0x008*/     UINT64       SharedCacheMap;        // VOID*                           
/*0x010*/     UINT64       ImageSectionObject;    // VOID*                           
          }SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS;                                   
                                                                                     
          typedef struct _SECURITY_DESCRIPTOR // 7 elements, 0x28 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Revision;                                             
/*0x001*/     UINT8        Sbz1;                                                 
/*0x002*/     UINT16       Control;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                      
/*0x008*/     UINT64       Owner;             // VOID*                           
/*0x010*/     UINT64       Group;             // VOID*                           
/*0x018*/     UINT64       Sacl;              // struct _ACL*                    
/*0x020*/     UINT64       Dacl;              // struct _ACL*                    
          }SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR;                                   
                                                                                 
          typedef struct _SECURITY_QUALITY_OF_SERVICE                // 4 elements, 0xC bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Length;                                                                     
/*0x004*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                   
/*0x008*/     UINT8        ContextTrackingMode;                                                        
/*0x009*/     UINT8        EffectiveOnly;                                                              
/*0x00A*/     UINT8        _PADDING0_[0x2];                                                            
          }SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;                                  
                                                                                                       
          typedef struct _SEGMENT_HEAP                            // 22 elements, 0x7C0 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _RTL_HP_ENV_HANDLE EnvHandle;                // 1 elements, 0x10 bytes (sizeof)   
/*0x010*/     ULONG32      Signature;                                                                  
/*0x014*/     ULONG32      GlobalFlags;                                                                
/*0x018*/     ULONG32      Interceptor;                                                                
/*0x01C*/     UINT16       ProcessHeapListIndex;                                                       
/*0x01E*/     UINT16       AllocatedFromMetadata : 1;             // 0 BitPosition                     
/*0x020*/     struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData; // 4 elements, 0x20 bytes (sizeof)   
/*0x040*/     UINT64       LargeMetadataLock;                                                          
/*0x048*/     struct _RTL_RB_TREE LargeAllocMetadata;             // 3 elements, 0x10 bytes (sizeof)   
/*0x058*/     UINT64       LargeReservedPages;                                                         
/*0x060*/     UINT64       LargeCommittedPages;                                                        
/*0x068*/     union _RTL_RUN_ONCE StackTraceInitVar;              // 3 elements, 0x8 bytes (sizeof)    
/*0x070*/     UINT8        _PADDING0_[0x10];                                                           
/*0x080*/     struct _HEAP_RUNTIME_MEMORY_STATS MemStats;         // 6 elements, 0x58 bytes (sizeof)   
/*0x0D8*/     UINT16       GlobalLockCount;                                                            
/*0x0DA*/     UINT8        _PADDING1_[0x2];                                                            
/*0x0DC*/     ULONG32      GlobalLockOwner;                                                            
/*0x0E0*/     UINT64       ContextExtendLock;                                                          
/*0x0E8*/     UINT64       AllocatedBase;                         // UINT8*                            
/*0x0F0*/     UINT64       UncommittedBase;                       // UINT8*                            
/*0x0F8*/     UINT64       ReservedLimit;                         // UINT8*                            
/*0x100*/     struct _HEAP_SEG_CONTEXT SegContexts[2];                                                 
/*0x280*/     struct _HEAP_VS_CONTEXT VsContext;                  // 10 elements, 0x78 bytes (sizeof)  
/*0x2F8*/     UINT8        _PADDING2_[0x8];                                                            
/*0x300*/     struct _HEAP_LFH_CONTEXT LfhContext;                // 10 elements, 0x4C0 bytes (sizeof) 
          }SEGMENT_HEAP, *PSEGMENT_HEAP;                                                               
                                                                                                       
          typedef struct _SEGMENT_HEAP_EXTRA         // 5 elements, 0x10 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT16       AllocationTag;                                               
              struct                                 // 2 elements, 0x1 bytes (sizeof)  
              {                                                                         
/*0x002*/         UINT8        InterceptorIndex : 4; // 0 BitPosition                   
/*0x002*/         UINT8        UserFlags : 4;        // 4 BitPosition                   
              };                                                                        
/*0x003*/     UINT8        ExtraSizeInUnits;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     UINT64       Settable;                 // VOID*                           
          }SEGMENT_HEAP_EXTRA, *PSEGMENT_HEAP_EXTRA;                                    
                                                                                        
typedef struct _SEP_LOGON_SESSION_REFERENCES // 0 elements, 0x0 bytes (sizeof) 
{                                                                              
}SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES;                                  
                                                                               
          typedef struct _SILO_USER_SHARED_DATA               // 9 elements, 0x248 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      ServiceSessionId;                                                      
/*0x004*/     ULONG32      ActiveConsoleId;                                                       
/*0x008*/     INT64        ConsoleSessionForegroundProcessId;                                     
/*0x010*/     enum _NT_PRODUCT_TYPE NtProductType;                                                
/*0x014*/     ULONG32      SuiteMask;                                                             
/*0x018*/     ULONG32      SharedUserSessionId;                                                   
/*0x01C*/     UINT8        IsMultiSessionSku;                                                     
/*0x01D*/     UINT8        _PADDING0_[0x1];                                                       
/*0x01E*/     WCHAR        NtSystemRoot[260];                                                     
/*0x226*/     UINT16       UserModeGlobalLogger[16];                                              
/*0x246*/     UINT8        _PADDING1_[0x2];                                                       
          }SILO_USER_SHARED_DATA, *PSILO_USER_SHARED_DATA;                                        
                                                                                                  
          typedef struct _SINGLE_LIST_ENTRY32 // 1 elements, 0x4 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Next;                                                
          }SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32;                                  
                                                                                
          typedef struct _STACK_TRACE_DATABASE          // 21 elements, 0x2F0 bytes (sizeof) 
          {                                                                                  
              union                                     // 2 elements, 0x68 bytes (sizeof)   
              {                                                                              
/*0x000*/         CHAR         Reserved[104];                                                
/*0x000*/         struct _RTL_STACK_DATABASE_LOCK Lock; // 1 elements, 0x8 bytes (sizeof)    
              };                                                                             
/*0x068*/     UINT64       Reserved2;                   // VOID*                             
/*0x070*/     UINT64       PeakHashCollisionListLength;                                      
/*0x078*/     UINT64       LowerMemoryStart;            // VOID*                             
/*0x080*/     UINT8        PreCommitted;                                                     
/*0x081*/     UINT8        DumpInProgress;                                                   
/*0x082*/     UINT8        _PADDING0_[0x6];                                                  
/*0x088*/     UINT64       CommitBase;                  // VOID*                             
/*0x090*/     UINT64       CurrentLowerCommitLimit;     // VOID*                             
/*0x098*/     UINT64       CurrentUpperCommitLimit;     // VOID*                             
/*0x0A0*/     UINT64       NextFreeLowerMemory;         // CHAR*                             
/*0x0A8*/     UINT64       NextFreeUpperMemory;         // CHAR*                             
/*0x0B0*/     ULONG32      NumberOfEntriesLookedUp;                                          
/*0x0B4*/     ULONG32      NumberOfEntriesAdded;                                             
/*0x0B8*/     UINT64       EntryIndexArray;             // struct _RTL_STACK_TRACE_ENTRY**   
/*0x0C0*/     ULONG32      NumberOfEntriesAllocated;                                         
/*0x0C4*/     ULONG32      NumberOfEntriesAvailable;                                         
/*0x0C8*/     ULONG32      NumberOfAllocationFailures;                                       
/*0x0CC*/     UINT8        _PADDING1_[0x4];                                                  
/*0x0D0*/     union _SLIST_HEADER FreeLists[32];                                             
/*0x2D0*/     ULONG32      NumberOfBuckets;                                                  
/*0x2D4*/     UINT8        _PADDING2_[0x4];                                                  
/*0x2D8*/     struct _RTL_STD_LIST_HEAD Buckets[1];                                          
/*0x2E8*/     UINT8        _PADDING3_[0x8];                                                  
          }STACK_TRACE_DATABASE, *PSTACK_TRACE_DATABASE;                                     
                                                                                             
          typedef struct _STRING64          // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;                                             
          }STRING64, *PSTRING64;                                               
                                                                               
          typedef struct _SYSTEM_POWER_CAPABILITIES            // 33 elements, 0x4C bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        PowerButtonPresent;                                                     
/*0x001*/     UINT8        SleepButtonPresent;                                                     
/*0x002*/     UINT8        LidPresent;                                                             
/*0x003*/     UINT8        SystemS1;                                                               
/*0x004*/     UINT8        SystemS2;                                                               
/*0x005*/     UINT8        SystemS3;                                                               
/*0x006*/     UINT8        SystemS4;                                                               
/*0x007*/     UINT8        SystemS5;                                                               
/*0x008*/     UINT8        HiberFilePresent;                                                       
/*0x009*/     UINT8        FullWake;                                                               
/*0x00A*/     UINT8        VideoDimPresent;                                                        
/*0x00B*/     UINT8        ApmPresent;                                                             
/*0x00C*/     UINT8        UpsPresent;                                                             
/*0x00D*/     UINT8        ThermalControl;                                                         
/*0x00E*/     UINT8        ProcessorThrottle;                                                      
/*0x00F*/     UINT8        ProcessorMinThrottle;                                                   
/*0x010*/     UINT8        ProcessorMaxThrottle;                                                   
/*0x011*/     UINT8        FastSystemS4;                                                           
/*0x012*/     UINT8        Hiberboot;                                                              
/*0x013*/     UINT8        WakeAlarmPresent;                                                       
/*0x014*/     UINT8        AoAc;                                                                   
/*0x015*/     UINT8        DiskSpinDown;                                                           
/*0x016*/     UINT8        HiberFileType;                                                          
/*0x017*/     UINT8        AoAcConnectivitySupported;                                              
/*0x018*/     UINT8        spare3[6];                                                              
/*0x01E*/     UINT8        SystemBatteriesPresent;                                                 
/*0x01F*/     UINT8        BatteriesAreShortTerm;                                                  
/*0x020*/     struct _BATTERY_REPORTING_SCALE BatteryScale[3];                                     
/*0x038*/     enum _SYSTEM_POWER_STATE AcOnLineWake;                                               
/*0x03C*/     enum _SYSTEM_POWER_STATE SoftLidWake;                                                
/*0x040*/     enum _SYSTEM_POWER_STATE RtcWake;                                                    
/*0x044*/     enum _SYSTEM_POWER_STATE MinDeviceWakeState;                                         
/*0x048*/     enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;                                      
          }SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;                                    
                                                                                                   
           typedef struct _TEB                                      // 127 elements, 0x1838 bytes (sizeof) 
           {                                                                                               
/*0x000*/      struct _NT_TIB NtTib;                                // 8 elements, 0x38 bytes (sizeof)     
/*0x038*/      UINT64       EnvironmentPointer;                     // VOID*                               
/*0x040*/      struct _CLIENT_ID ClientId;                          // 2 elements, 0x10 bytes (sizeof)     
/*0x050*/      UINT64       ActiveRpcHandle;                        // VOID*                               
/*0x058*/      UINT64       ThreadLocalStoragePointer;              // VOID*                               
/*0x060*/      UINT64       ProcessEnvironmentBlock;                // struct _PEB*                        
/*0x068*/      ULONG32      LastErrorValue;                                                                
/*0x06C*/      ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x070*/      UINT64       CsrClientThread;                        // VOID*                               
/*0x078*/      UINT64       Win32ThreadInfo;                        // VOID*                               
/*0x080*/      ULONG32      User32Reserved[26];                                                            
/*0x0E8*/      ULONG32      UserReserved[5];                                                               
/*0x0FC*/      UINT8        _PADDING0_[0x4];                                                               
/*0x100*/      UINT64       WOW32Reserved;                          // VOID*                               
/*0x108*/      ULONG32      CurrentLocale;                                                                 
/*0x10C*/      ULONG32      FpSoftwareStatusRegister;                                                      
/*0x110*/      UINT64       ReservedForDebuggerInstrumentation[16]; // VOID*                               
/*0x190*/      UINT64       SystemReserved1[30];                    // VOID*                               
/*0x280*/      CHAR         PlaceholderCompatibilityMode;                                                  
/*0x281*/      UINT8        PlaceholderHydrationAlwaysExplicit;                                            
/*0x282*/      CHAR         PlaceholderReserved[10];                                                       
/*0x28C*/      ULONG32      ProxiedProcessId;                                                              
/*0x290*/      struct _ACTIVATION_CONTEXT_STACK _ActivationStack;   // 5 elements, 0x28 bytes (sizeof)     
/*0x2B8*/      UINT8        WorkingOnBehalfTicket[8];                                                      
/*0x2C0*/      LONG32       ExceptionCode;                                                                 
/*0x2C4*/      UINT8        Padding0[4];                                                                   
/*0x2C8*/      UINT64       ActivationContextStackPointer;          // struct _ACTIVATION_CONTEXT_STACK*   
/*0x2D0*/      UINT64       InstrumentationCallbackSp;                                                     
/*0x2D8*/      UINT64       InstrumentationCallbackPreviousPc;                                             
/*0x2E0*/      UINT64       InstrumentationCallbackPreviousSp;                                             
/*0x2E8*/      ULONG32      TxFsContext;                                                                   
/*0x2EC*/      UINT8        InstrumentationCallbackDisabled;                                               
/*0x2ED*/      UINT8        UnalignedLoadStoreExceptions;                                                  
/*0x2EE*/      UINT8        Padding1[2];                                                                   
/*0x2F0*/      struct _GDI_TEB_BATCH GdiTebBatch;                   // 4 elements, 0x4E8 bytes (sizeof)    
/*0x7D8*/      struct _CLIENT_ID RealClientId;                      // 2 elements, 0x10 bytes (sizeof)     
/*0x7E8*/      UINT64       GdiCachedProcessHandle;                 // VOID*                               
/*0x7F0*/      ULONG32      GdiClientPID;                                                                  
/*0x7F4*/      ULONG32      GdiClientTID;                                                                  
/*0x7F8*/      UINT64       GdiThreadLocalInfo;                     // VOID*                               
/*0x800*/      UINT64       Win32ClientInfo[62];                                                           
/*0x9F0*/      UINT64       glDispatchTable[233];                   // VOID*                               
/*0x1138*/     UINT64       glReserved1[29];                                                               
/*0x1220*/     UINT64       glReserved2;                            // VOID*                               
/*0x1228*/     UINT64       glSectionInfo;                          // VOID*                               
/*0x1230*/     UINT64       glSection;                              // VOID*                               
/*0x1238*/     UINT64       glTable;                                // VOID*                               
/*0x1240*/     UINT64       glCurrentRC;                            // VOID*                               
/*0x1248*/     UINT64       glContext;                              // VOID*                               
/*0x1250*/     ULONG32      LastStatusValue;                                                               
/*0x1254*/     UINT8        Padding2[4];                                                                   
/*0x1258*/     struct _UNICODE_STRING StaticUnicodeString;          // 3 elements, 0x10 bytes (sizeof)     
/*0x1268*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0x1472*/     UINT8        Padding3[6];                                                                   
/*0x1478*/     UINT64       DeallocationStack;                      // VOID*                               
/*0x1480*/     UINT64       TlsSlots[64];                           // VOID*                               
/*0x1680*/     struct _LIST_ENTRY TlsLinks;                         // 2 elements, 0x10 bytes (sizeof)     
/*0x1690*/     UINT64       Vdm;                                    // VOID*                               
/*0x1698*/     UINT64       ReservedForNtRpc;                       // VOID*                               
/*0x16A0*/     UINT64       DbgSsReserved[2];                       // VOID*                               
/*0x16B0*/     ULONG32      HardErrorMode;                                                                 
/*0x16B4*/     UINT8        Padding4[4];                                                                   
/*0x16B8*/     UINT64       Instrumentation[11];                    // VOID*                               
/*0x1710*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0x1720*/     UINT64       SubProcessTag;                          // VOID*                               
/*0x1728*/     UINT64       PerflibData;                            // VOID*                               
/*0x1730*/     UINT64       EtwTraceData;                           // VOID*                               
/*0x1738*/     UINT64       WinSockData;                            // VOID*                               
/*0x1740*/     ULONG32      GdiBatchCount;                                                                 
               union                                                // 3 elements, 0x4 bytes (sizeof)      
               {                                                                                           
/*0x1744*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0x1744*/         ULONG32      IdealProcessorValue;                                                       
                   struct                                           // 4 elements, 0x4 bytes (sizeof)      
                   {                                                                                       
/*0x1744*/             UINT8        ReservedPad0;                                                          
/*0x1745*/             UINT8        ReservedPad1;                                                          
/*0x1746*/             UINT8        ReservedPad2;                                                          
/*0x1747*/             UINT8        IdealProcessor;                                                        
                   };                                                                                      
               };                                                                                          
/*0x1748*/     ULONG32      GuaranteedStackBytes;                                                          
/*0x174C*/     UINT8        Padding5[4];                                                                   
/*0x1750*/     UINT64       ReservedForPerf;                        // VOID*                               
/*0x1758*/     UINT64       ReservedForOle;                         // VOID*                               
/*0x1760*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0x1764*/     UINT8        Padding6[4];                                                                   
/*0x1768*/     UINT64       SavedPriorityState;                     // VOID*                               
/*0x1770*/     UINT64       ReservedForCodeCoverage;                                                       
/*0x1778*/     UINT64       ThreadPoolData;                         // VOID*                               
/*0x1780*/     UINT64       TlsExpansionSlots;                      // VOID**                              
/*0x1788*/     UINT64       DeallocationBStore;                     // VOID*                               
/*0x1790*/     UINT64       BStoreLimit;                            // VOID*                               
/*0x1798*/     ULONG32      MuiGeneration;                                                                 
/*0x179C*/     ULONG32      IsImpersonating;                                                               
/*0x17A0*/     UINT64       NlsCache;                               // VOID*                               
/*0x17A8*/     UINT64       pShimData;                              // VOID*                               
/*0x17B0*/     ULONG32      HeapData;                                                                      
/*0x17B4*/     UINT8        Padding7[4];                                                                   
/*0x17B8*/     UINT64       CurrentTransactionHandle;               // VOID*                               
/*0x17C0*/     UINT64       ActiveFrame;                            // struct _TEB_ACTIVE_FRAME*           
/*0x17C8*/     UINT64       FlsData;                                // VOID*                               
/*0x17D0*/     UINT64       PreferredLanguages;                     // VOID*                               
/*0x17D8*/     UINT64       UserPrefLanguages;                      // VOID*                               
/*0x17E0*/     UINT64       MergedPrefLanguages;                    // VOID*                               
/*0x17E8*/     ULONG32      MuiImpersonation;                                                              
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EC*/         UINT16       CrossTebFlags;                                                             
/*0x17EC*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
               };                                                                                          
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EE*/         UINT16       SameTebFlags;                                                              
                   struct                                           // 16 elements, 0x2 bytes (sizeof)     
                   {                                                                                       
/*0x17EE*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0x17EE*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0x17EE*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0x17EE*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0x17EE*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0x17EE*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0x17EE*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0x17EE*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0x17EE*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0x17EE*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0x17EE*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0x17EE*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0x17EE*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0x17EE*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0x17EE*/             UINT16       SkipLoaderInit : 1;             // 14 BitPosition                      
/*0x17EE*/             UINT16       SpareSameTebBits : 1;           // 15 BitPosition                      
                   };                                                                                      
               };                                                                                          
/*0x17F0*/     UINT64       TxnScopeEnterCallback;                  // VOID*                               
/*0x17F8*/     UINT64       TxnScopeExitCallback;                   // VOID*                               
/*0x1800*/     UINT64       TxnScopeContext;                        // VOID*                               
/*0x1808*/     ULONG32      LockCount;                                                                     
/*0x180C*/     LONG32       WowTebOffset;                                                                  
/*0x1810*/     UINT64       ResourceRetValue;                       // VOID*                               
/*0x1818*/     UINT64       ReservedForWdf;                         // VOID*                               
/*0x1820*/     UINT64       ReservedForCrt;                                                                
/*0x1828*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
           }TEB, *PTEB;                                                                                    
                                                                                                           
          typedef struct _TEB_ACTIVE_FRAME  // 3 elements, 0x18 bytes (sizeof)   
          {                                                                      
/*0x000*/     ULONG32      Flags;                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                      
/*0x008*/     UINT64       Previous;        // struct _TEB_ACTIVE_FRAME*         
/*0x010*/     UINT64       Context;         // struct _TEB_ACTIVE_FRAME_CONTEXT* 
          }TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME;                                     
                                                                                 
          typedef struct _TEB_ACTIVE_FRAME_CONTEXT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Flags;                                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     UINT64       FrameName;              // CHAR*                           
          }TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT;                                   
                                                                                      
          typedef struct _TEB32                                    // 117 elements, 0x1000 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _NT_TIB32 NtTib;                              // 8 elements, 0x1C bytes (sizeof)     
/*0x01C*/     ULONG32      EnvironmentPointer;                                                            
/*0x020*/     struct _CLIENT_ID32 ClientId;                        // 2 elements, 0x8 bytes (sizeof)      
/*0x028*/     ULONG32      ActiveRpcHandle;                                                               
/*0x02C*/     ULONG32      ThreadLocalStoragePointer;                                                     
/*0x030*/     ULONG32      ProcessEnvironmentBlock;                                                       
/*0x034*/     ULONG32      LastErrorValue;                                                                
/*0x038*/     ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x03C*/     ULONG32      CsrClientThread;                                                               
/*0x040*/     ULONG32      Win32ThreadInfo;                                                               
/*0x044*/     ULONG32      User32Reserved[26];                                                            
/*0x0AC*/     ULONG32      UserReserved[5];                                                               
/*0x0C0*/     ULONG32      WOW32Reserved;                                                                 
/*0x0C4*/     ULONG32      CurrentLocale;                                                                 
/*0x0C8*/     ULONG32      FpSoftwareStatusRegister;                                                      
/*0x0CC*/     ULONG32      ReservedForDebuggerInstrumentation[16];                                        
/*0x10C*/     ULONG32      SystemReserved1[26];                                                           
/*0x174*/     CHAR         PlaceholderCompatibilityMode;                                                  
/*0x175*/     UINT8        PlaceholderHydrationAlwaysExplicit;                                            
/*0x176*/     CHAR         PlaceholderReserved[10];                                                       
/*0x180*/     ULONG32      ProxiedProcessId;                                                              
/*0x184*/     struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack; // 5 elements, 0x18 bytes (sizeof)     
/*0x19C*/     UINT8        WorkingOnBehalfTicket[8];                                                      
/*0x1A4*/     LONG32       ExceptionCode;                                                                 
/*0x1A8*/     ULONG32      ActivationContextStackPointer;                                                 
/*0x1AC*/     ULONG32      InstrumentationCallbackSp;                                                     
/*0x1B0*/     ULONG32      InstrumentationCallbackPreviousPc;                                             
/*0x1B4*/     ULONG32      InstrumentationCallbackPreviousSp;                                             
/*0x1B8*/     UINT8        InstrumentationCallbackDisabled;                                               
/*0x1B9*/     UINT8        SpareBytes[23];                                                                
/*0x1D0*/     ULONG32      TxFsContext;                                                                   
/*0x1D4*/     struct _GDI_TEB_BATCH32 GdiTebBatch;                 // 4 elements, 0x4E0 bytes (sizeof)    
/*0x6B4*/     struct _CLIENT_ID32 RealClientId;                    // 2 elements, 0x8 bytes (sizeof)      
/*0x6BC*/     ULONG32      GdiCachedProcessHandle;                                                        
/*0x6C0*/     ULONG32      GdiClientPID;                                                                  
/*0x6C4*/     ULONG32      GdiClientTID;                                                                  
/*0x6C8*/     ULONG32      GdiThreadLocalInfo;                                                            
/*0x6CC*/     ULONG32      Win32ClientInfo[62];                                                           
/*0x7C4*/     ULONG32      glDispatchTable[233];                                                          
/*0xB68*/     ULONG32      glReserved1[29];                                                               
/*0xBDC*/     ULONG32      glReserved2;                                                                   
/*0xBE0*/     ULONG32      glSectionInfo;                                                                 
/*0xBE4*/     ULONG32      glSection;                                                                     
/*0xBE8*/     ULONG32      glTable;                                                                       
/*0xBEC*/     ULONG32      glCurrentRC;                                                                   
/*0xBF0*/     ULONG32      glContext;                                                                     
/*0xBF4*/     ULONG32      LastStatusValue;                                                               
/*0xBF8*/     struct _STRING32 StaticUnicodeString;                // 3 elements, 0x8 bytes (sizeof)      
/*0xC00*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0xE0A*/     UINT8        _PADDING0_[0x2];                                                               
/*0xE0C*/     ULONG32      DeallocationStack;                                                             
/*0xE10*/     ULONG32      TlsSlots[64];                                                                  
/*0xF10*/     struct _LIST_ENTRY32 TlsLinks;                       // 2 elements, 0x8 bytes (sizeof)      
/*0xF18*/     ULONG32      Vdm;                                                                           
/*0xF1C*/     ULONG32      ReservedForNtRpc;                                                              
/*0xF20*/     ULONG32      DbgSsReserved[2];                                                              
/*0xF28*/     ULONG32      HardErrorMode;                                                                 
/*0xF2C*/     ULONG32      Instrumentation[9];                                                            
/*0xF50*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0xF60*/     ULONG32      SubProcessTag;                                                                 
/*0xF64*/     ULONG32      PerflibData;                                                                   
/*0xF68*/     ULONG32      EtwTraceData;                                                                  
/*0xF6C*/     ULONG32      WinSockData;                                                                   
/*0xF70*/     ULONG32      GdiBatchCount;                                                                 
              union                                                // 3 elements, 0x4 bytes (sizeof)      
              {                                                                                           
/*0xF74*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0xF74*/         ULONG32      IdealProcessorValue;                                                       
                  struct                                           // 4 elements, 0x4 bytes (sizeof)      
                  {                                                                                       
/*0xF74*/             UINT8        ReservedPad0;                                                          
/*0xF75*/             UINT8        ReservedPad1;                                                          
/*0xF76*/             UINT8        ReservedPad2;                                                          
/*0xF77*/             UINT8        IdealProcessor;                                                        
                  };                                                                                      
              };                                                                                          
/*0xF78*/     ULONG32      GuaranteedStackBytes;                                                          
/*0xF7C*/     ULONG32      ReservedForPerf;                                                               
/*0xF80*/     ULONG32      ReservedForOle;                                                                
/*0xF84*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0xF88*/     ULONG32      SavedPriorityState;                                                            
/*0xF8C*/     ULONG32      ReservedForCodeCoverage;                                                       
/*0xF90*/     ULONG32      ThreadPoolData;                                                                
/*0xF94*/     ULONG32      TlsExpansionSlots;                                                             
/*0xF98*/     ULONG32      MuiGeneration;                                                                 
/*0xF9C*/     ULONG32      IsImpersonating;                                                               
/*0xFA0*/     ULONG32      NlsCache;                                                                      
/*0xFA4*/     ULONG32      pShimData;                                                                     
/*0xFA8*/     ULONG32      HeapData;                                                                      
/*0xFAC*/     ULONG32      CurrentTransactionHandle;                                                      
/*0xFB0*/     ULONG32      ActiveFrame;                                                                   
/*0xFB4*/     ULONG32      FlsData;                                                                       
/*0xFB8*/     ULONG32      PreferredLanguages;                                                            
/*0xFBC*/     ULONG32      UserPrefLanguages;                                                             
/*0xFC0*/     ULONG32      MergedPrefLanguages;                                                           
/*0xFC4*/     ULONG32      MuiImpersonation;                                                              
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFC8*/         UINT16       CrossTebFlags;                                                             
/*0xFC8*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
              };                                                                                          
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFCA*/         UINT16       SameTebFlags;                                                              
                  struct                                           // 16 elements, 0x2 bytes (sizeof)     
                  {                                                                                       
/*0xFCA*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0xFCA*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0xFCA*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0xFCA*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0xFCA*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0xFCA*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0xFCA*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0xFCA*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0xFCA*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0xFCA*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0xFCA*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0xFCA*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0xFCA*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0xFCA*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0xFCA*/             UINT16       SkipLoaderInit : 1;             // 14 BitPosition                      
/*0xFCA*/             UINT16       SpareSameTebBits : 1;           // 15 BitPosition                      
                  };                                                                                      
              };                                                                                          
/*0xFCC*/     ULONG32      TxnScopeEnterCallback;                                                         
/*0xFD0*/     ULONG32      TxnScopeExitCallback;                                                          
/*0xFD4*/     ULONG32      TxnScopeContext;                                                               
/*0xFD8*/     ULONG32      LockCount;                                                                     
/*0xFDC*/     LONG32       WowTebOffset;                                                                  
/*0xFE0*/     ULONG32      ResourceRetValue;                                                              
/*0xFE4*/     ULONG32      ReservedForWdf;                                                                
/*0xFE8*/     UINT64       ReservedForCrt;                                                                
/*0xFF0*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
          }TEB32, *PTEB32;                                                                                
                                                                                                          
           typedef struct _TEB64                                    // 127 elements, 0x1838 bytes (sizeof) 
           {                                                                                               
/*0x000*/      struct _NT_TIB64 NtTib;                              // 8 elements, 0x38 bytes (sizeof)     
/*0x038*/      UINT64       EnvironmentPointer;                                                            
/*0x040*/      struct _CLIENT_ID64 ClientId;                        // 2 elements, 0x10 bytes (sizeof)     
/*0x050*/      UINT64       ActiveRpcHandle;                                                               
/*0x058*/      UINT64       ThreadLocalStoragePointer;                                                     
/*0x060*/      UINT64       ProcessEnvironmentBlock;                                                       
/*0x068*/      ULONG32      LastErrorValue;                                                                
/*0x06C*/      ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x070*/      UINT64       CsrClientThread;                                                               
/*0x078*/      UINT64       Win32ThreadInfo;                                                               
/*0x080*/      ULONG32      User32Reserved[26];                                                            
/*0x0E8*/      ULONG32      UserReserved[5];                                                               
/*0x0FC*/      UINT8        _PADDING0_[0x4];                                                               
/*0x100*/      UINT64       WOW32Reserved;                                                                 
/*0x108*/      ULONG32      CurrentLocale;                                                                 
/*0x10C*/      ULONG32      FpSoftwareStatusRegister;                                                      
/*0x110*/      UINT64       ReservedForDebuggerInstrumentation[16];                                        
/*0x190*/      UINT64       SystemReserved1[30];                                                           
/*0x280*/      CHAR         PlaceholderCompatibilityMode;                                                  
/*0x281*/      UINT8        PlaceholderHydrationAlwaysExplicit;                                            
/*0x282*/      CHAR         PlaceholderReserved[10];                                                       
/*0x28C*/      ULONG32      ProxiedProcessId;                                                              
/*0x290*/      struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack; // 5 elements, 0x28 bytes (sizeof)     
/*0x2B8*/      UINT8        WorkingOnBehalfTicket[8];                                                      
/*0x2C0*/      LONG32       ExceptionCode;                                                                 
/*0x2C4*/      UINT8        Padding0[4];                                                                   
/*0x2C8*/      UINT64       ActivationContextStackPointer;                                                 
/*0x2D0*/      UINT64       InstrumentationCallbackSp;                                                     
/*0x2D8*/      UINT64       InstrumentationCallbackPreviousPc;                                             
/*0x2E0*/      UINT64       InstrumentationCallbackPreviousSp;                                             
/*0x2E8*/      ULONG32      TxFsContext;                                                                   
/*0x2EC*/      UINT8        InstrumentationCallbackDisabled;                                               
/*0x2ED*/      UINT8        UnalignedLoadStoreExceptions;                                                  
/*0x2EE*/      UINT8        Padding1[2];                                                                   
/*0x2F0*/      struct _GDI_TEB_BATCH64 GdiTebBatch;                 // 4 elements, 0x4E8 bytes (sizeof)    
/*0x7D8*/      struct _CLIENT_ID64 RealClientId;                    // 2 elements, 0x10 bytes (sizeof)     
/*0x7E8*/      UINT64       GdiCachedProcessHandle;                                                        
/*0x7F0*/      ULONG32      GdiClientPID;                                                                  
/*0x7F4*/      ULONG32      GdiClientTID;                                                                  
/*0x7F8*/      UINT64       GdiThreadLocalInfo;                                                            
/*0x800*/      UINT64       Win32ClientInfo[62];                                                           
/*0x9F0*/      UINT64       glDispatchTable[233];                                                          
/*0x1138*/     UINT64       glReserved1[29];                                                               
/*0x1220*/     UINT64       glReserved2;                                                                   
/*0x1228*/     UINT64       glSectionInfo;                                                                 
/*0x1230*/     UINT64       glSection;                                                                     
/*0x1238*/     UINT64       glTable;                                                                       
/*0x1240*/     UINT64       glCurrentRC;                                                                   
/*0x1248*/     UINT64       glContext;                                                                     
/*0x1250*/     ULONG32      LastStatusValue;                                                               
/*0x1254*/     UINT8        Padding2[4];                                                                   
/*0x1258*/     struct _STRING64 StaticUnicodeString;                // 3 elements, 0x10 bytes (sizeof)     
/*0x1268*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0x1472*/     UINT8        Padding3[6];                                                                   
/*0x1478*/     UINT64       DeallocationStack;                                                             
/*0x1480*/     UINT64       TlsSlots[64];                                                                  
/*0x1680*/     struct _LIST_ENTRY64 TlsLinks;                       // 2 elements, 0x10 bytes (sizeof)     
/*0x1690*/     UINT64       Vdm;                                                                           
/*0x1698*/     UINT64       ReservedForNtRpc;                                                              
/*0x16A0*/     UINT64       DbgSsReserved[2];                                                              
/*0x16B0*/     ULONG32      HardErrorMode;                                                                 
/*0x16B4*/     UINT8        Padding4[4];                                                                   
/*0x16B8*/     UINT64       Instrumentation[11];                                                           
/*0x1710*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0x1720*/     UINT64       SubProcessTag;                                                                 
/*0x1728*/     UINT64       PerflibData;                                                                   
/*0x1730*/     UINT64       EtwTraceData;                                                                  
/*0x1738*/     UINT64       WinSockData;                                                                   
/*0x1740*/     ULONG32      GdiBatchCount;                                                                 
               union                                                // 3 elements, 0x4 bytes (sizeof)      
               {                                                                                           
/*0x1744*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0x1744*/         ULONG32      IdealProcessorValue;                                                       
                   struct                                           // 4 elements, 0x4 bytes (sizeof)      
                   {                                                                                       
/*0x1744*/             UINT8        ReservedPad0;                                                          
/*0x1745*/             UINT8        ReservedPad1;                                                          
/*0x1746*/             UINT8        ReservedPad2;                                                          
/*0x1747*/             UINT8        IdealProcessor;                                                        
                   };                                                                                      
               };                                                                                          
/*0x1748*/     ULONG32      GuaranteedStackBytes;                                                          
/*0x174C*/     UINT8        Padding5[4];                                                                   
/*0x1750*/     UINT64       ReservedForPerf;                                                               
/*0x1758*/     UINT64       ReservedForOle;                                                                
/*0x1760*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0x1764*/     UINT8        Padding6[4];                                                                   
/*0x1768*/     UINT64       SavedPriorityState;                                                            
/*0x1770*/     UINT64       ReservedForCodeCoverage;                                                       
/*0x1778*/     UINT64       ThreadPoolData;                                                                
/*0x1780*/     UINT64       TlsExpansionSlots;                                                             
/*0x1788*/     UINT64       DeallocationBStore;                                                            
/*0x1790*/     UINT64       BStoreLimit;                                                                   
/*0x1798*/     ULONG32      MuiGeneration;                                                                 
/*0x179C*/     ULONG32      IsImpersonating;                                                               
/*0x17A0*/     UINT64       NlsCache;                                                                      
/*0x17A8*/     UINT64       pShimData;                                                                     
/*0x17B0*/     ULONG32      HeapData;                                                                      
/*0x17B4*/     UINT8        Padding7[4];                                                                   
/*0x17B8*/     UINT64       CurrentTransactionHandle;                                                      
/*0x17C0*/     UINT64       ActiveFrame;                                                                   
/*0x17C8*/     UINT64       FlsData;                                                                       
/*0x17D0*/     UINT64       PreferredLanguages;                                                            
/*0x17D8*/     UINT64       UserPrefLanguages;                                                             
/*0x17E0*/     UINT64       MergedPrefLanguages;                                                           
/*0x17E8*/     ULONG32      MuiImpersonation;                                                              
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EC*/         UINT16       CrossTebFlags;                                                             
/*0x17EC*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
               };                                                                                          
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EE*/         UINT16       SameTebFlags;                                                              
                   struct                                           // 16 elements, 0x2 bytes (sizeof)     
                   {                                                                                       
/*0x17EE*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0x17EE*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0x17EE*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0x17EE*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0x17EE*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0x17EE*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0x17EE*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0x17EE*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0x17EE*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0x17EE*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0x17EE*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0x17EE*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0x17EE*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0x17EE*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0x17EE*/             UINT16       SkipLoaderInit : 1;             // 14 BitPosition                      
/*0x17EE*/             UINT16       SpareSameTebBits : 1;           // 15 BitPosition                      
                   };                                                                                      
               };                                                                                          
/*0x17F0*/     UINT64       TxnScopeEnterCallback;                                                         
/*0x17F8*/     UINT64       TxnScopeExitCallback;                                                          
/*0x1800*/     UINT64       TxnScopeContext;                                                               
/*0x1808*/     ULONG32      LockCount;                                                                     
/*0x180C*/     LONG32       WowTebOffset;                                                                  
/*0x1810*/     UINT64       ResourceRetValue;                                                              
/*0x1818*/     UINT64       ReservedForWdf;                                                                
/*0x1820*/     UINT64       ReservedForCrt;                                                                
/*0x1828*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
           }TEB64, *PTEB64;                                                                                
                                                                                                           
          typedef struct _TERMINATION_PORT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Next;           // struct _TERMINATION_PORT*       
/*0x008*/     UINT64       Port;           // VOID*                           
          }TERMINATION_PORT, *PTERMINATION_PORT;                                   
                                                                              
          typedef struct _THREAD_ENERGY_VALUES       // 4 elements, 0xC8 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Cycles[2][4];                                                
/*0x040*/     UINT64       AttributedCycles[2][4];                                      
/*0x080*/     UINT64       WorkOnBehalfCycles[2][4];                                    
/*0x0C0*/     union _TIMELINE_BITMAP CpuTimeline;    // 3 elements, 0x8 bytes (sizeof)  
          }THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES;                                   
                                                                                        
          typedef struct _THREAD_PERFORMANCE_DATA       // 10 elements, 0x1C0 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Size;                                                             
/*0x002*/     UINT16       Version;                                                          
/*0x004*/     struct _PROCESSOR_NUMBER ProcessorNumber; // 3 elements, 0x4 bytes (sizeof)    
/*0x008*/     ULONG32      ContextSwitches;                                                  
/*0x00C*/     ULONG32      HwCountersCount;                                                  
/*0x010*/     UINT64       UpdateCount;                                                      
/*0x018*/     UINT64       WaitReasonBitMap;                                                 
/*0x020*/     UINT64       HardwareCounters;                                                 
/*0x028*/     struct _COUNTER_READING CycleTime;        // 4 elements, 0x18 bytes (sizeof)   
/*0x040*/     struct _COUNTER_READING HwCounters[16];                                        
          }THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA;                                     
                                                                                             
          typedef struct _TP_CALLBACK_ENVIRON_V3           // 10 elements, 0x48 bytes (sizeof)                                         
          {                                                                                                                            
/*0x000*/     ULONG32      Version;                                                                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                            
/*0x008*/     UINT64       Pool;                           // struct _TP_POOL*                                                         
/*0x010*/     UINT64       CleanupGroup;                   // struct _TP_CLEANUP_GROUP*                                                
/*0x018*/     UINT64       CleanupGroupCancelCallback;     // FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_Free* 
/*0x020*/     UINT64       RaceDll;                        // VOID*                                                                    
/*0x028*/     UINT64       ActivationContext;              // struct _ACTIVATION_CONTEXT*                                              
/*0x030*/     UINT64       FinalizationCallback;           // FUNCT_00EF_00F6_FinalizationCallback*                                    
              union                                        // 2 elements, 0x4 bytes (sizeof)                                           
              {                                                                                                                        
/*0x038*/         ULONG32      Flags;                                                                                                  
                  struct                                   // 3 elements, 0x4 bytes (sizeof)                                           
                  {                                                                                                                    
/*0x038*/             ULONG32      LongFunction : 1;       // 0 BitPosition                                                            
/*0x038*/             ULONG32      Persistent : 1;         // 1 BitPosition                                                            
/*0x038*/             ULONG32      Private : 30;           // 2 BitPosition                                                            
                  }s;                                                                                                                  
              }u;                                                                                                                      
/*0x03C*/     enum _TP_CALLBACK_PRIORITY CallbackPriority;                                                                             
/*0x040*/     ULONG32      Size;                                                                                                       
/*0x044*/     UINT8        _PADDING1_[0x4];                                                                                            
          }TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3;                                                                            
                                                                                                                                       
typedef struct _TP_CALLBACK_INSTANCE // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;                                  
                                                                       
typedef struct _TP_CLEANUP_GROUP // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;                                  
                                                                   
typedef struct _TP_POOL // 0 elements, 0x0 bytes (sizeof) 
{                                                         
}TP_POOL, *PTP_POOL;                                      
                                                          
          typedef struct _TRUSTLET_COLLABORATION_ID // 1 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Value[2];                                                   
          }TRUSTLET_COLLABORATION_ID, *PTRUSTLET_COLLABORATION_ID;                                   
                                                                                       
          typedef struct _TRUSTLET_MAILBOX_KEY // 1 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       SecretValue[2];                                        
          }TRUSTLET_MAILBOX_KEY, *PTRUSTLET_MAILBOX_KEY;                                   
                                                                                  
          typedef struct _TXN_PARAMETER_BLOCK // 3 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT16       Length;                                               
/*0x002*/     UINT16       TxFsContext;                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                      
/*0x008*/     UINT64       TransactionObject; // VOID*                           
          }TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;                                   
                                                                                 
          typedef struct _UMS_CONTROL_BLOCK                                // 17 elements, 0x88 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT64       UmsContext;                                     // struct _RTL_UMS_CONTEXT*         
/*0x008*/     UINT64       CompletionListEntry;                            // struct _SINGLE_LIST_ENTRY*       
/*0x010*/     UINT64       CompletionListEvent;                            // struct _KEVENT*                  
/*0x018*/     ULONG32      ServiceSequenceNumber;                                                              
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                    
              union                                                        // 2 elements, 0x68 bytes (sizeof)  
              {                                                                                                
                  struct                                                   // 5 elements, 0x68 bytes (sizeof)  
                  {                                                                                            
/*0x020*/             struct _KQUEUE UmsQueue;                             // 5 elements, 0x40 bytes (sizeof)  
/*0x060*/             struct _LIST_ENTRY QueueEntry;                       // 2 elements, 0x10 bytes (sizeof)  
/*0x070*/             UINT64       YieldingUmsContext;                     // struct _RTL_UMS_CONTEXT*         
/*0x078*/             UINT64       YieldingParam;                          // VOID*                            
/*0x080*/             UINT64       UmsTeb;                                 // VOID*                            
                  };                                                                                           
                  struct                                                   // 5 elements, 0x68 bytes (sizeof)  
                  {                                                                                            
/*0x020*/             UINT64       UmsAssociatedQueue;                     // struct _KQUEUE*                  
/*0x028*/             UINT64       UmsQueueListEntry;                      // struct _LIST_ENTRY*              
/*0x030*/             struct _KEVENT UmsWaitEvent;                         // 1 elements, 0x18 bytes (sizeof)  
/*0x048*/             UINT64       StagingArea;                            // VOID*                            
                      union                                                // 2 elements, 0x38 bytes (sizeof)  
                      {                                                                                        
                          struct                                           // 3 elements, 0x4 bytes (sizeof)   
                          {                                                                                    
/*0x050*/                     ULONG32      UmsPrimaryDeliveredContext : 1; // 0 BitPosition                    
/*0x050*/                     ULONG32      UmsAssociatedQueueUsed : 1;     // 1 BitPosition                    
/*0x050*/                     ULONG32      UmsThreadParked : 1;            // 2 BitPosition                    
                          };                                                                                   
/*0x050*/                 ULONG32      UmsFlags;                                                               
                      };                                                                                       
                  };                                                                                           
              };                                                                                               
          }UMS_CONTROL_BLOCK, *PUMS_CONTROL_BLOCK;                                                             
                                                                                                               
          typedef struct _VPB                 // 9 elements, 0x60 bytes (sizeof) 
          {                                                                      
/*0x000*/     INT16        Type;                                                 
/*0x002*/     INT16        Size;                                                 
/*0x004*/     UINT16       Flags;                                                
/*0x006*/     UINT16       VolumeLabelLength;                                    
/*0x008*/     UINT64       DeviceObject;      // struct _DEVICE_OBJECT*          
/*0x010*/     UINT64       RealDevice;        // struct _DEVICE_OBJECT*          
/*0x018*/     ULONG32      SerialNumber;                                         
/*0x01C*/     ULONG32      ReferenceCount;                                       
/*0x020*/     WCHAR        VolumeLabel[32];                                      
          }VPB, *PVPB;                                                           
                                                                                 
          typedef union _WHEA_ERROR_PACKET_FLAGS            // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 7 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PreviousError : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved1 : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      HypervisorError : 1;         // 2 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      PlatformPfaControl : 1;      // 4 BitPosition                  
/*0x000*/         ULONG32      PlatformDirectedOffline : 1; // 5 BitPosition                  
/*0x000*/         ULONG32      Reserved2 : 26;              // 6 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS;                                  
                                                                                              
          typedef struct _WHEA_ERROR_PACKET_V2                // 16 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Signature;                                                             
/*0x004*/     ULONG32      Version;                                                               
/*0x008*/     ULONG32      Length;                                                                
/*0x00C*/     union _WHEA_ERROR_PACKET_FLAGS Flags;           // 8 elements, 0x4 bytes (sizeof)   
/*0x010*/     enum _WHEA_ERROR_TYPE ErrorType;                                                    
/*0x014*/     enum _WHEA_ERROR_SEVERITY ErrorSeverity;                                            
/*0x018*/     ULONG32      ErrorSourceId;                                                         
/*0x01C*/     enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;                                       
/*0x020*/     struct _GUID NotifyType;                        // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       Context;                                                               
/*0x038*/     enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;                                     
/*0x03C*/     ULONG32      Reserved1;                                                             
/*0x040*/     ULONG32      DataOffset;                                                            
/*0x044*/     ULONG32      DataLength;                                                            
/*0x048*/     ULONG32      PshedDataOffset;                                                       
/*0x04C*/     ULONG32      PshedDataLength;                                                       
          }WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2;                                          
                                                                                                  
          typedef union _WHEA_REVISION        // 3 elements, 0x2 bytes (sizeof) 
          {                                                                     
              struct                          // 2 elements, 0x2 bytes (sizeof) 
              {                                                                 
/*0x000*/         UINT8        MinorRevision;                                   
/*0x001*/         UINT8        MajorRevision;                                   
              };                                                                
/*0x000*/     UINT16       AsUSHORT;                                            
          }WHEA_REVISION, *PWHEA_REVISION;                                      
                                                                                
          typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 4 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PlatformId : 1;              // 0 BitPosition                  
/*0x000*/         ULONG32      Timestamp : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      PartitionId : 1;             // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;               // 3 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS;                                  
                                                                                              
          typedef union _WHEA_TIMESTAMP             // 10 elements, 0x8 bytes (sizeof) 
          {                                                                            
              struct                                // 9 elements, 0x8 bytes (sizeof)  
              {                                                                        
/*0x000*/         UINT64       Seconds : 8;         // 0 BitPosition                   
/*0x000*/         UINT64       Minutes : 8;         // 8 BitPosition                   
/*0x000*/         UINT64       Hours : 8;           // 16 BitPosition                  
/*0x000*/         UINT64       Precise : 1;         // 24 BitPosition                  
/*0x000*/         UINT64       Reserved : 7;        // 25 BitPosition                  
/*0x000*/         UINT64       Day : 8;             // 32 BitPosition                  
/*0x000*/         UINT64       Month : 8;           // 40 BitPosition                  
/*0x000*/         UINT64       Year : 8;            // 48 BitPosition                  
/*0x000*/         UINT64       Century : 8;         // 56 BitPosition                  
              };                                                                       
/*0x000*/     union _LARGE_INTEGER AsLARGE_INTEGER; // 4 elements, 0x8 bytes (sizeof)  
          }WHEA_TIMESTAMP, *PWHEA_TIMESTAMP;                                           
                                                                                       
          typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 4 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      Recovered : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      PreviousError : 1;       // 1 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;           // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;           // 3 BitPosition                  
              };                                                                          
/*0x000*/     ULONG32      AsULONG;                                                       
          }WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS;                                  
                                                                                          
          typedef union _WHEA_PERSISTENCE_INFO  // 7 elements, 0x8 bytes (sizeof) 
          {                                                                       
              struct                            // 6 elements, 0x8 bytes (sizeof) 
              {                                                                   
/*0x000*/         UINT64       Signature : 16;  // 0 BitPosition                  
/*0x000*/         UINT64       Length : 24;     // 16 BitPosition                 
/*0x000*/         UINT64       Identifier : 16; // 40 BitPosition                 
/*0x000*/         UINT64       Attributes : 2;  // 56 BitPosition                 
/*0x000*/         UINT64       DoNotLog : 1;    // 58 BitPosition                 
/*0x000*/         UINT64       Reserved : 5;    // 59 BitPosition                 
              };                                                                  
/*0x000*/     UINT64       AsULONGLONG;                                           
          }WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO;                                  
                                                                                  
          typedef struct _WHEA_ERROR_RECORD_HEADER                 // 16 elements, 0x80 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Signature;                                                                  
/*0x004*/     union _WHEA_REVISION Revision;                       // 3 elements, 0x2 bytes (sizeof)   
/*0x006*/     ULONG32      SignatureEnd;                                                               
/*0x00A*/     UINT16       SectionCount;                                                               
/*0x00C*/     enum _WHEA_ERROR_SEVERITY Severity;                                                      
/*0x010*/     union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits; // 5 elements, 0x4 bytes (sizeof)   
/*0x014*/     ULONG32      Length;                                                                     
/*0x018*/     union _WHEA_TIMESTAMP Timestamp;                     // 10 elements, 0x8 bytes (sizeof)  
/*0x020*/     struct _GUID PlatformId;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _GUID PartitionId;                            // 4 elements, 0x10 bytes (sizeof)  
/*0x040*/     struct _GUID CreatorId;                              // 4 elements, 0x10 bytes (sizeof)  
/*0x050*/     struct _GUID NotifyType;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x060*/     UINT64       RecordId;                                                                   
/*0x068*/     union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;         // 5 elements, 0x4 bytes (sizeof)   
/*0x06C*/     union _WHEA_PERSISTENCE_INFO PersistenceInfo;        // 7 elements, 0x8 bytes (sizeof)   
/*0x074*/     UINT8        Reserved[12];                                                               
          }WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER;                                       
                                                                                                       
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS // 4 elements, 0x1 bytes (sizeof) 
          {                                                                                               
              struct                                                    // 3 elements, 0x1 bytes (sizeof) 
              {                                                                                           
/*0x000*/         UINT8        FRUId : 1;                               // 0 BitPosition                  
/*0x000*/         UINT8        FRUText : 1;                             // 1 BitPosition                  
/*0x000*/         UINT8        Reserved : 6;                            // 2 BitPosition                  
              };                                                                                          
/*0x000*/     UINT8        AsUCHAR;                                                                       
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;                                  
                                                                                                          
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS // 9 elements, 0x4 bytes (sizeof) 
          {                                                                                           
              struct                                                // 8 elements, 0x4 bytes (sizeof) 
              {                                                                                       
/*0x000*/         ULONG32      Primary : 1;                         // 0 BitPosition                  
/*0x000*/         ULONG32      ContainmentWarning : 1;              // 1 BitPosition                  
/*0x000*/         ULONG32      Reset : 1;                           // 2 BitPosition                  
/*0x000*/         ULONG32      ThresholdExceeded : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      ResourceNotAvailable : 1;            // 4 BitPosition                  
/*0x000*/         ULONG32      LatentError : 1;                     // 5 BitPosition                  
/*0x000*/         ULONG32      Propagated : 1;                      // 6 BitPosition                  
/*0x000*/         ULONG32      Reserved : 25;                       // 7 BitPosition                  
              };                                                                                      
/*0x000*/     ULONG32      AsULONG;                                                                   
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;                                  
                                                                                                      
          typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR                 // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     ULONG32      SectionOffset;                                                                          
/*0x004*/     ULONG32      SectionLength;                                                                          
/*0x008*/     union _WHEA_REVISION Revision;                                   // 3 elements, 0x2 bytes (sizeof)   
/*0x00A*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits; // 4 elements, 0x1 bytes (sizeof)   
/*0x00B*/     UINT8        Reserved;                                                                               
/*0x00C*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;         // 9 elements, 0x4 bytes (sizeof)   
/*0x010*/     struct _GUID SectionType;                                        // 4 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _GUID FRUId;                                              // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     enum _WHEA_ERROR_SEVERITY SectionSeverity;                                                           
/*0x034*/     CHAR         FRUText[20];                                                                            
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;                                    
                                                                                                                   
          typedef struct _WHEA_ERROR_RECORD                                      // 2 elements, 0xC8 bytes (sizeof)  
          {                                                                                                          
/*0x000*/     struct _WHEA_ERROR_RECORD_HEADER Header;                           // 16 elements, 0x80 bytes (sizeof) 
/*0x080*/     struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];                                     
          }WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD;                                                                   
                                                                                                                     
          typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS // 2 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Reserved : 32;           // 0 BitPosition                  
/*0x000*/     ULONG32      AsULONG;                                                   
          }WHEA_EVENT_LOG_ENTRY_FLAGS, *PWHEA_EVENT_LOG_ENTRY_FLAGS;                                  
                                                                                      
          typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER  // 8 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      Signature;                                                     
/*0x004*/     ULONG32      Version;                                                       
/*0x008*/     ULONG32      Length;                                                        
/*0x00C*/     enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;                                       
/*0x010*/     ULONG32      OwnerTag;                                                      
/*0x014*/     enum _WHEA_EVENT_LOG_ENTRY_ID Id;                                           
/*0x018*/     union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags; // 2 elements, 0x4 bytes (sizeof)  
/*0x01C*/     ULONG32      PayloadLength;                                                 
          }WHEA_EVENT_LOG_ENTRY_HEADER, *PWHEA_EVENT_LOG_ENTRY_HEADER;                                   
                                                                                          
          typedef struct _WHEA_EVENT_LOG_ENTRY            // 1 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _WHEA_EVENT_LOG_ENTRY_HEADER Header; // 8 elements, 0x20 bytes (sizeof) 
          }WHEA_EVENT_LOG_ENTRY, *PWHEA_EVENT_LOG_ENTRY;                                     
                                                                                             
typedef struct _WNF_SCOPE_MAP // 0 elements, 0x0 bytes (sizeof) 
{                                                               
}WNF_SCOPE_MAP, *PWNF_SCOPE_MAP;                                  
                                                                
          typedef struct _XSAVE_AREA_HEADER // 3 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Mask;                                               
/*0x008*/     UINT64       CompactionMask;                                     
/*0x010*/     UINT64       Reserved2[6];                                       
          }XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;                                   
                                                                               
          typedef struct _XSAVE_AREA            // 2 elements, 0x240 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _XSAVE_FORMAT LegacyState; // 16 elements, 0x200 bytes (sizeof) 
/*0x200*/     struct _XSAVE_AREA_HEADER Header; // 3 elements, 0x40 bytes (sizeof)   
          }XSAVE_AREA, *PXSAVE_AREA;                                                 
                                                                                     
          typedef struct _XSTATE_CONTEXT // 5 elements, 0x20 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Mask;                                            
/*0x008*/     ULONG32      Length;                                          
/*0x00C*/     ULONG32      Reserved1;                                       
/*0x010*/     UINT64       Area;         // struct _XSAVE_AREA*             
/*0x018*/     UINT64       Buffer;       // VOID*                           
          }XSTATE_CONTEXT, *PXSTATE_CONTEXT;                                   
                                                                            
          typedef struct _XSTATE_SAVE               // 4 elements, 0x38 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Prev;                    // struct _XSTATE_SAVE*            
/*0x008*/     UINT64       Thread;                  // struct _KTHREAD*                
/*0x010*/     UINT8        Level;                                                      
/*0x011*/     UINT8        _PADDING0_[0x7];                                            
/*0x018*/     struct _XSTATE_CONTEXT XStateContext; // 5 elements, 0x20 bytes (sizeof) 
          }XSTATE_SAVE, *PXSTATE_SAVE;                                                 
                                                                                       

#ifdef __cplusplus
}
#endif

